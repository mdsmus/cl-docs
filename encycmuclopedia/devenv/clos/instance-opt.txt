From pmai@acm.org Wed Nov 17 13:21:41 1999
Path: news.mclink.it!news.caspur.it!serra.unipi.it!newsfeed.cineca.it!newsfeed.nettuno.it!bignews.mediaways.net!unlisys!news.snafu.de!fu-berlin.de!cs.tu-berlin.de!dent.isdn.cs.tu-berlin.de!not-for-mail
From: pmai@acm.org (Pierre R. Mai)
Newsgroups: comp.lang.lisp
Subject: Re: [MOP] add-method question
Date: 17 Nov 1999 13:21:41 +0100
Organization: Technical University Berlin, Germany
Lines: 74
Message-ID: <87zowdmhpm.fsf@orion.dent.isdn.cs.tu-berlin.de>
References: <3831044D.C6FFE407@EECS.Berkeley.Edu> <87k8ni7iim.fsf@orion.dent.isdn.cs.tu-berlin.de> <3831B864.91549227@EECS.Berkeley.Edu> <87ln7yt8bi.fsf@orion.dent.isdn.cs.tu-berlin.de> <3831EC94.FF1E42E3@EECS.Berkeley.Edu>
NNTP-Posting-Host: dent.isdn.cs.tu-berlin.de
Mime-Version: 1.0 (generated by tm-edit 7.108)
Content-Type: text/plain; charset=US-ASCII
X-Trace: news.cs.tu-berlin.de 942841986 26993 130.149.223.160 (17 Nov 1999 12:33:06 GMT)
X-Complaints-To: news@cs.tu-berlin.de
NNTP-Posting-Date: 17 Nov 1999 12:33:06 GMT
X-Server-Date: 17 Nov 1999 12:21:43 GMT
X-Face: /*3I*tn$ZTJ]<2&dd0'RP/bd4u}"hA=q"H{Q_:5(D)`OOV4`</9/UT(.p2u6Ha](:DU+.6z
 F)GjO*)(}3Q&MRR"}<|K$:R/iPj(;!0u$?6,Q7vG<Akt=H|q[N#HLz(+LR5aAho;/MGsSA0FfXi,h5
 1,+T:)-*~Zs<}lsA:k/w4eh&fh}rdG2h7'n=X{=2Y\W4y-T\:3"^BAY
X-PGP-Fingerprint: 17 2D 00 93 8B C8 57 57  A7 D7 CD E9 3A EA 6E 4C
X-Newsreader: Gnus v5.6.45/XEmacs 21.1 - "Arches"
Xref: news.mclink.it comp.lang.lisp:29973

Hidayet Tunc Simsek <simsek@EECS.Berkeley.Edu> writes:

> > There are a couple of calls of the form (funcall #'bla-bla ...)  the
> > motivation of which I don't understand, since (bla-bla ...) could be
> > used equally well in those places, if I'm not missing something else.
> 
> You're not missing anything important.  When you say (bla-bla ...)
> CMUCL gives tons of warnings that |PCL::MAKE-INSTANCE ...| is not
> defined.
> I suppose its doing optimization in a sense but I don't quite get what.

It is in fact trying to optimize instance creation: When it sees a use
of make-instance with a constant class argument, it will try to use
the class-specific "method" directly, without going through all the
generic dispatch overhead, if possible.  But if you reference a class
that has been defined in the same file as the call to make-instance,
the method-function will not yet exist (since the defclass form has
not yet been loaded), and so it warns you about the fact that the
function is not yet defined (it will be defined once you load the
compiled file, i.e. you won't get this warning again when recompiling
the file after having loaded it).

This is a general problem with PCL&CMUCL, which will also give you
spurious warnings on other occassions:  Since the CMUCL compiler knows 
little about PCL code, it will not know that certain functions will be 
defined within the same compilation unit.  One way to overcome this is 
by causing defclass, defmethod and defgeneric to be evaluated at
compile-time as well, with the following code:

(pushnew 'cl:compile pcl::*defgeneric-times*)
(pushnew 'cl:compile pcl::*defmethod-times*)
(pushnew 'cl:compile pcl::*defclass-times*)

This will cause def* to have compile-time effects as well as load-time 
effects, which is a hack, but helps to quelch spurious warnings.  I
have been trying to think of a way to make the CMUCL compiler aware of 
the special effects of def* transparently, but haven't come up with a
really useable plan until now.

What I wouldn't try to do is to outsmart CMUCL by using funcall, since 
this will also throw off any readers of your code IMHO... ;)

To give you an idea on the speed-increases you can expect from this
optimization, here is a snippet of recent CLOS timings I performed on
an AMD-K6-2 350 on Linux with a recent CMU CL version:

MAKE-INSTANCE of a constant class with two slots and no initialization methods:
Takes 10.90 microseconds (average of 100,000 iterations).

MAKE-INSTANCE of a constant class with four slots and no initialization methods:
Takes 13.44 microseconds (average of 100,000 iterations).

MAKE-INSTANCE of a constant class with four slots and one initialization method:
Takes 13.64 microseconds (average of 100,000 iterations).

MAKE-INSTANCE of a variable class by name with two slots and no initialization m
ethods:
Takes 31.18 microseconds (average of 100,000 iterations).

MAKE-INSTANCE of a variable class by object with two slots and no initialization
 methods:
Takes 29.04 microseconds (average of 100,000 iterations).

So it will be advantageous to let CMU CL optimize, especially if you
have a high instance creation frequency somewhere (in this case you
could also think about using PCL's defconstructor to reduce creation
times even further...).

Regs, Pierre.

-- 
Pierre Mai <pmai@acm.org>         PGP and GPG keys at your nearest Keyserver
  "One smaller motivation which, in part, stems from altruism is Microsoft-
   bashing." [Microsoft memo, see http://www.opensource.org/halloween1.html]

