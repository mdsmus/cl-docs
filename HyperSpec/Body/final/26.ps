%!PS
%%Title: CLHS: Chapter 26</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="f_user_h.htm"> <link rel="UP" href="../Front/Contents.htm"> <link rel="NEXT" href="26_a.htm"> <title>CLHS: Section 26.1</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_.htm"> <link rel="UP" href="26_.htm"> <link rel="NEXT" href="h_glossa.htm"> <title>CLHS: Glossary-Section Non-alphabetic</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="h_glossa.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_a.htm"> <title>CLHS: Glossary-Section A</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_9.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_b.htm"> <title>CLHS: Glossary-Section B</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_a.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_c.htm"> <title>CLHS: Glossary-Section C</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_b.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_d.htm"> <title>CLHS: Glossary-Section D</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_c.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_e.htm"> <title>CLHS: Glossary-Section E</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_d.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_f.htm"> <title>CLHS: Glossary-Section F</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_e.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_g.htm"> <title>CLHS: Glossary-Section G</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_f.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_h.htm"> <title>CLHS: Glossary-Section H</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_g.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_i.htm"> <title>CLHS: Glossary-Section I</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_h.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_k.htm"> <title>CLHS: Glossary-Section K</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_i.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_l.htm"> <title>CLHS: Glossary-Section L</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_k.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_m.htm"> <title>CLHS: Glossary-Section M</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_l.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_n.htm"> <title>CLHS: Glossary-Section N</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_m.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_o.htm"> <title>CLHS: Glossary-Section O</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_n.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_p.htm"> <title>CLHS: Glossary-Section P</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_o.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_q.htm"> <title>CLHS: Glossary-Section Q</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_p.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_r.htm"> <title>CLHS: Glossary-Section R</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_q.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_s.htm"> <title>CLHS: Glossary-Section S</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_r.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_t.htm"> <title>CLHS: Glossary-Section T</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_s.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_u.htm"> <title>CLHS: Glossary-Section U</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_t.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_v.htm"> <title>CLHS: Glossary-Section V</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_u.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_w.htm"> <title>CLHS: Glossary-Section W</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_v.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_y.htm"> <title>CLHS: Glossary-Section Y
%%Creator: html2ps version 1.0 beta3
%%EndComments
save
2000 dict begin
/d {bind def} bind def
/D {def} d
/t true D
/f false D
/FL [/Times-Roman
/Times-Italic
/Times-Bold
/Times-BoldItalic
/Courier
/Courier-Oblique
/Courier-Bold
/Courier-BoldOblique
/Helvetica
/Helvetica-Oblique
/Helvetica-Bold
/Helvetica-BoldOblique] D
/WF t D
/WI 0 D
/F 1 D
/IW 510 F div D
/IL 714 F div D
/PS 842 D
/EF [0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 2 2] D
/EZ [11 9 19 17 15 13 12 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 8 8] D
/Ey [0 0 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] D
/EG [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1] D
/Tm [1 1 0.8 0.8 0.8 0.8 0.8 0.8 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1.3 0 0] D
/Bm [1 1 0.5 0.5 0.5 0.5 0.5 0.5 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1 0 0] D
/Lm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 0 0 2 0 0 0] D
/Rm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0] D
/EU [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0] D
/NO t D
/YY [[{()}1][{()}0][{()}2]] D
/ZZ [[{()}1][{()}0][{()}2]] D
/Ts EZ 0 get D
/TU f D
/Xp t D
/AU f D
/SN 0 D
/Cf f D
/Tp f D
/Fe f D
/TI 1 Ts mul D
/Fm 14 D
/xL 57 D
/xR 57 D
/yL 799 D
/yR 799 D
/Wl 510 F div D
/Wr 510 F div D
/hL 714 F div D
/hR 714 F div D
/FE {newpath Fm neg Fm M CP BB IW Fm add Fm L IW Fm add IL Fm add neg L CP BB
 Fm neg IL Fm add neg L closepath} D
/LA {PM 0 eq{/IW Wl D /IL hL D}{/IW Wr D /IL hR D}ie /W IW D /LL W D /LS W D
 /LE IL D TU PM 0 eq and{IW 56 F div add SA{Sf div}if 0 translate}
 {PM 0 eq{xL yL}{xR yR}ie translate F SA{Sf mul}if dup scale
 CS CF FS Cf{CA CL get VC}if /Bb f D}ie 0 0 M
 TF not Tc or {Cf{gsave SA{1 Sf div dup scale}if Cb VC FE fill grestore}if}if}D
/Pi 0 Ts mul D
/SG [0.8 1 1] D
/Ab 15 D
/J 0 D
/Tc f D
/NH 6 D
/Nf f D
/Pa f D
/LH 1.2 D
/XR f D
/Xr {/pN E D ( [p ) WB pN WB (] )WB} D
/Db [16#FF 16#FF 16#FF] D
/Dt [16#00 16#00 16#00] D
/eA f D
/Fi f D
/bT f D
/Lc t D
/Dl [16#00 16#00 16#00] D
/LX f D
/Br 0.25 D
/IA ([IMAGE]) D
/DS {/PF f D()WB NL NP()pop RC ZF} D
/Gb f D
/Mb t D
/Hc [16#00 16#00 16#00] D
/Bl 3 D
/MI -15.2 D
/DX (DRAFT) D
/Di 0 D
/Tt 113.385826771654 D
/Th {()2 Al()BR (
      ) 0 1 -1 H()4 FZ Ti ES()EH (
      ) 0 2 -1 H() ME 0 get join EH()Ea()BR()} D
/tH {()0 1 -1 H (Table of Contents) EH()} D
/FD 2 D
/Dy 2 D
/cD [16#F0 16#F0 16#F0] D
/FW 0.6 D
/FU [16#00 16#00 16#00] D
/ET {/RM f D /A0 3 D /PN SN D /OU t D /Ou t D /W IW D /LL W D D1
 Ms not TP and{Ip}if /TF f D} D

%-- End of variable part --
/MySymbol 10 dict dup begin
 /FontType 3 D /FontMatrix [.001 0 0 .001 0 0 ] D /FontBBox [25 -10 600 600] D
 /Encoding 256 array D 0 1 255{Encoding exch /.notdef put}for
 Encoding (e) 0 get /euro put
 /Metrics 2 dict D Metrics begin
  /.notdef 0 D
  /euro 651 D
 end
 /BBox 2 dict D BBox begin
  /.notdef [0 0 0 0] D
  /euro [25 -10 600 600] D
 end
 /CharacterDefs 2 dict D CharacterDefs begin
  /.notdef {} D
  /euro{newpath 114 600 moveto 631 600 lineto 464 200 lineto 573 200 lineto
   573 0 lineto -94 0 lineto 31 300 lineto -10 300 lineto closepath clip
   50 setlinewidth newpath 656 300 moveto 381 300 275 0 360 arc stroke
   -19 350 moveto 600 0 rlineto -19 250 moveto 600 0 rlineto stroke}d
 end
 /BuildChar{0 begin
  /char E D /fontdict E D /charname fontdict /Encoding get char get D
  fontdict begin
   Metrics charname get 0 BBox charname get aload pop setcachedevice
   CharacterDefs charname get exec
  end
 end}D
 /BuildChar load 0 3 dict put /UniqueID 1 D
end
definefont pop

/Cd {aload length 2 idiv dup dict begin {D} repeat currentdict end} D
/EX {EC cvx exec} D
/DU {} d
/BB {pop pop}d
/ie {ifelse} d
/E {exch} d
/M {moveto} d
/R {rmoveto} d
/L {lineto} d
/RL {rlineto} d
/CP {currentpoint} d
/SW {stringwidth} d
/GI {getinterval} d
/PI {putinterval} d
/Sg {setgray} d
/LW {setlinewidth} d
/S {dup () ne OU and{0 Co R AT 3 eq LB and HF not and A1 0 ne A2 0 ne or and
 {A2 0 32 A1 0 6 -1 roll awidthshow}{show}ie 0 Co neg R}{pop}ie
 OU PH 3 eq or{/Ms t D}if} D
/U {OU{gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M dup SW pop
 CJ 0 RL stroke grestore}if} D
/B {OU Br 0 gt and{CP Ts neg Ts .33 mul R gsave 0 Sg
 CP newpath Ts Br mul 0 360 arc closepath UI 2 mod 0 eq{stroke}{fill}ie
 grestore M CP E Ts Br 1 add mul sub E BB /Ms t D}if}D
/NP {Ms TP not or PA and OU and{TP{OR}if f1{mF k2 /mF E D /YC 0 D}if
 TP TU not PM 0 eq or and{showpage}if DU Ip TE not{LA}if 0.6 LW
 /CI 0 D /TP t D /Hs f D /hl 6 D /Hv 6 D /HI hi D /Ms f D}if Bs XO BO M} D
/Np {LE sub CP E pop gt PL 0 eq and{NP}if}D
/Ip {/PN PN 1 add D /Pn RM{1}{4}ie PN Ns D /PM PN SN sub 2 mod D} D
/GP {E dup 3 -1 roll get PN 1 add 2 mod get dup type /integertype eq
 {get 0 get}{E pop}ie}d
/Fc {dup 2 GP exec SW pop /S1 E D dup 1 GP exec SW pop /S2 E D 0 GP exec SW
 pop /S3 E D S1 0 gt{S2 2 mul S1 add S3 2 mul S1 add 2 copy lt{E}if pop}{0}ie
 S2 S3 add 2 copy lt{E}if pop IW .9 mul div dup 1 gt{1 E div}{pop 1}ie}D
/OR {Df{Sd}if tp not{gsave SA{1 Sf div dup scale}if Fe{Cf{FU VC}if FW LW
 1 setlinejoin FE stroke}if /YO {60 F div dup 40 gt{pop 40}if}D /cs CS D
 /cf CF D /CF 0 D /pf PF D /PF f D /Fn FN D /At AT D /AT 0 D /FN EF Hf 1 add
 get D Fz Fs FS ZZ Fc Fz mul Fs FS EU Hf 1 add get dup type /arraytype eq
 Cf and{VC}{pop 0 Sg}ie IW IL neg YO sub M ZZ 1 GP exec dup SW pop neg 0 R Sh
 0 IL neg YO sub M ZZ 0 GP exec Sh ZZ 2 GP exec dup SW pop IW E sub 2 div
 IL neg YO sub M Sh Fz Fs FS NO{/AW IW Pn SW pop sub D AW 2 div IL neg YO sub
 S1 0 gt S2 AW .45 mul gt or S3 AW .45 mul gt or{Fz 2 mul sub}if M Pn Sh}if
 EU Hf get dup type /arraytype eq Cf and{VC}{pop 0 Sg}ie YY Fc /FN EF Hf get D
 Hz mul HS FS IW YO M YY 1 GP exec dup SW pop neg 0 R Sh 0 YO M YY 0 GP exec Sh
 YY 2 GP exec dup SW pop IW E sub 2 div YO M Sh /FN Fn D /AT At D t Pb XO SZ
 SL get neg R /PF pf D grestore /CF 0 D cs cf FS}if}D
/Sh {dup () ne{CP Hz 4 div sub BB show CP CS add BB}{pop}ie}D
/Pb {/OU E D /Ou OU D /PB t D 0 0 M Ba{/Sa save D /BP t D /Fl t D RC /PL 0 D
 /PH 0 D /W IW D /LE IL .7 mul D /EO 0 D SI ZF /YA 0 D /BO 0 D /C1 () D
 BA 0 Ts neg R Bb{Xl Yl Xh Yh}if Bb CP Sa restore M
 {/Yh E D /Xh E D /Yl E D /Xl E D}if /Fl t D}if
 BL /OU t D /HM f D /Ou t D /PB f D} D
/Bs {/BP Ba not D}D
/reencodeISO {
 dup dup findfont dup length dict begin{1 index /FID ne{D}{pop pop}ie}forall
 /Encoding ISOLatin1Encoding D currentdict end definefont} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
[128/backslash 129/parenleft 130/parenright 141/circumflex 142/tilde
143/perthousand 144/dagger 145/daggerdbl 146/Ydieresis 147/scaron 148/Scaron
149/oe 150/OE 151/guilsinglleft 152/guilsinglright 153/quotesinglbase
154/quotedblbase 155/quotedblleft 156/quotedblright 157/endash 158/emdash
159/trademark]
aload length 2 idiv 1 1 3 -1 roll{pop ISOLatin1Encoding 3 1 roll put}for
/colorimage where{pop}{
 /colorimage {
  pop pop /Pr E D {/Cv Pr D /Gr Cv length 3 idiv string D 0 1 Gr length 1 sub
   {Gr E dup /i E 3 mul D Cv i get 0.299 mul Cv i 1 add get 0.587 mul add
    Cv i 2 add get 0.114 mul add cvi put}for Gr} image} D
}ie
/pdfmark where{pop}{userdict /pdfmark /cleartomark load put}ie
WF{FL{reencodeISO D}forall}{4 1 FL length 1 sub{FL E get reencodeISO D}for}ie
/Symbol dup dup findfont dup length dict begin
 {1 index /FID ne{D}{pop pop}ie}forall /Encoding [Encoding aload pop]
 dup 128 /therefore put D currentdict end definefont D

/SF {/CS E D SZ SL CS put FO SL FN put /YI CS LH neg mul D dup ST cvs ( ) join
 CS ST cvs join C1 E join ( NF ) join /C1 E D CS NF /Wf WF FN 0 gt or D
 /BW Wf{( ) SW pop}{0}ie D}D
/NF {/cS E D /cF E D cF 0 ge{FL cF get}{cF -1 eq{/Symbol}{/MySymbol}ie}ie
 findfont cS scalefont setfont} D
/FS {CF or /CF E D FR SL CF put CF CF 0 ge{FN 4 mul add}if E SF} D
/PC {SH /BP f D fin not GL not and{NL}if /HM t D /LL LS D} D
/BS {/TX E D Wf{/fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search{/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub 1 sub NN GI GL{SH cF cS OC
 2 copy cS ne E cF ne or{NF}{pop pop}ie}{PC /CW WH BW add D}ie
 /SC LK D}
 {GL{JC}if
 /CW CW WH add BW add D /HM t D}ie /GL f D /Ph f D
 /LK LK NW length 1 add add D}{pop exit}ie}loop
 /fin t D TX SC LK SC sub GI SH RT () ne{GL not{CC}if}if
 /LC TX length D /WH RT SW pop D CW WH add Hy{HC SW pop add}if LL gt
 {RT GL{SH cF cS OC 2 copy cS ne E cF ne or{NF}{pop pop}ie
 Hy{/Ph t D}if /LL LS D}{NL /LL LS D SH}ie}
 {RT PC Hy{CC}if /Ph Ph Hy or D}ie RT () ne{/GL t D /HM t D}if}
 {TX SW pop LL le{TX SH}{/NW () D 0 2 TX length 1 sub
 {/CW E D TX 0 CW GI dup SW pop LL gt{pop NW SH /HM t D NL/LL W XO sub MR sub D
 /CW CW 2 sub NN D /TX TX CW TX length CW sub GI D TX BS exit}
 {/NW E D}ie}for}ie}ie /HM t D}D
/CC {C0 length 0 gt{JC}if /C0 [C1 L1 YA YB Mf NS NB TB AF Bw] D
 /C1 () D /L0 L1 D /YA 0 D /YB 0 D /Mf 0 D /NS 0 D /NB 0 D}D
/JC {C0 aload length 0 gt{pop pop pop NB add /NB E D NS add /NS E D
 dup Mf gt{/Mf E D}{pop}ie dup YB gt{/YB E D}{pop}ie
 dup YA gt{/YA E D}{pop}ie pop C1 join /C1 E D /C0 [] D}if}D
/OC {C0 length 0 gt{C1 L1 L0 sub YA YB Mf NS NB TB AF Bw GL C0 aload pop
 /Bw E D /AF E D /TB E D /NB E D /NS E D /Mf E D /YB E D /YA E D /C0 [] D
 /L1 E D /C1 E D Ph{HC SH}if NL /GL E D /Bw E D /AF E D /TB E D /NB E D /NS E D
 /Mf E D /YB E D /YA E D /L1 E D /LL W L1 sub XO sub MR sub WH sub D /CW 0 D
 C1 E join /C1 E D}if}D
/BT {/LB t D dup length string copy RS dup dup () ne E ( ) ne and
 {/CI 0 D /LS LL D /LL W L1 sub XO sub MR sub D BS}
 {dup ( ) eq{/GL f D}if dup () eq L1 0 eq or{pop}{SH /BP f D /Ph f D}ie}ie
 /LB f D} D
/BL {CP E pop XO E M} D
/NL {JC /GL f D /SK W XO sub MR sub L1 sub TB{Bw add}if D
 /YA LF{Mf HM Fl not and PF or{LH mul}if}{0 /LF t D}ie YA 2 copy lt{E}if pop D
 C1 () ne{/FB YB Mf SA{Sf mul}if 4 div 2 copy lt{E}if pop D}if Fl{/Ya YA D}if
 CP E pop YA sub YB sub LE neg lt Fl not and PB not and{NP}if NT TL BL
 OU PF not and PB or{/RE L1 TB{Bw sub}if
 W XO sub MR sub div YA YB add LE BO add div 2 copy lt{E}if pop D
 RE 1 gt{BL 1 RE div dup scale}if}if
 AT 2 le{SK AT mul 2 div YA neg R}if
 AT 3 eq{0 YA neg R TB{/NB NB 1 sub D /NS NS 1 sub D}if /NB NB 1 sub NN D
 /A3 NS 6 mul NB add D NS NB add 0 eq
  {/A1 0 D /A2 0 D}
  {NS 0 eq{/A1 SK NB div dup J gt{pop 0}if D /A2 0 D}{J A3 mul SK lt
   {/A1 J D /A2 SK J NB mul sub NS div dup Ab gt{/A1 0 D pop 0}if D}
   {/A1 SK A3 div D /A2 A1 6 mul D}ie}ie}ie /A1 A1 NN D /A2 A2 NN D}if
 AT 4 eq{0 YA neg R PH 2 le{PD 0 lt{/PD L1 D}if PD M1 gt{/M1 PD D}if
 L1 PD sub M2 gt{/M2 L1 PD sub D}if}{DV ID 1 sub get 0 ge{Lo 0 R}if}ie}if
 F0 cF ne Cs cS ne or{F0 Cs NF}if
 /ms Ms D /Ms f D CP FB sub
 C1 cvx exec XO EO sub L1 add TB{BW sub}if dup LM gt{/LM E D}{pop}ie
 PH 0 eq PH 4 eq or Ms and{HF not{/PO t D /AH t D}if
 BB CP YA add E AT 3 eq LB and{A1 sub}if TB{BW sub}if E BB}
 {pop pop}ie Ms HM PH 3 eq and or{/BP f D /Fl f D}if
 /Lo 0 D /L1 0 D /F0 cF D /Cs cS D BP not{0 YB NN neg R}if
 OU f1 and mF not and{k2 /f1 f D}if
 OU PF not and PB or{RE 1 gt{RE dup scale}if}if /Ms ms Ms or D
 /C1 AF{(Cp )}{()}ie D /YA 0 D /YB 0 D BL
 AT 4 eq LB not and PH 3 ge and
 {ID DV length lt{DV ID get dup 0 ge{DO E sub /Lo E D /L1 Lo D}{pop}ie
 /ID ID 1 add D}if}if /T t D CD{/LN LN 1 add D PD}if
 /PD -1 D /NS 0 D /NB 0 D /TB f D /Ph f D /Mf 0 D /HM f D} D
/RS {/TM E D /CN 0 D TM{10 eq{TM CN ( ) PI}if /CN CN 1 add D}forall
 /CN 0 D /BK HM EN and{0}{1}ie D TM
 {dup 32 ne{TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq{TM CN 32 put /CN CN 1 add D}if /BK 1 D}ie}forall
 TM 0 CN GI dup dup () ne E ( ) ne and
 {dup CN 1 sub get 32 eq{/EN f D}{/EN t D}ie}if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI}d
/WR {(\n) search{dup () ne BP not or
 {Li 4 le CP E pop YI Li mul add LE add 0 lt and PL 0 eq and{NP}if
 SH NL pop /Li Li 1 sub D WR}{pop pop WR}ie}{SH}ie /CI 0 D /BP f D} D
/SH {dup dup () ne E ( ) ne and PF or CS Mf gt and{/Mf CS D}if
 T not Wf and{( ) E join /T t D}if dup BP{/MF CS D}if
 AT 3 eq{2 copy length dup 0 gt{/NB E NB add D
 {( ) search{/NS NS 1 add D pop pop}{pop exit}ie}loop}{pop pop}ie}if
 CD PD 0 lt and{dup DC search{SW pop /PD E L1 add D pop pop}{pop}ie}if
 0 Np dup SW pop L1 add /L1 E D dup () ne
 {C1 (\() join E join (\)) join AU AF and UF or Wf and{( U ) join}if
 sF{( s ) join}if ( S ) join
 /C1 E D dup length 1 sub get 32 eq /TB E D /Bw BW D}{pop pop}ie} D
/BG {AI LG BC add add 0 eq} D
/ON {OU{Ty AR AI NN get dup 1 add Ln Ns Ty 2 mod 0 eq{(.  )}{(\)  )}ie join
 dup SW pop neg 0 R CP E 0 lt{0 E M}{pop}ie CP BB show /Ms t D}if} D
/Ln {AR AI 3 -1 roll put}D
/SP {dup CI lt BP not and{dup CI sub 0 E R /CI E D}{pop}ie} D
/BN {PF{WR /HM f D}{BT NL}ie} D
/NN {dup 0 lt{pop 0}if} D
/h {(h) HI ST cvs join cvx exec dup 1 get E Nf{0 get E join}{pop}ie} D
/H {/fn FN D /Hi E 1 add D 1 sub /HL E D /H2 HL 2 add D /GS EZ H2 get D
 E Tm H2 get GS mul BE dup 0 gt{1 sub}{pop EG H2 get dup 0 lt{pop AT}if}ie NA
 WW Np /SL SL 1 add D /FN EF H2 get D GS Ey H2 get FS
 EU H2 get Sc Hs not HL Hl lt and Hs HL hl lt and or Hi 0 eq or
 {/HI Hi D /Hs t D /hl HL D /Hv HL D}if HL Hl lt{/hi Hi D}if
 Nf HI 0 gt and{(h) Hi ST cvs join cvx exec 0 get WB}if
 /HF t D /AH f D /PO f D} D
/EH {Bm H2 get GS mul BE OA /SL SL 1 sub NN D /CF 0 D /FN fn D
 SZ SL get FR SL get FS /HF f D /GS Ts D ()Ec} D
/P {E PF{WR}{PO{EP}{BN}ie Ts 4 mul Np AE not{Tm 0 get Ts mul neg SP}if
 dup 0 ge AH and{Pi Pd}if}ie 1 sub dup 0 lt{pop AV AL get}if /AT E D /PO t D} D
/EP {PF{WR}{BN Ts 4 mul Np}ie AE not{Bm 0 get Ts mul neg SP}if
 /AT AV AL get D /PO f D} D
/BE {E PO{EP}{BN}ie Ts 4 mul Np neg SP} D
/HR {/Aw W EO sub D /RW E dup 0 gt{Aw mul}{neg}ie dup Aw gt{pop Aw}if D /RZ E D
 E BN Ts neg SP 1 sub 2 div Aw RW sub mul EO add CP E pop M PF{0 Ps neg R}if
 0 Np OU{gsave RZ LW Cf{Hc VC}{0 Sg}ie CP BB RW 0 RL CP BB stroke grestore}if
 /CI 0 D /BP f D PF not{Ts neg SP}if /Ms t D} D
/AD {I NL EG 14 get dup 0 lt{pop AT}if NA /AE t D Tm 14 get Ts mul neg SP
 Cf{EU 14 get dup -1 eq{pop CA CL get}if Sc}if} D
/DA {BN ()ES OA /AE f D ()Ec Bm 14 get Ts mul neg SP} D
/PR {/MW E D /Li E D Tm 1 get Ps mul BE 0 NA /FN Fp D /PF t D SI /SL SL 1 add D
 /CF 0 D Ps CS mul Ts div MW WC mul CS mul Ts div dup LL gt PL 0 eq and
 {LL div div}{pop}ie Ey 1 get FS CP E pop LE add YI neg div cvi dup Li lt
 AH and{4 lt YI Li mul 5 mul LE add 0 gt or PL 0 eq and{NP}if}{pop}ie
 EU 1 get Sc /GS Ps D}D
/RP {WR NL () /PF f D SI /FN 0 D ES Bm 1 get Ps mul neg SP OA /GS Ts D} D
/SI {/XO Lm 15 get BC NN mul Lm 16 get AI UI sub NN mul add
 Lm 17 get UI NN mul add Lm 20 get LG NN mul add Ts mul
 PF{Lm 1 get Ps mul add}if EO add D
 /MR Rm 15 get BC NN mul Rm 16 get AI UI sub NN mul add
 Rm 17 get UI NN mul add Rm 20 get LG NN mul add Ts mul
 PF{Rm 1 get Ps mul add}if D /LL W XO sub MR sub D} D
/DT {/cC E D BN /LG LG 1 sub D SI /LG LG 1 add D WW 2 div Np BL} D
/DD {WB Cc 0 eq cC 0 eq and L1 0 eq or Lm 20 get Ts mul L1 sub TB{BW add}if
 Ts 2 div lt or NL /LF E D SI BL /cC 0 D} D
/DL {Dc LG Cc put /Cc E D BG{Tm 18 get Ts mul BE}{BN}ie /LG LG 1 add D BL} D
/LD {BN LG 0 gt{/LG LG 1 sub D}if /Cc Dc LG get D SI
 BG{()Bm 18 get Ts mul BE}if BL} D
/UL {BG{Tm 17 get Ts mul BE}{BN}ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI BG{()Bm 17 get Ts mul BE}if BL} D
/OL {E BG{Tm 16 get Ts mul BE}{BN}ie TR AI NN Ty put /Ty E D NR AI NN 1 put
 /AI AI 1 add D SI BL 1 Ln} D
/LO {BN /AI AI 1 sub D /Ty TR AI get D SI BG{()Bm 16 get Ts mul BE}if BL} D
/LI {E BN -1 SP /BP f D /CI 0 D 0 Np NR AI 1 sub NN get 1 eq
 {dup dup 0 gt E 4 le and{/Ty E D}{pop}ie
 /L1 L1 Ty AR AI NN get Ns SW pop XO sub dup 0 lt{pop 0}if add D ( ON )}
 {pop ( B )}ie C1 E join /C1 E D CS Mf gt{/Mf CS D}if BL} D
/BQ {Tm 15 get Ts mul BE /BC BC 1 add D SI BL} D
/QB {Bm 15 get Ts mul BE /BC BC 1 sub D SI BL} D
/Al {E EP 1 sub dup 0 lt{pop AV AL get}if NA} D
/Ea {EP OA} D
/WB {PF{WR}{BT}ie} D
/F1 {WB /FN 0 D CS 0 FS} D
/F2 {WB /FN WI D CS 0 FS} D
/HY {/Hy t D WB /Hy f D} D
/YH {WB} D
/A {/LT E D LT 1 eq{/RN E D}if /Lh E D WB /C1 C1 ( Cp ) join D
 Lc AF not and{Cl Sc}if /AF t D} D
/EA {Lc AF and{Ec}{WB}ie TL Pa AF and Lh 0 ne and
 {( \() Lh join (\)) join /AF f D WB}if /AF f D} D
/TL {C1 ( Tl ) apa /C1 E D} d
/apa {AF OU and Lh 0 ne LT 1 eq or and{LT 1 eq{RN ( /) E ST cvs join}
 {(\() Lh join (\)) join}ie E join join}{pop}ie} d
/Cp {/Xc CP /Yc E D D} D
/SS {Cf{dup 0 ge{EU E get dup -1 eq{pop CA CL get}if}{pop CA CL get}ie Sc}
 {pop}ie SZ SL get /SL SL 1 add D} D
/I {WB 8 SS 1 FS} D
/EM {WB 8 SS /CF CF 1 xor D 0 FS} D
/BD {WB 9 SS 2 FS} D
/TT {WB 10 SS /FN Fp D 0 FS} D
/KB {WB 11 SS /FN Fp D 2 FS} D
/CT {WB 12 SS 1 FS} D
/SM {WB 13 SS /FN Fp D 0 FS} D
/Q {/QL QL 1 add D QO QL 2 mod get La get join WB} D
/EQ {QC QL 2 mod get La get join WB /QL QL 1 sub D} D
/RO {WB -1 SS /CF 0 D 0 FS} D
/SY {WB -1 SS -1 FS} D
/MY {WB -1 SS -2 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D /FN FO SL get D SZ SL get FR SL get FS ()Ec}D
/FZ {3 sub 1.2 E exp GS mul E WB TL /C1 C1 ( Cp ) join D /SL SL 1 add D 0 FS} D
/Ef {WB TL ()ES /C1 C1 ( Cp ) join D} D
/BZ {dup /Bf E D FZ}D
/Sc {dup -1 ne Cf and{/CL CL 1 add D dup 0 eq{pop [0 0 0]}if
 dup CA E CL E put VS ( VC ) join C1 E join /C1 E D}{pop}ie} D
/Ec {WB Cf{/CL CL 1 sub NN D CA CL get VS ( VC ) join C1 E join /C1 E D}if} D
/VS {dup type /arraytype eq{([) E {ST cvs join ( ) join}forall (]) join}if} D
/VC {{255 div}forall setrgbcolor} D
/Sl {dup type /integertype ne{Ds}if /La E D WB}d
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SE {WB /sF t D} D
/XE {WB /sF f D} D
/sM {/C1 C1 ( k1 ) join D}d
/eM {/C1 C1 ( k2 ) join D}d
/k1 {/YC CP E pop Ts add D /mF t D /f1 t D}d
/k2 {gsave 3 LW -9 CP E pop Ts 0.2 mul sub M -9 YC L stroke grestore /mF f D}d
/Ac {/AC E D WB}d
/Ca {eA{( \()join AC join(\) )join}if WB}d
/s {OU{gsave 0 CS .25 mul R dup SW pop CJ 0 RL stroke grestore}if}D
/CJ {AT 3 eq LB and{E dup dup length 1 sub A1 mul E
 {( ) search{pop pop E A2 add E}{pop exit}ie}loop 3 -1 roll add
 W CP pop sub 2 copy gt{E}if pop}if}D
/So {/Co E D} D
/SO {C1 Yo ST cvs join ( So ) join /C1 E D (j) SW pop 2 div Pd} D
/Se {E WB CS E div Pd}D
/Pd {dup type /stringtype eq{SW pop}if dup /L1 E L1 add D
 ST cvs ( 0 R ) join C1 E join /C1 E D} D
/Sp {0.35 CO} D
/Sb {-0.2 CO} D
/CO {OV Io Yo put /Yo E CS mul Yo add D /Io Io 1 add D -1.5 Io mul 3 add FZ SO
 CS Yo add dup YA gt{/YA E D}{pop}ie
 Yo neg dup YB gt{/YB E D}{pop}ie} D
/Es {ES /Io Io 1 sub NN D /Yo OV Io get D SO} D
/SB {/N2 0 D 0 1 NI{/N E D{IX N2 get 0 lt{/N2 N2 1 add D}{exit}ie}loop
 /K WS N get FC N get mul D /NY AY N2 get D /BV NY array D
 0 1 NY 1 sub{/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put /N2 N2 1 add D}for} D
/IC [{/MA E D /MB 0 D}{2 div /MA E D /MB MA D}{/MB E CS sub D /MA CS D}
 {pop /MA YS AB mul D /MB 1 AB sub YS mul D}{pop /MA 0 D /MB 0 D}] D
/IP {BV N get /N N 1 add D} D
/II {/K E D IX K get 0 lt{/EC E D}if /TY E D
 TY 4 eq{/Y E D /X E D}if TY 3 eq{/AB E D}if
 /XW AX K get D /YW AY K get D /IS SG IT K get get D /XS XW IS mul D
 /YS YW IS mul D YS IC TY get exec /MA MA Fl not{3 add}if D} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /ec EC D /BP f D /CI 0 D WB TL L1 xs add dup XO add MR add W gt
 {pop /ma ma Fl{3 add}if D NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {/L1 E D ma YA gt{/YA ma D}if mb YB gt{/YB mb D}if}ie /TB f D
 OU{CP E pop YS sub LE neg lt Fl not and PB not and{NP /YA ma D /YB mb D}if
 /BP f D ty ST cvs ( ) join IX k get 0 lt{(\() join ec join (\) ) join}if
 k ST cvs join ty 3 eq{AB ST cvs ( ) join E join}if
 ty 4 eq{X ST cvs ( ) join Y ST cvs join ( ) join E join}if C1 E join
 ( DI ) join FP 2 eq FP 1 eq AF and or{( FM ) join}if
 ( Il Cp ) apa /C1 E D /EN f D}if /HM t D /T f D} D
/DI {II /Xc CP /Yc E D D /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave
 TY 4 eq{OX X IS mul add OY FY add YS sub Y IS mul sub}
 {/FY YS D CP MB sub 2 copy /OY E D /OX E D}ie
 translate K2 0 ge{/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq{image}{f 3 colorimage}ie}
 {EX}ie grestore XS 0 R /Ms t D} D
/FM {gsave 0 Sg CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL
 XS neg 0 RL stroke grestore} D
/NA {/AT E D /AL AL 1 add D AV AL AT put} D
/OA {AL 0 gt{/AL AL 1 sub D /AT AV AL get D}if} D
/D1 {/BR {CP E pop E BN Mb{CP E pop eq{0 YI R}if}{pop}ie} D
 /Sn {OU{C1 E ST cvs join ( Ld ) join /C1 E D}{pop}ie} D} D
/D1 {/BR {BN} D /Sn {OU {C1 E ST cvs join ( Ld ) join /C1 E D} {pop} ie} D} D
/TC {/TF t D /ML 0 D HN{SW pop dup ML gt{/ML E D}{pop}ie}forall NP /RM RM not D
 RC /OU Tc D Ep /PN 0 D Ms not TP and{Ip}if /W IW ML sub Ts sub D
 /A0 0 D TH{/BR {( ) join BT} D /Sn {pop} D /Au () D}if} D
/TN {0 eq{E EA PF HF or not XR and{HN E get Xr}{pop}ie}
 {OU{Tn 0 ge{() BN}if /Tn E D}{pop}ie WB}ie} D
/NT {OU LB not and Tn 0 ge and{PL 0 eq{Ms not{CS CF FS}if CP dup
 /y E YA sub D W 9 sub CS -1.8 mul XO L1 add 2 add{y M (.) show}for
 HN Tn get dup SW pop IW E sub y M show CP BB M}if /Tn -1 D}if} D
/Ld {/DN E D HN DN Pn put [/View [/XYZ -4 Fl{PS}{CP YA add US E pop}ie null]
 /Dest DN ST cvs cvn /DEST pdfmark} D
/C {ND 1 eq{1 sub}if TI mul /XO E D NL Nf not{pop()}if 0 3 -1 roll 1 A} D
/OP {BP not{NP}if PN 2 mod 0 eq{NP}if}D
/Ep {Xp PN 2 mod 0 eq and OU and{/Pn (-) D showpage /PM 1 D LA}if}D
/Dg [73 86 88 76 67 68 77] D
/Rd [0 [1 1 0][2 1 0][3 1 0][2 1 1][1 1 1][2 2 1][3 3 1][4 4 1][2 1 2]] D
/Ns {/m E D /c E 32 mul D /j m 1000 idiv D /p j 12 add string D
 c 96 le m 0 gt and{c 32 le {/i 0 D /d 77 D /l 100 D /m m j 1000 mul sub D
  j -1 1 {pop p i d c add put /i i 1 add D}for
  4 -2 0 {/j E D /n m l idiv D /m m n l mul sub D /d Dg j get D
   n 0 gt {/x Rd n get D x 0 get -1 1 {pop p i d c add put /i i 1 add D}for
   p i x 1 get sub Dg x 2 get j add get c add put}if /l l 10 idiv D
  }for p 0 i GI}
  {/i ST length 1 sub D m {1 sub dup 0 ge{dup 26 mod c add 1 add
   ST i 3 -1 roll put 26 idiv dup 0 eq{pop exit}if}if /i i 1 sub D}loop
   ST i ST length i sub GI}ie}
 {m p cvs}ie} D
/US {matrix currentmatrix matrix defaultmatrix matrix invertmatrix
 matrix concatmatrix transform} D
/GB {Gb{US}if}D
/Tl {/Rn E D Xc CP pop ne{
 [/Rect [Xc 1 sub Yc cS 0.25 mul sub GB CP E 1 add E cS 0.85 mul add GB]
  /Subtype /Link /Border [0 0 Cf Lc and LX and AU or{0}{1}ie] Rn type
  /nametype eq {/Dest Rn}{/Action [/Subtype /URI /URI Rn] Cd}ie
  /ANN pdfmark}if} D
/Il {/Rn E D [/Rect [Xc Yc GB Xc XS add Yc YS add GB] /Subtype /Link
 /Border [0 0 0] Rn type /nametype eq{/Dest Rn}
 {/Action [/Subtype /URI /URI Rn] Cd}ie /ANN pdfmark} D
/XP {[{/Z Bz 2 div D Z 0 R Z Z RL Z neg Z RL Z neg Z neg RL Z Z neg RL
 Fi cH 1 eq and{fill}if} {Bz 0 RL 0 Bz RL Bz neg 0 RL 0 Bz neg RL
 Fi cH 1 eq and{fill}if} {0 -5 R Bz 0 RL 0 21 RL Bz neg 0 RL 0 -21 RL}]} D
/MS {/Sm E D WB}D
/O {BN()Sm BX} D
/BX {/Bt E D Bt 2 lt{/Ch E D CS 0.8 mul}{11 mul}ie W XO sub MR sub
 2 copy gt{E}if pop /HZ E D Bt 2 eq{Fi not{pop()}if ( )E join /Ft E D TT
 /PF t D /MW 1 D /Li 1 D /Fw Ft SW pop D Fw HZ gt{/HZ Fw 8 add D}if
 HZ ST cvs( )join}{WB Ch ST cvs( )join}ie L1 HZ add XO add MR add W gt{NL}if
 Bt 2 eq{Ft ES Fw neg HM{CS sub}if Pd}if Bt ST cvs join( Bx )join
 Bt 2 eq HM and{CS Pd}if C1 E join /C1 E D /L1 L1 HZ add D /T f D
 ( ) Pd /PF f D Bt 2 lt{YA CS .8 mul lt{/YA CS .8 mul D}if}
 {YB 5 lt{/YB 5 D}if YA 21 lt{/YA 21 D}if}ie /CI 0 D} D
/Bx {dup 2 eq{E /Bz E D}{E /cH E D /Bz CS .8 mul D}ie
 OU {gsave 0 Sg XP E get exec stroke grestore}{pop}ie Bz 0 R /Ms t D}D
/SD {FD 4 mul Dy add DZ NF newpath 0 0 M DX t charpath pathbbox
 3 -1 roll sub /DY E D E dup /X1 E D sub WM mul WX DY mul add WM DG mul E div
 /DF E D /DR WX DF mul DY mul WM div 2 div D} d
/Sd {gsave 0 IL Di mul neg translate IL IW atan Di 0 eq{neg}if rotate
 FD 4 mul Dy add DZ NF DR X1 sub DY 2 div neg M cD VC DX show grestore} d
/Pt {/tp t D Tp{NP /Pn (TP) D 0 Tt neg R Th BN NP Ep ET RC ZF}if /tp f D} D
/RC {/AI 0 D /LG 0 D /BC 0 D /UI 0 D /PF f D /Cc 0 D /cC 0 D /Dc 10 array D
 /NR [0 1 9{pop 0}for] D /La Ds D /AR 10 array D /TR 10 array D /AV 30 array D
 SI /AL -1 D /AT A0 D AT NA /OV 9 array D /Yo 0 D /Co 0 D /Io 0 D /Hy f D
 /Ph f D /CL -1 D Ct Sc}D
/ZF {/FR [0 1 30{pop 0}for] D /SZ [0 1 30{pop 0}for] D /FO [0 1 30{pop 0}for] D
 /SL 0 D /CF 0 D /FN 0 D 0 Ts SF}D
/QO [[(\234)(\233)(\253\240)(\232)(\273)(\253)][(')(`)(\253\240)(\231)(\273)(\253)]] D
/QC [[(\234)(\234)(\240\273)(\233)(\253)(\273)][(')(')(\240\273)(`)(\253)(\273)]] D
/Hf EF length 2 sub D
/Hz EZ Hf get D
/HS Ey Hf get D
/Fz EZ Hf 1 add get D
/Fs Ey Hf 1 add get D
/LE IL D
/Ps EZ 1 get D
/Fp EF 1 get D
/XO 0 D
/YI 0 D
/CI 0 D
/FP 0 D
/WW Ts 7 mul D
/Mf 0 D
/YA 0 D
/YB 0 D
/Cs Ts D
/GS Ts D
/F0 0 D
/NS 0 D
/NB 0 D
/N 0 D
/C0 [] D
/C1 () D
/Lo 0 D
/L1 0 D
/LM 0 D
/PH 0 D
/EC 0 D
/Lh 0 D
/LT 0 D
/CH 1 string D
/ST 16 string D
/CA 9 array D
/HC (\255) D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/sF f D
/AE f D
/AF f D
/BP t D
/CD f D
/PA t D
/GL f D
/T t D
/HF f D
/AH f D
/SA f D
/PB f D
/f1 f D
/mF f D
/OX 0 D
/OY 0 D
/FY 0 D
/EO 0 D
/FB 0 D
/PL 0 D
/Bw 0 D
/PD -1 D
/TP f D
/tp f D
/TH t D
/Ty 4 D
/Tn -1 D
/Fl t D
/LB t D
/PM 1 D
/Ms f D
/Ba f D
/Bb f D
/Hl 3 D
/hl 6 D
/Hv 6 D
/Hs f D
/HI 0 D
/hi 0 D
/PO t D
/TE f D
/LF t D
/BO 0 D
/Sm 1 D
/Bf 3 D
/A1 0 D
/A2 0 D
/Ds 1 D
/QL -1 D
/Cb Db D
/Ct Dt D
/Cl Dl D
[/Creator (html2ps version 1.0 beta3) /Author (Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman) /Keywords () /Subject ()
 /Title (CLHS: Chapter 26</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="f_user_h.htm"> <link rel="UP" href="../Front/Contents.htm"> <link rel="NEXT" href="26_a.htm"> <title>CLHS: Section 26.1</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_.htm"> <link rel="UP" href="26_.htm"> <link rel="NEXT" href="h_glossa.htm"> <title>CLHS: Glossary-Section Non-alphabetic</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="h_glossa.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_a.htm"> <title>CLHS: Glossary-Section A</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_9.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_b.htm"> <title>CLHS: Glossary-Section B</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_a.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_c.htm"> <title>CLHS: Glossary-Section C</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_b.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_d.htm"> <title>CLHS: Glossary-Section D</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_c.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_e.htm"> <title>CLHS: Glossary-Section E</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_d.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_f.htm"> <title>CLHS: Glossary-Section F</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_e.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_g.htm"> <title>CLHS: Glossary-Section G</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_f.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_h.htm"> <title>CLHS: Glossary-Section H</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_g.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_i.htm"> <title>CLHS: Glossary-Section I</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_h.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_k.htm"> <title>CLHS: Glossary-Section K</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_i.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_l.htm"> <title>CLHS: Glossary-Section L</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_k.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_m.htm"> <title>CLHS: Glossary-Section M</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_l.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_n.htm"> <title>CLHS: Glossary-Section N</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_m.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_o.htm"> <title>CLHS: Glossary-Section O</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_n.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_p.htm"> <title>CLHS: Glossary-Section P</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_o.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_q.htm"> <title>CLHS: Glossary-Section Q</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_p.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_r.htm"> <title>CLHS: Glossary-Section R</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_q.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_s.htm"> <title>CLHS: Glossary-Section S</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_r.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_t.htm"> <title>CLHS: Glossary-Section T</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_s.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_u.htm"> <title>CLHS: Glossary-Section U</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_t.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_v.htm"> <title>CLHS: Glossary-Section V</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_u.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_w.htm"> <title>CLHS: Glossary-Section W</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_v.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_y.htm"> <title>CLHS: Glossary-Section Y) /DOCINFO pdfmark
/ND 1 D
/HN [1 1 697{pop (??)}for] D
/h0 [()(Table of Contents)] D
/h1 [(0.1\240\240)(26. Glossary)] D
/h2 [(0.2\240\240)(26.1 Glossary)] D
/Hr [-695 695 696]D
/HV [1 2 2]D
/Cn [2 0 0]D
Hr length 0 gt{[/PageMode /UseOutlines /DOCVIEW pdfmark}if
/Hn 1 D
0 1 Hr length 1 sub{
 /Bn E D [Cn Bn get dup 0 gt{/Count E HV Bn get Bl ge{neg}if}{pop}ie
 /Dest Hr Bn get dup abs ST cvs cvn E 0 ge{(h)Hn ST cvs join cvx exec
 dup 1 get E Nf{0 get E join}{pop}ie /Hn Hn 1 add D}{()}ie
 /Title E dup length 255 gt{0 255 getinterval}if /OUT pdfmark}for
ZF /FN Fp D Ps 0 FS /WC Wf{( )}{<A1A1>}ie SW pop D
ET RC ZF
/Df f D
/R1 (http://www.parc.xerox.com/spl/groups/eca/pubs/complete.html#Kiczales:AMOP) D
/Ba f D /BO 0 D Bs
/UR (26.html) D
/Ti (CLHS: Chapter 26</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="f_user_h.htm"> <link rel="UP" href="../Front/Contents.htm"> <link rel="NEXT" href="26_a.htm"> <title>CLHS: Section 26.1</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_.htm"> <link rel="UP" href="26_.htm"> <link rel="NEXT" href="h_glossa.htm"> <title>CLHS: Glossary-Section Non-alphabetic</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="h_glossa.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_a.htm"> <title>CLHS: Glossary-Section A</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_9.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_b.htm"> <title>CLHS: Glossary-Section B</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_a.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_c.htm"> <title>CLHS: Glossary-Section C</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_b.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_d.htm"> <title>CLHS: Glossary-Section D</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_c.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_e.htm"> <title>CLHS: Glossary-Section E</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_d.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_f.htm"> <title>CLHS: Glossary-Section F</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_e.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_g.htm"> <title>CLHS: Glossary-Section G</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_f.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_h.htm"> <title>CLHS: Glossary-Section H</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_g.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_i.htm"> <title>CLHS: Glossary-Section I</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_h.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_k.htm"> <title>CLHS: Glossary-Section K</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_i.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_l.htm"> <title>CLHS: Glossary-Section L</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_k.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_m.htm"> <title>CLHS: Glossary-Section M</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_l.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_n.htm"> <title>CLHS: Glossary-Section N</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_m.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_o.htm"> <title>CLHS: Glossary-Section O</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_n.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_p.htm"> <title>CLHS: Glossary-Section P</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_o.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_q.htm"> <title>CLHS: Glossary-Section Q</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_p.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_r.htm"> <title>CLHS: Glossary-Section R</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_q.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_s.htm"> <title>CLHS: Glossary-Section S</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_r.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_t.htm"> <title>CLHS: Glossary-Section T</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_s.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_u.htm"> <title>CLHS: Glossary-Section U</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_t.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_v.htm"> <title>CLHS: Glossary-Section V</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_u.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_w.htm"> <title>CLHS: Glossary-Section W</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_v.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_y.htm"> <title>CLHS: Glossary-Section Y) D
/Au (Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman) D
/Df f D
/ME [(Kent M. Pitman)] D

/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
Pt

/Ba f D /BO 0 D Bs
/UR (26.html) D
/Ti (CLHS: Chapter 26</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="f_user_h.htm"> <link rel="UP" href="../Front/Contents.htm"> <link rel="NEXT" href="26_a.htm"> <title>CLHS: Section 26.1</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_.htm"> <link rel="UP" href="26_.htm"> <link rel="NEXT" href="h_glossa.htm"> <title>CLHS: Glossary-Section Non-alphabetic</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="h_glossa.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_a.htm"> <title>CLHS: Glossary-Section A</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_9.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_b.htm"> <title>CLHS: Glossary-Section B</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_a.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_c.htm"> <title>CLHS: Glossary-Section C</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_b.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_d.htm"> <title>CLHS: Glossary-Section D</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_c.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_e.htm"> <title>CLHS: Glossary-Section E</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_d.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_f.htm"> <title>CLHS: Glossary-Section F</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_e.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_g.htm"> <title>CLHS: Glossary-Section G</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_f.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_h.htm"> <title>CLHS: Glossary-Section H</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_g.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_i.htm"> <title>CLHS: Glossary-Section I</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_h.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_k.htm"> <title>CLHS: Glossary-Section K</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_i.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_l.htm"> <title>CLHS: Glossary-Section L</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_k.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_m.htm"> <title>CLHS: Glossary-Section M</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_l.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_n.htm"> <title>CLHS: Glossary-Section N</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_m.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_o.htm"> <title>CLHS: Glossary-Section O</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_n.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_p.htm"> <title>CLHS: Glossary-Section P</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_o.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_q.htm"> <title>CLHS: Glossary-Section Q</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_p.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_r.htm"> <title>CLHS: Glossary-Section R</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_q.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_s.htm"> <title>CLHS: Glossary-Section S</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_r.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_t.htm"> <title>CLHS: Glossary-Section T</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_s.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_u.htm"> <title>CLHS: Glossary-Section U</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_t.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_v.htm"> <title>CLHS: Glossary-Section V</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_u.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_w.htm"> <title>CLHS: Glossary-Section W</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_v.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_y.htm"> <title>CLHS: Glossary-Section Y) D
/Au (Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman, Kent M. Pitman) D
/Df f D
/ME [(Kent M. Pitman)] D

NP RC ZF
()1 Sl()WB 0 Sn(
)0 P()WB 1 Sn()WB 1 Sn()EA()WB 2 Sn()WB 2 Sn()EA()EP(
)0 2 0 H(26.)WB 695 Sn( Glossary)EH(

)0 2 1 H(26.1)WB 696 Sn( Glossary)EH(

)BD(Non-alphabetic)ES(
)0 P()WB 3 Sn()WB 3 Sn()BD(\201\202)ES()EA( ['nil], )I(n.)ES( an
alternative notation for writing the symbol )0 2 A()BD(nil)ES()EA(, used to emphasize the use of
)0 2 A()I(nil)ES()EA( as an
)0 2 A()I(empty
list)ES()EA(.)EP(

)BD(A)ES(
)0 P()WB 4 Sn()WB 4 Sn()BD(absolute)ES()EA( )I(adj.)ES(
1. \201of a )0 2 A()I(time)ES()EA(\202 representing a specific point
in time. 2. \201of a )0 2 A()I(pathname)ES()EA(\202 representing a
specific position in a directory hierarchy. See )0 2 A()I(relative)ES()EA(.)EP(
)0 P()WB 5 Sn()WB 5 Sn()BD(access)ES()EA( )I(n.)ES(,
)I(v.t.)ES( 1. )I(v.t.)ES( \201a )0 2 A()I(place)ES()EA(, or )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 to )0 2 A()I(read)ES()EA([1] or )0 2 A()I(write)ES()EA([1] the )0 2 A()I(value)ES()EA( of the )0 2 A()I(place)ES()EA( or an
)0 2 A()I(element)ES()EA(
of the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(. 2.
)I(n.)ES( \201of a )0 2 A()I(place)ES()EA(\202 an attempt to )0 5 1 A()I(access)ES()5 0 TN TL()Ec /AF f D([1] the )0 2 A()I(value)ES()EA( of the
)0 2 A()I(place)ES()EA(.)EP(
)0 P()WB 6 Sn()WB 6 Sn()BD(accessibility)ES()EA( )I(n.)ES( the state of
being )0 7 1 A()I(accessible)ES()7 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 7 Sn()WB 7 Sn()BD(accessible)ES()EA(
)I(adj.)ES( 1. \201of an )0 2 A()I(object)ES()EA(\202 capable of being
)I(referenced)ES(. 2. \201of )0 2 A()I(shared slots)ES()EA( or )0 2 A()I(local slots)ES()EA(
in an )0 2 A()I(instance)ES()EA( of a )0 2 A()I(class)ES()EA(\202 having
been defined by the )0 2 A()I(class)ES()EA( of the )0 2 A()I(instance)ES()EA( or
)I(inherited)ES( from a )0 2 A()I(superclass)ES()EA( of that )0 2 A()I(class)ES()EA(. 3. \201of a
)0 2 A()I(symbol)ES()EA( in
a )0 2 A()I(package)ES()EA(\202 capable of being
)I(referenced)ES( without a )0 2 A()I(package prefix)ES()EA( when that
)0 2 A()I(package)ES()EA(
is current, regardless of whether the )0 2 A()I(symbol)ES()EA( is )0 2 A()I(present)ES()EA( in that )0 2 A()I(package)ES()EA( or is
)I(inherited)ES(.)EP(
)0 P()WB 8 Sn()WB 8 Sn()BD(accessor)ES()EA( )I(n.)ES(
an )0 2 A()I(operator)ES()EA( that performs an
)0 5 1 A()I(access)ES()5 0 TN TL()Ec /AF f D(. See )0 2 A()I(reader)ES()EA( and
)0 2 A()I(writer)ES()EA(.)EP(
)0 P()WB 9 Sn()WB 9 Sn()BD(active)ES()EA( )I(adj.)ES( 1.
\201of a )0 2 A()I(handler)ES()EA(, a )0 2 A()I(restart)ES()EA(, or a )0 2 A()I(catch tag)ES()EA(\202
having been )I(established)ES( but not yet )I(disestablished)ES(.
2. \201of an )0 2 A()I(element)ES()EA( of an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 having an index that is greater
than or equal to zero, but less than the )0 2 A()I(fill pointer)ES()EA( \201if any\202. For
an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D( that has no
)0 2 A()I(fill
pointer)ES()EA(, all )0 2 A()I(elements)ES()EA( are considered )0 9 1 A()I(active)ES()9 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 10 Sn()WB 10 Sn()BD(actual adjustability)ES()EA( )I(n.)ES(
\201of an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 a
)0 2 A()I(generalized boolean)ES()EA(
that is associated with the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(, representing whether the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D( is )0 15 1 A()I(actually adjustable)ES()15 0 TN TL()Ec /AF f D(. See
also )0 2 A()I(expressed
adjustability)ES()EA( and )0 2 A()BD(adjustable-array-p)ES()EA(.)EP(
)0 P()WB 11 Sn()WB 11 Sn()BD(actual
argument)ES()EA( )I(n.)ES( )I(Trad.)ES( an )0 30 1 A()I(argument)ES()30 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 12 Sn()WB 12 Sn()BD(actual array element type)ES()EA(
)I(n.)ES( \201of an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 the )0 2 A()I(type)ES()EA( for which the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D( is actually
specialized, which is the )0 2 A()I(upgraded array
element type)ES()EA( of the )0 2 A()I(expressed array
element type)ES()EA( of the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(array-element-type)ES()EA(.)EP(
)0 P()WB 13 Sn()WB 13 Sn()BD(actual complex part type)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(complex)ES()EA(\202 the )0 2 A()I(type)ES()EA( in which the real and
imaginary parts of the )0 2 A()I(complex)ES()EA( are actually represented,
which is the )0 2 A()I(upgraded complex part
type)ES()EA( of the )0 2 A()I(expressed complex
part type)ES()EA( of the )0 2 A()I(complex)ES()EA(.)EP(
)0 P()WB 14 Sn()WB 14 Sn()BD(actual
parameter)ES()EA( )I(n.)ES( )I(Trad.)ES( an )0 30 1 A()I(argument)ES()30 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 15 Sn()WB 15 Sn()BD(actually adjustable)ES()EA( )I(adj.)ES(
\201of an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 such
that )0 2 A()BD(adjust-array)ES()EA( can adjust its
characteristics by direct modification. A )0 2 A()I(conforming program)ES()EA( may
depend on an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(
being )0 15 1 A()I(actually
adjustable)ES()15 0 TN TL()Ec /AF f D( only if either that )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D( is known to have been )0 2 A()I(expressly
adjustable)ES()EA( or if that )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D( has been explicitly tested by )0 2 A()BD(adjustable-array-p)ES()EA(.)EP(
)0 P()WB 16 Sn()WB 16 Sn()BD(adjustability)ES()EA( )I(n.)ES( \201of an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 1. )0 2 A()I(expressed
adjustability)ES()EA(. 2. )0 10 1 A()I(actual adjustability)ES()10 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 17 Sn()WB 17 Sn()BD(adjustable)ES()EA(
)I(adj.)ES( \201of an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 1. )0 2 A()I(expressly
adjustable)ES()EA(. 2. )0 15 1 A()I(actually adjustable)ES()15 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 18 Sn()WB 18 Sn()BD(after method)ES()EA(
)I(n.)ES( a )0 2 A()I(method)ES()EA( having the )0 2 A()I(qualifier)ES()EA(
)TT(:after)ES(.)EP(
)0 P()WB 19 Sn()WB 19 Sn()BD(alist)ES()EA( ['ay,list],
)I(n.)ES( an )0 38 1 A()I(association list)ES()38 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 20 Sn()WB 20 Sn()BD(alphabetic)ES()EA(
)I(n.)ES(, )I(adj.)ES( 1. )I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 being one of
the )0 2 A()I(standard characters)ES()EA(
)TT(A)ES( through )TT(Z)ES( or )TT(a)ES( through )TT(z)ES(, or
being any )0 2 A()I(implementation-defined)ES()EA(
character that has )0 2 A()I(case)ES()EA(, or being some other )0 2 A()I(graphic)ES()EA( )0 2 A()I(character)ES()EA(
defined by the )0 2 A()I(implementation)ES()EA( to be
)0 20 1 A()I(alphabetic)ES()20 0 TN TL()Ec /AF f D([1]. 2.
a. )I(n.)ES( one of several possible )0 2 A()I(constituent traits)ES()EA( of a
)0 2 A()I(character)ES()EA(. For details, see
)0 2 A(Section 2.1.4.1 \201Constituent
Characters\202)EA( and )0 2 A(Section 2.2
\201Reader Algorithm\202)EA(. b. )I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 being a )0 2 A()I(character)ES()EA(
that has )0 2 A()I(syntax type)ES()EA( )0 2 A()I(constituent)ES()EA(
in the )0 2 A()I(current readtable)ES()EA( and
that has the )0 2 A()I(constituent trait)ES()EA(
)0 20 1 A()I(alphabetic)ES()20 0 TN TL()Ec /AF f D([2a].
See )0 2 A(Figure 2-8)EA(.)EP(
)0 P()WB 21 Sn()WB 21 Sn()BD(alphanumeric)ES()EA(
)I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 being either an
)0 20 1 A()I(alphabetic)ES()20 0 TN TL()Ec /AF f D([1]
)0 2 A()I(character)ES()EA( or a )0 2 A()I(numeric)ES()EA(
character.)EP(
)0 P()WB 22 Sn()WB 22 Sn()BD(ampersand)ES()EA(
)I(n.)ES( the )0 2 A()I(standard character)ES()EA(
that is called "ampersand" \201)TT(&)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 23 Sn()WB 23 Sn()BD(anonymous)ES()EA(
)I(adj.)ES( 1. \201of a )0 2 A()I(class)ES()EA( or )0 2 A()I(function)ES()EA(\202 having no )0 2 A()I(name)ES()EA( 2. \201of a
)0 2 A()I(restart)ES()EA(\202
having a )0 2 A()I(name)ES()EA( of )0 2 A()BD(nil)ES()EA(.)EP(
)0 P()WB 24 Sn()WB 24 Sn()BD(apparently uninterned)ES()EA(
)I(adj.)ES( having a )0 2 A()I(home package)ES()EA( of )0 2 A()BD(nil)ES()EA(. \201An )0 24 1 A()I(apparently
uninterned)ES()24 0 TN TL()Ec /AF f D( )0 2 A()I(symbol)ES()EA( might or might not be an
)0 2 A()I(uninterned)ES()EA( )0 2 A()I(symbol)ES()EA(. )0 2 A()I(Uninterned)ES()EA( )0 2 A()I(symbols)ES()EA( have a
)0 2 A()I(home
package)ES()EA( of )0 2 A()BD(nil)ES()EA(, but )0 2 A()I(symbols)ES()EA( which have been )0 2 A()I(uninterned)ES()EA(
from their )0 2 A()I(home package)ES()EA( also have a
)0 2 A()I(home
package)ES()EA( of )0 2 A()BD(nil)ES()EA(, even though they might still be
)0 2 A()I(interned)ES()EA( in some other )0 2 A()I(package)ES()EA(.\202)EP(
)0 P()WB 25 Sn()WB 25 Sn()BD(applicable)ES()EA(
)I(adj.)ES( 1. \201of a )0 2 A()I(handler)ES()EA(\202 being an )0 26 1 A()I(applicable
handler)ES()26 0 TN TL()Ec /AF f D(. 2. \201of a )0 2 A()I(method)ES()EA(\202 being an )0 27 1 A()I(applicable
method)ES()27 0 TN TL()Ec /AF f D(. 3. \201of a )0 2 A()I(restart)ES()EA(\202 being an )0 28 1 A()I(applicable
restart)ES()28 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 26 Sn()WB 26 Sn()BD(applicable handler)ES()EA( )I(n.)ES( \201for a
)0 2 A()I(condition)ES()EA( being
)I(signaled)ES(\202 an )0 9 1 A()I(active)ES()9 0 TN TL()Ec /AF f D( )0 2 A()I(handler)ES()EA( for which the associated
type contains the )0 2 A()I(condition)ES()EA(.)EP(
)0 P()WB 27 Sn()WB 27 Sn()BD(applicable
method)ES()EA( )I(n.)ES( \201of a )0 2 A()I(generic function)ES()EA( called
with )0 30 1 A()I(arguments)ES()30 0 TN TL()Ec /AF f D(\202 a
)0 2 A()I(method)ES()EA( of
the )0 2 A()I(generic function)ES()EA( for
which the )0 30 1 A()I(arguments)ES()30 0 TN TL()Ec /AF f D(
satisfy the )0 2 A()I(parameter
specializers)ES()EA( of that )0 2 A()I(method)ES()EA(. See )0 2 A(Section 7.6.6.1.1 \201Selecting the Applicable
Methods\202)EA(.)EP(
)0 P()WB 28 Sn()WB 28 Sn()BD(applicable restart)ES()EA( )I(n.)ES( 1.
\201for a )0 2 A()I(condition)ES()EA(\202 an )0 9 1 A()I(active)ES()9 0 TN TL()Ec /AF f D( )0 2 A()I(handler)ES()EA( for which the
associated test returns )0 2 A()I(true)ES()EA( when given the )0 2 A()I(condition)ES()EA( as
an argument. 2. \201for no particular )0 2 A()I(condition)ES()EA(\202 an )0 9 1 A()I(active)ES()9 0 TN TL()Ec /AF f D( )0 2 A()I(handler)ES()EA( for which the
associated test returns )0 2 A()I(true)ES()EA( when given )0 2 A()BD(nil)ES()EA( as an argument.)EP(
)0 P()WB 29 Sn()WB 29 Sn()BD(apply)ES()EA( )I(v.t.)ES( \201a
)0 2 A()I(function)ES()EA( to a )0 2 A()I(list)ES()EA(\202 to )0 2 A()I(call)ES()EA( the )0 2 A()I(function)ES()EA( with
arguments that are the )0 2 A()I(elements)ES()EA( of the )0 2 A()I(list)ES()EA(. "Applying
the function )0 2 A()BD(+)ES()EA( to
a list of integers returns the sum of the elements of that
list.")EP(
)0 P()WB 30 Sn()WB 30 Sn()BD(argument)ES()EA( )I(n.)ES(
1. \201of a )0 2 A()I(function)ES()EA(\202 an )0 2 A()I(object)ES()EA( which is offered as
data to the )0 2 A()I(function)ES()EA( when it is
)I(called)ES(. 2. \201of a )0 2 A()I(format control)ES()EA(\202 a )0 2 A()I(format
argument)ES()EA(.)EP(
)0 P()WB 31 Sn()WB 31 Sn()BD(argument evaluation order)ES()EA(
)I(n.)ES( the order in which )0 30 1 A()I(arguments)ES()30 0 TN TL()Ec /AF f D( are evaluated in a function call.
"The argument evaluation order for Common Lisp is left to right."
See )0 2 A(Section 3.1
\201Evaluation\202)EA(.)EP(
)0 P()WB 32 Sn()WB 32 Sn()BD(argument precedence order)ES()EA(
)I(n.)ES( the order in which the )0 30 1 A()I(arguments)ES()30 0 TN TL()Ec /AF f D( to a )0 2 A()I(generic function)ES()EA( are
considered when sorting the )0 27 1 A()I(applicable methods)ES()27 0 TN TL()Ec /AF f D( into precedence
order.)EP(
)0 P()WB 33 Sn()WB 33 Sn()BD(around
method)ES()EA( )I(n.)ES( a )0 2 A()I(method)ES()EA( having the )0 2 A()I(qualifier)ES()EA(
)TT(:around)ES(.)EP(
)0 P()WB 34 Sn()WB 34 Sn()BD(array)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(array)ES()EA(,
which serves as a container for other )0 2 A()I(objects)ES()EA( arranged in a Cartesian
coordinate system.)EP(
)0 P()WB 35 Sn()WB 35 Sn()BD(array
element type)ES()EA( )I(n.)ES( \201of an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(\202 1. a )0 2 A()I(type)ES()EA( associated with the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(, and of which all
)0 2 A()I(elements)ES()EA(
of the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D( are
constrained to be members. 2. the )0 12 1 A()I(actual array element type)ES()12 0 TN TL()Ec /AF f D(
of the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(. 3. the
)0 2 A()I(expressed array
element type)ES()EA( of the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 36 Sn()WB 36 Sn()BD(array total
size)ES()EA( )I(n.)ES( the total number of )0 2 A()I(elements)ES()EA( in an )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(, computed by taking the
product of the )0 2 A()I(dimensions)ES()EA( of the )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(. \201The size of a
zero-dimensional )0 34 1 A()I(array)ES()34 0 TN TL()Ec /AF f D(
is therefore one.\202)EP(
)0 P()WB 37 Sn()WB 37 Sn()BD(assign)ES()EA( )I(v.t.)ES( \201a
)0 2 A()I(variable)ES()EA(\202 to change the )0 2 A()I(value)ES()EA( of the
)0 2 A()I(variable)ES()EA( in a )0 2 A()I(binding)ES()EA( that
has already been )I(established)ES(. See the )0 2 A()I(special operator)ES()EA(
)0 2 A()BD(setq)ES()EA(.)EP(
)0 P()WB 38 Sn()WB 38 Sn()BD(association
list)ES()EA( )I(n.)ES( a )0 2 A()I(list)ES()EA( of )0 2 A()I(conses)ES()EA( representing an association
of )0 2 A()I(keys)ES()EA( with
)0 2 A()I(values)ES()EA(,
where the )0 2 A()I(car)ES()EA( of each )0 2 A()I(cons)ES()EA( is the )0 2 A()I(key)ES()EA( and the )0 2 A()I(cdr)ES()EA( is the )0 2 A()I(value)ES()EA( associated with that
)0 2 A()I(key)ES()EA(.)EP(
)0 P()WB 39 Sn()WB 39 Sn()BD(asterisk)ES()EA( )I(n.)ES(
the )0 2 A()I(standard character)ES()EA(
that is variously called "asterisk" or "star" \201)TT(*)ES(\202. See
)0 2 A(Figure
2-5)EA(.)EP(
)0 P()WB 40 Sn()WB 40 Sn()BD(at-sign)ES()EA( )I(n.)ES( the
)0 2 A()I(standard character)ES()EA(
that is variously called "commercial at" or "at sign" \201)TT(@)ES(\202.
See )0 2 A(Figure
2-5)EA(.)EP(
)0 P()WB 41 Sn()WB 41 Sn()BD(atom)ES()EA( )I(n.)ES( any )0 2 A()I(object)ES()EA( that is
not a )0 2 A()I(cons)ES()EA(.
"A vector is an atom.")EP(
)0 P()WB 42 Sn()WB 42 Sn()BD(atomic)ES()EA( )I(adj.)ES( being
an )0 41 1 A()I(atom)ES()41 0 TN TL()Ec /AF f D(. "The number 3,
the symbol )TT(foo)ES(, and )0 2 A()BD(nil)ES()EA( are atomic.")EP(
)0 P()WB 43 Sn()WB 43 Sn()BD(atomic type specifier)ES()EA( )I(n.)ES(
a )0 2 A()I(type
specifier)ES()EA( that is )0 42 1 A()I(atomic)ES()42 0 TN TL()Ec /AF f D(. For every )0 43 1 A()I(atomic type specifier)ES()43 0 TN TL()Ec /AF f D(,
)I(x)ES(, there is an equivalent )0 2 A()I(compound type
specifier)ES()EA( with no arguments supplied,
)TT(\201)ES()I(x)ES()TT(\202)ES(.)EP(
)0 P()WB 44 Sn()WB 44 Sn()BD(attribute)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(character)ES()EA(\202 a program-visible
aspect of the )0 2 A()I(character)ES()EA(. The only )0 2 A()I(standardized)ES()EA( )0 44 1 A()I(attribute)ES()44 0 TN TL()Ec /AF f D( of a )0 2 A()I(character)ES()EA( is
its )0 2 A()I(code)ES()EA([2], but )0 2 A()I(implementations)ES()EA( are
permitted to have additional )0 2 A()I(implementation-defined)ES()EA(
)0 44 1 A()I(attributes)ES()44 0 TN TL()Ec /AF f D(. See
)0 2 A(Section 13.1.3 \201Character
Attributes\202)EA(. "An implementation that support fonts might make
font information an attribute of a character, while others might
represent font information separately from characters.")EP(
)0 P()WB 45 Sn()WB 45 Sn()BD(aux variable)ES()EA(
)I(n.)ES( a )0 2 A()I(variable)ES()EA( that occurs in the part
of a )0 2 A()I(lambda
list)ES()EA( that was introduced by )TT(&aux)ES(. Unlike all
other )0 2 A()I(variables)ES()EA( introduced by a
)I(lambda-list)ES(, )0 45 1 A()I(aux
variables)ES()45 0 TN TL()Ec /AF f D( are not )0 2 A()I(parameters)ES()EA(.)EP(
)0 P()WB 46 Sn()WB 46 Sn()BD(auxiliary
method)ES()EA( )I(n.)ES( a member of one of two sets of )0 2 A()I(methods)ES()EA( \201the set
of )0 2 A()I(primary methods)ES()EA( is the
other\202 that form an exhaustive partition of the set of )0 2 A()I(methods)ES()EA( on the
)0 2 A()I(method)ES()EA('s
)0 2 A()I(generic
function)ES()EA(. How these sets are determined is dependent on the
)0 2 A()I(method combination)ES()EA(
type; see )0 2 A(Section 7.6.2
\201Introduction to Methods\202)EA(.)EP(

)BD(B)ES(
)0 P()WB 47 Sn()WB 47 Sn()BD(backquote)ES()EA(
)I(n.)ES( the )0 2 A()I(standard character)ES()EA(
that is variously called "grave accent" or "backquote"
\201)TT(`)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 48 Sn()WB 48 Sn()BD(backslash)ES()EA(
)I(n.)ES( the )0 2 A()I(standard character)ES()EA(
that is variously called "reverse solidus" or "backslash"
\201)TT(\200)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 49 Sn()WB 49 Sn()BD(base
character)ES()EA( )I(n.)ES( a )0 2 A()I(character)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(base-char)ES()EA(.)EP(
)0 P()WB 50 Sn()WB 50 Sn()BD(base string)ES()EA(
)I(n.)ES( a )0 2 A()I(string)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(base-string)ES()EA(.)EP(
)0 P()WB 51 Sn()WB 51 Sn()BD(before
method)ES()EA( )I(n.)ES( a )0 2 A()I(method)ES()EA( having the )0 2 A()I(qualifier)ES()EA(
)TT(:before)ES(.)EP(
)0 P()WB 52 Sn()WB 52 Sn()BD(bidirectional)ES()EA( )I(adj.)ES( \201of a )0 2 A()I(stream)ES()EA(\202 being
both an )0 2 A()I(input)ES()EA( )0 2 A()I(stream)ES()EA( and an )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA(.)EP(
)0 P()WB 53 Sn()WB 53 Sn()BD(binary)ES()EA( )I(adj.)ES( 1.
\201of a )0 2 A()I(stream)ES()EA(\202 being a )0 2 A()I(stream)ES()EA( that has
an )0 2 A()I(element
type)ES()EA( that is a )0 2 A()I(subtype)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(integer)ES()EA(. The most fundamental
operation on a )0 53 1 A()I(binary)ES()53 0 TN TL()Ec /AF f D(
)0 2 A()I(input)ES()EA(
)0 2 A()I(stream)ES()EA( is
)0 2 A()BD(read-byte)ES()EA( and on a )0 53 1 A()I(binary)ES()53 0 TN TL()Ec /AF f D( )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA( is )0 2 A()BD(write-byte)ES()EA(. See )0 2 A()I(character)ES()EA(. 2.
\201of a )0 2 A()I(file)ES()EA(\202
having been created by opening a )0 53 1 A()I(binary)ES()53 0 TN TL()Ec /AF f D( )0 2 A()I(stream)ES()EA(. \201It is )0 2 A()I(implementation-dependent)ES()EA(
whether this is an detectable aspect of the )0 2 A()I(file)ES()EA(, or whether any given
)0 2 A()I(character)ES()EA( )0 2 A()I(file)ES()EA( can be treated as a
)0 53 1 A()I(binary)ES()53 0 TN TL()Ec /AF f D( )0 2 A()I(file)ES()EA(.\202)EP(
)0 P()WB 54 Sn()WB 54 Sn()BD(bind)ES()EA( )I(v.t.)ES( \201a )0 2 A()I(variable)ES()EA(\202 to
establish a )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D(
for the )0 2 A()I(variable)ES()EA(.)EP(
)0 P()WB 55 Sn()WB 55 Sn()BD(binding)ES()EA( )I(n.)ES( an
association between a )0 2 A()I(name)ES()EA( and that which the )0 2 A()I(name)ES()EA( denotes. "A
lexical binding is a lexical association between a name and its
value." When the term )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D( is qualified by the name of a )0 2 A()I(namespace)ES()EA(,
such as "variable" or "function," it restricts the binding to the
indicated namespace, as in: ")0 2 A()BD(let)ES()EA( establishes variable bindings." or
")0 2 A()BD(let)ES()EA(
establishes bindings of variables.")EP(
)0 P()WB 56 Sn()WB 56 Sn()BD(bit)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(bit)ES()EA(; that is,
the )0 2 A()I(integer)ES()EA( )TT(0)ES( or the )0 2 A()I(integer)ES()EA(
)TT(1)ES(.)EP(
)0 P()WB 57 Sn()WB 57 Sn()BD(bit array)ES()EA(
)I(n.)ES( a specialized )0 2 A()I(array)ES()EA( that is of )0 2 A()I(type)ES()EA( )TT(\201array
bit\202)ES(, and whose elements are of )0 2 A()I(type)ES()EA( )0 2 A()BD(bit)ES()EA(.)EP(
)0 P()WB 58 Sn()WB 58 Sn()BD(bit vector)ES()EA(
)I(n.)ES( a specialized )0 2 A()I(vector)ES()EA( that is of )0 2 A()I(type)ES()EA( )0 2 A()BD(bit-vector)ES()EA(,
and whose elements are of )0 2 A()I(type)ES()EA( )0 2 A()BD(bit)ES()EA(.)EP(
)0 P()WB 59 Sn()WB 59 Sn()BD(bit-wise logical
operation specifier)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( which names one of the
sixteen possible bit-wise logical operations that can be performed
by the )0 2 A()BD(boole)ES()EA( function, and which is the
)0 2 A()I(value)ES()EA( of
exactly one of the )0 2 A()I(constant variables)ES()EA(
)0 2 A()BD(boole-clr)ES()EA(, )0 2 A()BD(boole-set)ES()EA(, )0 2 A()BD(boole-1)ES()EA(, )0 2 A()BD(boole-2)ES()EA(, )0 2 A()BD(boole-c1)ES()EA(,
)0 2 A()BD(boole-c2)ES()EA(, )0 2 A()BD(boole-and)ES()EA(, )0 2 A()BD(boole-ior)ES()EA(,
)0 2 A()BD(boole-xor)ES()EA(, )0 2 A()BD(boole-eqv)ES()EA(, )0 2 A()BD(boole-nand)ES()EA(,
)0 2 A()BD(boole-nor)ES()EA(, )0 2 A()BD(boole-andc1)ES()EA(, )0 2 A()BD(boole-andc2)ES()EA(,
)0 2 A()BD(boole-orc1)ES()EA(, or )0 2 A()BD(boole-orc2)ES()EA(.)EP(
)0 P()WB 60 Sn()WB 60 Sn()BD(block)ES()EA( )I(n.)ES( a named
lexical )0 2 A()I(exit
point)ES()EA(, )I(established)ES( explicitly by )0 2 A()BD(block)ES()EA( or implicitly by )0 2 A()I(operators)ES()EA( such
as )0 2 A()BD(loop)ES()EA(,
)0 2 A()BD(do)ES()EA( and )0 2 A()BD(prog)ES()EA(, to which
control and values may be transfered by using a )0 2 A()BD(return-from)ES()EA( )0 2 A()I(form)ES()EA( with the name
of the )0 60 1 A()I(block)ES()60 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 61 Sn()WB 61 Sn()BD(block tag)ES()EA(
)I(n.)ES( the )0 2 A()I(symbol)ES()EA( that, within the )0 2 A()I(lexical
scope)ES()EA( of a )0 2 A()BD(block)ES()EA( )0 2 A()I(form)ES()EA(, names the )0 60 1 A()I(block)ES()60 0 TN TL()Ec /AF f D( )I(established)ES( by that )0 2 A()BD(block)ES()EA( )0 2 A()I(form)ES()EA(. See )0 2 A()BD(return)ES()EA( or
)0 2 A()BD(return-from)ES()EA(.)EP(
)0 P()WB 62 Sn()WB 62 Sn()BD(boa lambda
list)ES()EA( )I(n.)ES( a )0 2 A()I(lambda list)ES()EA( that is
syntactically like an )0 2 A()I(ordinary lambda
list)ES()EA(, but that is processed in ")BD(b)ES(y )BD(o)ES(rder of
)BD(a)ES(rgument" style. See )0 2 A(Section
3.4.6 \201Boa Lambda Lists\202)EA(.)EP(
)0 P()WB 63 Sn()WB 63 Sn()BD(body
parameter)ES()EA( )I(n.)ES( a )0 2 A()I(parameter)ES()EA( available in certain
)0 2 A()I(lambda
lists)ES()EA( which from the point of view of )0 2 A()I(conforming
programs)ES()EA( is like a )0 2 A()I(rest parameter)ES()EA( in every
way except that it is introduced by )TT(&body)ES( instead of
)TT(&rest)ES(. \201)0 2 A()I(Implementations)ES()EA( are
permitted to provide extensions which distinguish )0 63 1 A()I(body parameters)ES()63 0 TN TL()Ec /AF f D( and
)0 2 A()I(rest
parameters)ES()EA(---e.g., the )0 2 A()I(forms)ES()EA( for )0 2 A()I(operators)ES()EA( which were defined
using a )0 63 1 A()I(body
parameter)ES()63 0 TN TL()Ec /AF f D( might be pretty printed slightly differently than
)0 2 A()I(forms)ES()EA( for
)0 2 A()I(operators)ES()EA( which were defined
using )0 2 A()I(rest parameters)ES()EA(.\202)EP(
)0 P()WB 64 Sn()WB 64 Sn()BD(boolean)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(boolean)ES()EA(;
that is, one of the following )0 2 A()I(objects)ES()EA(: the symbol )0 2 A()BD(t)ES()EA( \201representing )0 2 A()I(true)ES()EA(\202, or the
symbol )0 2 A()BD(nil)ES()EA(
\201representing )0 2 A()I(false)ES()EA(\202. See )0 2 A()I(generalized
boolean)ES()EA(.)EP(
)0 P()WB 65 Sn()WB 65 Sn()BD(boolean
equivalent)ES()EA( )I(n.)ES( \201of an )0 2 A()I(object)ES()EA( O1\202 any )0 2 A()I(object)ES()EA( O2 that has the same
truth value as O1 when both O1 and O2 are viewed as )0 2 A()I(generalized
booleans)ES()EA(.)EP(
)0 P()WB 66 Sn()WB 66 Sn()BD(bound)ES()EA( )I(adj.)ES(,
)I(v.t.)ES( 1. )I(adj.)ES( having an associated denotation in a
)0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D(. "The
variables named by a )0 2 A()BD(let)ES()EA( are bound within its body." See
)0 2 A()I(unbound)ES()EA(.
2. )I(adj.)ES( having a local )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D( which )0 2 A()I(shadows)ES()EA([2] another. "The variable
)0 2 A()BD(*print-escape*)ES()EA( is bound
while in the )0 2 A()BD(princ)ES()EA( function." 3. )I(v.t.)ES( the
past tense of )0 54 1 A()I(bind)ES()54 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 67 Sn()WB 67 Sn()BD(bound
declaration)ES()EA( )I(n.)ES( a )0 2 A()I(declaration)ES()EA( that refers to or
is associated with a )0 2 A()I(variable)ES()EA( or )0 2 A()I(function)ES()EA( and that appears
within the )0 2 A()I(special form)ES()EA( that )0 2 A()I(establishes)ES()EA(
the )0 2 A()I(variable)ES()EA( or )0 2 A()I(function)ES()EA(, but before the
body of that )0 2 A()I(special form)ES()EA( \201specifically,
at the head of that )0 2 A()I(form)ES()EA('s body\202. \201If a )0 67 1 A()I(bound declaration)ES()67 0 TN TL()Ec /AF f D(
refers to a )0 2 A()I(function)ES()EA( )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D( or a )0 2 A()I(lexical variable)ES()EA( )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D(, the )0 2 A()I(scope)ES()EA( of the
)0 2 A()I(declaration)ES()EA( is exactly the
)0 2 A()I(scope)ES()EA( of
that )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D(. If the
)0 2 A()I(declaration)ES()EA( refers to a
)0 2 A()I(dynamic
variable)ES()EA( )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D(, the )0 2 A()I(scope)ES()EA( of the )0 2 A()I(declaration)ES()EA( is what the
)0 2 A()I(scope)ES()EA( of
the )0 55 1 A()I(binding)ES()55 0 TN TL()Ec /AF f D( would
have been if it were lexical rather than dynamic.\202)EP(
)0 P()WB 68 Sn()WB 68 Sn()BD(bounded)ES()EA( )I(adj.)ES(
\201of a )0 2 A()I(sequence)ES()EA( S, by an ordered pair
of )I(bounding indices)ES( istart and iend\202 restricted to a
subrange of the )0 2 A()I(elements)ES()EA( of S that includes each
)0 2 A()I(element)ES()EA(
beginning with \201and including\202 the one indexed by istart and
continuing up to \201but not including\202 the one indexed by iend.)EP(
)0 P()WB 69 Sn()WB 69 Sn()BD(bounding
index)ES()EA( )I(n.)ES( \201of a )0 2 A()I(sequence)ES()EA( with )0 2 A()I(length)ES()EA( n\202 either
of a conceptual pair of )0 2 A()I(integers)ES()EA(, istart and iend,
respectively called the "lower bounding index" and "upper bounding
index", such that 0 <=istart <=iend <=n, and which
therefore delimit a subrange of the )0 2 A()I(sequence)ES()EA( )0 68 1 A()I(bounded)ES()68 0 TN TL()Ec /AF f D( by istart and iend.)EP(
)0 P()WB 70 Sn()WB 70 Sn()BD(bounding index designator)ES()EA(
\201for a )0 2 A()I(sequence)ES()EA(\202 one of two )0 2 A()I(objects)ES()EA( that,
taken together as an ordered pair, behave as a )0 2 A()I(designator)ES()EA( for
)I(bounding indices)ES( of the )0 2 A()I(sequence)ES()EA(; that is, they denote
)I(bounding indices)ES( of the )0 2 A()I(sequence)ES()EA(, and are either: an
)0 2 A()I(integer)ES()EA(
\201denoting itself\202 and )0 2 A()BD(nil)ES()EA( \201denoting the )0 2 A()I(length)ES()EA( of the )0 2 A()I(sequence)ES()EA(\202, or
two )0 2 A()I(integers)ES()EA( \201each denoting
themselves\202.)EP(
)0 P()WB 71 Sn()WB 71 Sn()BD(break loop)ES()EA(
)I(n.)ES( A variant of the normal )0 2 A()I(Lisp read-eval-print
loop)ES()EA( that is recursively entered, usually because the
ongoing )0 2 A()I(evaluation)ES()EA( of some other
)0 2 A()I(form)ES()EA( has
been suspended for the purpose of debugging. Often, a )0 71 1 A()I(break loop)ES()71 0 TN TL()Ec /AF f D( provides the
ability to exit in such a way as to continue the suspended
computation. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(break)ES()EA(.)EP(
)0 P()WB 72 Sn()WB 72 Sn()BD(broadcast
stream)ES()EA( )I(n.)ES( an )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(broadcast-stream)ES()EA(.)EP(
)0 P()WB 73 Sn()WB 73 Sn()BD(built-in
class)ES()EA( )I(n.)ES( a )0 2 A()I(class)ES()EA( that is a )0 2 A()I(generalized
instance)ES()EA( of )0 2 A()I(class)ES()EA( )0 2 A()BD(built-in-class)ES()EA(.)EP(
)0 P()WB 74 Sn()WB 74 Sn()BD(built-in
type)ES()EA( )I(n.)ES( one of the )0 2 A()I(types)ES()EA( in )0 2 A(Figure 4-2)EA(.)EP(
)0 P()WB 75 Sn()WB 75 Sn()BD(byte)ES()EA( )I(n.)ES( 1. adjacent
bits within an )0 2 A()I(integer)ES()EA(. \201The specific number of
bits can vary from point to point in the program; see the )0 2 A()I(function)ES()EA(
)0 2 A()BD(byte)ES()EA(.\202 2. an
integer in a specified range. \201The specific range can vary from
point to point in the program; see the )0 2 A()I(functions)ES()EA( )0 2 A()BD(open)ES()EA( and )0 2 A()BD(write-byte)ES()EA(.\202)EP(
)0 P()WB 76 Sn()WB 76 Sn()BD(byte
specifier)ES()EA( )I(n.)ES( An )0 2 A()I(object)ES()EA( of )0 2 A()I(implementation-dependent)ES()EA(
nature that is returned by the )0 2 A()I(function)ES()EA( )0 2 A()BD(byte)ES()EA( and that specifies the
range of bits in an )0 2 A()I(integer)ES()EA( to be used as a )0 75 1 A()I(byte)ES()75 0 TN TL()Ec /AF f D( by )0 2 A()I(functions)ES()EA( such as )0 2 A()BD(ldb)ES()EA(.)EP(

)BD(C)ES(
)0 P()WB 77 Sn()WB 77 Sn()BD(cadr)ES()EA( ['ka,duhr], )I(n.)ES(
\201of an )0 2 A()I(object)ES()EA(\202 the )0 80 1 A()I(car)ES()80 0 TN TL()Ec /AF f D( of the )0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D( of that )0 2 A()I(object)ES()EA(.)EP(
)0 P()WB 78 Sn()WB 78 Sn()BD(call)ES()EA( )I(v.t.)ES(, )I(n.)ES(
1. )I(v.t.)ES( \201a )0 2 A()I(function)ES()EA( with )0 2 A()I(arguments)ES()EA(\202 to
cause the )0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D(
represented by that )0 2 A()I(function)ES()EA( to be )I(executed)ES(
in an )0 2 A()I(environment)ES()EA( where )0 2 A()I(bindings)ES()EA( for
the )0 2 A()I(values)ES()EA(
of its )0 2 A()I(parameters)ES()EA( have been
)I(established)ES( based on the )0 2 A()I(arguments)ES()EA(. "Calling the function
)0 2 A()BD(+)ES()EA( with the
arguments )TT(5)ES( and )TT(1)ES( yields a value of )TT(6)ES(."
2. )I(n.)ES( a )0 2 A()I(situation)ES()EA( in which a )0 2 A()I(function)ES()EA( is
called.)EP(
)0 P()WB 79 Sn()WB 79 Sn()BD(captured initialization
form)ES()EA( )I(n.)ES( an )0 2 A()I(initialization form)ES()EA(
along with the )0 2 A()I(lexical environment)ES()EA(
in which the )0 2 A()I(form)ES()EA( that defined the )0 2 A()I(initialization form)ES()EA(
was )I(evaluated)ES(. "Each newly added shared slot is set to the
result of evaluating the captured initialization form for the slot
that was specified in the )0 2 A()BD(defclass)ES()EA( form for the new
class.")EP(
)0 P()WB 80 Sn()WB 80 Sn()BD(car)ES()EA( )I(n.)ES( 1. a. \201of a
)0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D(\202 the component of
a )0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D( corresponding to
the first )0 2 A()I(argument)ES()EA( to )0 2 A()BD(cons)ES()EA(; the other component is the
)0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D(. "The function
)0 2 A()BD(rplaca)ES()EA(
modifies the car of a cons." b. \201of a )0 2 A()I(list)ES()EA(\202 the first )0 2 A()I(element)ES()EA( of the )0 2 A()I(list)ES()EA(, or )0 2 A()BD(nil)ES()EA( if the )0 2 A()I(list)ES()EA( is the
)0 2 A()I(empty
list)ES()EA(. 2. the )0 2 A()I(object)ES()EA( that is held in the )0 80 1 A()I(car)ES()80 0 TN TL()Ec /AF f D([1]. "The function )0 2 A()BD(car)ES()EA( returns the car
of a cons.")EP(
)0 P()WB 81 Sn()WB 81 Sn()BD(case)ES()EA( )I(n.)ES( \201of a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D(\202 the property
of being either )0 2 A()I(uppercase)ES()EA( or )0 2 A()I(lowercase)ES()EA(.
Not all )0 88 1 A()I(characters)ES()88 0 TN TL()Ec /AF f D(
have )0 81 1 A()I(case)ES()81 0 TN TL()Ec /AF f D(. "The
characters )TT(#\200A)ES( and )TT(#\200a)ES( have case, but the
character )TT(#\200$)ES( has no case." See )0 2 A(Section 13.1.4.3 \201Characters With Case\202)EA( and the
)0 2 A()I(function)ES()EA( )0 2 A()BD(both-case-p)ES()EA(.)EP(
)0 P()WB 82 Sn()WB 82 Sn()BD(case sensitivity mode)ES()EA( )I(n.)ES(
one of the )0 2 A()I(symbols)ES()EA( )TT(:upcase)ES(,
)TT(:downcase)ES(, )TT(:preserve)ES(, or )TT(:invert)ES(.)EP(
)0 P()WB 83 Sn()WB 83 Sn()BD(catch)ES()EA( )I(n.)ES( an )0 2 A()I(exit point)ES()EA(
which is )I(established)ES( by a )0 2 A()BD(catch)ES()EA( )0 2 A()I(form)ES()EA( within the )0 2 A()I(dynamic scope)ES()EA( of its
body, which is named by a )0 84 1 A()I(catch tag)ES()84 0 TN TL()Ec /AF f D(, and to which control and )0 2 A()I(values)ES()EA( may be
)I(thrown)ES(.)EP(
)0 P()WB 84 Sn()WB 84 Sn()BD(catch tag)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( which names an )0 2 A()I(active)ES()EA( )0 83 1 A()I(catch)ES()83 0 TN TL()Ec /AF f D(. \201If more than one
)0 83 1 A()I(catch)ES()83 0 TN TL()Ec /AF f D( is active with
the same )0 84 1 A()I(catch
tag)ES()84 0 TN TL()Ec /AF f D(, it is only possible to )0 2 A()I(throw)ES()EA( to the innermost such )0 83 1 A()I(catch)ES()83 0 TN TL()Ec /AF f D( because the outer one
is )I(shadowed)ES([2].\202)EP(
)0 P()WB 85 Sn()WB 85 Sn()BD(cddr)ES()EA( ['kduh,duhr] or
['kuh,dduhr], )I(n.)ES( \201of an )0 2 A()I(object)ES()EA(\202 the )0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D( of the )0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D( of that )0 2 A()I(object)ES()EA(.)EP(
)0 P()WB 86 Sn()WB 86 Sn()BD(cdr)ES()EA( ['k,duhr], )I(n.)ES( 1. a.
\201of a )0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D(\202 the
component of a )0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D(
corresponding to the second )0 2 A()I(argument)ES()EA( to )0 2 A()BD(cons)ES()EA(; the other component is the
)0 80 1 A()I(car)ES()80 0 TN TL()Ec /AF f D(. "The function
)0 2 A()BD(rplacd)ES()EA(
modifies the cdr of a cons." b. \201of a )0 2 A()I(list)ES()EA( L1\202 either the )0 2 A()I(list)ES()EA( L2 that
contains the )0 2 A()I(elements)ES()EA( of L1 that follow after
the first, or else )0 2 A()BD(nil)ES()EA( if L1 is the )0 2 A()I(empty list)ES()EA(. 2. the
)0 2 A()I(object)ES()EA(
that is held in the )0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D([1]. "The function )0 2 A()BD(cdr)ES()EA( returns the cdr of a cons.")EP(
)0 P()WB 87 Sn()WB 87 Sn()BD(cell)ES()EA( )I(n.)ES( )I(Trad.)ES(
\201of an )0 2 A()I(object)ES()EA(\202 a conceptual )0 2 A()I(slot)ES()EA( of that
)0 2 A()I(object)ES()EA(.
The )0 2 A()I(dynamic variable)ES()EA( and
global )0 2 A()I(function)ES()EA( )0 2 A()I(bindings)ES()EA( of a )0 2 A()I(symbol)ES()EA( are
sometimes referred to as its )0 2 A()I(value cell)ES()EA( and )0 2 A()I(function
cell)ES()EA(, respectively.)EP(
)0 P()WB 88 Sn()WB 88 Sn()BD(character)ES()EA(
)I(n.)ES(, )I(adj.)ES( 1. )I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(character)ES()EA(; that is, an )0 2 A()I(object)ES()EA( that
represents a unitary token in an aggregate quantity of text; see
)0 2 A(Section 13.1 \201Character
Concepts\202)EA(. 2. )I(adj.)ES( a. \201of a )0 2 A()I(stream)ES()EA(\202 having an )0 2 A()I(element
type)ES()EA( that is a )0 2 A()I(subtype)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(character)ES()EA(. The most fundamental
operation on a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( )0 2 A()I(input)ES()EA( )0 2 A()I(stream)ES()EA( is )0 2 A()BD(read-char)ES()EA( and on a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA( is
)0 2 A()BD(write-char)ES()EA(. See )0 2 A()I(binary)ES()EA(. b. \201of a
)0 2 A()I(file)ES()EA(\202
having been created by opening a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( )0 2 A()I(stream)ES()EA(. \201It is )0 2 A()I(implementation-dependent)ES()EA(
whether this is an inspectable aspect of the )0 2 A()I(file)ES()EA(, or whether any given
)0 2 A()I(binary)ES()EA(
)0 2 A()I(file)ES()EA( can be
treated as a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( )0 2 A()I(file)ES()EA(.\202)EP(
)0 P()WB 89 Sn()WB 89 Sn()BD(character
code)ES()EA( )I(n.)ES( 1. one of possibly several )0 2 A()I(attributes)ES()EA( of
a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D(. 2. a
non-negative )0 2 A()I(integer)ES()EA( less than the )0 2 A()I(value)ES()EA( of )0 2 A()BD(char-code-limit)ES()EA( that is
suitable for use as a )0 89 1 A()I(character code)ES()89 0 TN TL()Ec /AF f D([1].)EP(
)0 P()WB 90 Sn()WB 90 Sn()BD(character designator)ES()EA( )I(n.)ES( a
)0 2 A()I(designator)ES()EA( for a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D(; that is, an
)0 2 A()I(object)ES()EA(
that denotes a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( and that is one of: a )0 2 A()I(designator)ES()EA(
for a )0 2 A()I(string)ES()EA( of )0 2 A()I(length)ES()EA( one \201denoting the
)0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( that is
its only )0 2 A()I(element)ES()EA(\202, or a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( \201denoting
itself\202.)EP(
)0 P()WB 91 Sn()WB 91 Sn()BD(circular)ES()EA( )I(adj.)ES(
1. \201of a )0 2 A()I(list)ES()EA(\202 a )0 92 1 A()I(circular list)ES()92 0 TN TL()Ec /AF f D(. 2. \201of an arbitrary
)0 2 A()I(object)ES()EA(\202
having a )I(component)ES(, )0 2 A()I(element)ES()EA(, )0 143 1 A()I(constituent)ES()143 0 TN TL()Ec /AF f D([2], or )0 2 A()I(subexpression)ES()EA( \201as
appropriate to the context\202 that is the )0 2 A()I(object)ES()EA( itself.)EP(
)0 P()WB 92 Sn()WB 92 Sn()BD(circular
list)ES()EA( )I(n.)ES( a chain of )0 138 1 A()I(conses)ES()138 0 TN TL()Ec /AF f D( that has no termination because some
)0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D( in the chain is
the )0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D( of a later
)0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 93 Sn()WB 93 Sn()BD(class)ES()EA( )I(n.)ES( 1. an
)0 2 A()I(object)ES()EA(
that uniquely determines the structure and behavior of a set of
other )0 2 A()I(objects)ES()EA( called its )0 2 A()I(direct
instances)ES()EA(, that contributes structure and behavior to a set
of other )0 2 A()I(objects)ES()EA( called its )0 2 A()I(indirect
instances)ES()EA(, and that acts as a )0 2 A()I(type specifier)ES()EA( for a set
of objects called its )0 2 A()I(generalized
instances)ES()EA(. "The class )0 2 A()BD(integer)ES()EA( is a subclass of the
class )0 2 A()BD(number)ES()EA(." \201Note that the phrase
"the )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D(
)TT(foo)ES(" is often substituted for the more precise phrase "the
)0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( named
)TT(foo)ES("---in both cases, a )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( )0 2 A()I(object)ES()EA( \201not a )0 2 A()I(symbol)ES()EA(\202 is denoted.\202 2. \201of
an )0 2 A()I(object)ES()EA(\202 the uniquely determined
)0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( of which the
)0 2 A()I(object)ES()EA( is
a )0 2 A()I(direct
instance)ES()EA(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(class-of)ES()EA(. "The class of the
object returned by )0 2 A()BD(gensym)ES()EA( is )0 2 A()BD(symbol)ES()EA(." \201Note that with this
usage a phrase such as "its )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( is )TT(foo)ES(" is often substituted for
the more precise phrase "its )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( is the )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( named )TT(foo)ES("---in both cases, a
)0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( )0 2 A()I(object)ES()EA( \201not a
)0 2 A()I(symbol)ES()EA(\202
is denoted.\202)EP(
)0 P()WB 94 Sn()WB 94 Sn()BD(class
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D(; that is, an )0 2 A()I(object)ES()EA( that
denotes a )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( and
that is one of: a )0 2 A()I(symbol)ES()EA( \201denoting the )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( named by that )0 2 A()I(symbol)ES()EA(; see the
)0 2 A()I(function)ES()EA( )0 2 A()BD(find-class)ES()EA(\202 or a )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( \201denoting itself\202.)EP(
)0 P()WB 95 Sn()WB 95 Sn()BD(class precedence list)ES()EA( )I(n.)ES(
a unique total ordering on a )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( and its )0 2 A()I(superclasses)ES()EA( that is
consistent with the )0 2 A()I(local precedence
orders)ES()EA( for the )0 93 1 A()I(class)ES()93 0 TN TL()Ec /AF f D( and its )0 2 A()I(superclasses)ES()EA(. For detailed
information, see )0 2 A(Section 4.3.5
\201Determining the Class Precedence List\202)EA(.)EP(
)0 P()WB 96 Sn()WB 96 Sn()BD(close)ES()EA( )I(v.t.)ES( \201a
)0 2 A()I(stream)ES()EA(\202
to terminate usage of the )0 2 A()I(stream)ES()EA( as a source or sink of
data, permitting the )0 2 A()I(implementation)ES()EA( to reclaim
its internal data structures, and to free any external resources
which might have been locked by the )0 2 A()I(stream)ES()EA( when it was opened.)EP(
)0 P()WB 97 Sn()WB 97 Sn()BD(closed)ES()EA( )I(adj.)ES( \201of a
)0 2 A()I(stream)ES()EA(\202
having been )0 97 1 A()I(closed)ES()97 0 TN TL()Ec /AF f D(
\201see )I(<I>}</I>)ES(close\202. Some \201but not all\202
operations that are valid on )0 2 A()I(open)ES()EA( )0 2 A()I(streams)ES()EA( are not valid on )0 97 1 A()I(closed)ES()97 0 TN TL()Ec /AF f D( )0 2 A()I(streams)ES()EA(. See )0 2 A(Section 21.1.1.1.2 \201Open and Closed
Streams\202)EA(.)EP(
)0 P()WB 98 Sn()WB 98 Sn()BD(closure)ES()EA( )I(n.)ES( a
)0 2 A()I(lexical
closure)ES()EA(.)EP(
)0 P()WB 99 Sn()WB 99 Sn()BD(coalesce)ES()EA( )I(v.t.)ES(
\201)0 2 A()I(literal)ES()EA(
)0 2 A()I(objects)ES()EA(
that are )0 2 A()I(similar)ES()EA(\202 to consolidate the
identity of those )0 2 A()I(objects)ES()EA(, such that they become the
)0 2 A()I(same)ES()EA(
)0 2 A()I(object)ES()EA(.
See )0 2 A(Section 3.2.1 \201Compiler
Terminology\202)EA(.)EP(
)0 P()WB 100 Sn()WB 100 Sn()BD(code)ES()EA( )I(n.)ES( 1.
)I(Trad.)ES( any representation of actions to be performed, whether
conceptual or as an actual )0 2 A()I(object)ES()EA(, such as )0 2 A()I(forms)ES()EA(, )0 2 A()I(lambda
expressions)ES()EA(, )0 2 A()I(objects)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()I(function)ES()EA(, text in a )0 2 A()I(source
file)ES()EA(, or instruction sequences in a )0 111 1 A()I(compiled file)ES()111 0 TN TL()Ec /AF f D(. This is a generic
term; the specific nature of the representation depends on its
context. 2. \201of a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D(\202 a )0 89 1 A()I(character code)ES()89 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 101 Sn()WB 101 Sn()BD(coerce)ES()EA( )I(v.t.)ES( \201an
)0 2 A()I(object)ES()EA( to
a )0 2 A()I(type)ES()EA(\202 to
produce an )0 2 A()I(object)ES()EA( from the given )0 2 A()I(object)ES()EA(, without
modifying that )0 2 A()I(object)ES()EA(, by following some set of
coercion rules that must be specifically stated for any context in
which this term is used. The resulting )0 2 A()I(object)ES()EA( is necessarily of the
indicated )0 2 A()I(type)ES()EA(, except when that type is a
)0 2 A()I(subtype)ES()EA(
of )0 2 A()I(type)ES()EA(
)0 2 A()BD(complex)ES()EA(;
in that case, if a )0 121 1 A()I(complex rational)ES()121 0 TN TL()Ec /AF f D( with an imaginary
part of zero would result, the result is a )0 2 A()I(rational)ES()EA( rather than a
)0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(---see
)0 2 A(Section 12.1.5.3 \201Rule of
Canonical Representation for Complex Rationals\202)EA(.)EP(
)0 P()WB 102 Sn()WB 102 Sn()BD(colon)ES()EA( )I(n.)ES( the
)0 2 A()I(standard character)ES()EA(
that is called "colon" \201)TT(:)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 103 Sn()WB 103 Sn()BD(comma)ES()EA( )I(n.)ES( the
)0 2 A()I(standard character)ES()EA(
that is called "comma" \201)TT(,)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 104 Sn()WB 104 Sn()BD(compilation)ES()EA(
)I(n.)ES( the process of )I(compiling)ES( )0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D( by the )0 113 1 A()I(compiler)ES()113 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 105 Sn()WB 105 Sn()BD(compilation environment)ES()EA(
)I(n.)ES( 1. An )0 2 A()I(environment)ES()EA( that represents
information known by the )0 113 1 A()I(compiler)ES()113 0 TN TL()Ec /AF f D( about a )0 2 A()I(form)ES()EA( that is being )I(compiled)ES(.
See )0 2 A(Section 3.2.1 \201Compiler
Terminology\202)EA(. 2. An )0 2 A()I(object)ES()EA( that represents the )0 105 1 A()I(compilation
environment)ES()105 0 TN TL()Ec /AF f D([1] and that is used as a second argument to a
)0 2 A()I(macro
function)ES()EA( \201which supplies a )0 2 A()I(value)ES()EA( for any
)TT(&environment)ES( )0 2 A()I(parameter)ES()EA( in the )0 2 A()I(macro
function)ES()EA('s definition\202.)EP(
)0 P()WB 106 Sn()WB 106 Sn()BD(compilation
unit)ES()EA( )I(n.)ES( an interval during which a single unit of
compilation is occurring. See the )0 2 A()I(macro)ES()EA( )0 2 A()BD(with-compilation-unit)ES()EA(.)EP(
)0 P()WB 107 Sn()WB 107 Sn()BD(compile)ES()EA( )I(v.t.)ES( 1.
\201)0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D(\202 to perform
semantic preprocessing of the )0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D(, usually optimizing one or more qualities
of the code, such as run-time speed of )I(execution)ES( or run-time
storage usage. The minimum semantic requirements of compilation are
that it must remove all macro calls and arrange for all )0 2 A()I(load time
values)ES()EA( to be resolved prior to run time. 2. \201a )0 2 A()I(function)ES()EA(\202 to
produce a new )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(compiled-function)ES()EA( which
represents the result of )I(compiling)ES( the )0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D( represented by the )0 2 A()I(function)ES()EA(. See the )0 2 A()I(function)ES()EA(
)0 2 A()BD(compile)ES()EA(. 3.
\201a )0 2 A()I(source
file)ES()EA(\202 to produce a )0 111 1 A()I(compiled file)ES()111 0 TN TL()Ec /AF f D( from a )0 2 A()I(source
file)ES()EA(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(compile-file)ES()EA(.)EP(
)0 P()WB 108 Sn()WB 108 Sn()BD(compile time)ES()EA(
)I(n.)ES( the duration of time that the )0 113 1 A()I(compiler)ES()113 0 TN TL()Ec /AF f D( is processing )0 2 A()I(source code)ES()EA(.)EP(
)0 P()WB 109 Sn()WB 109 Sn()BD(compile-time definition)ES()EA(
)I(n.)ES( a definition in the )0 105 1 A()I(compilation environment)ES()105 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 110 Sn()WB 110 Sn()BD(compiled
code)ES()EA( )I(n.)ES( 1. )0 112 1 A()I(compiled functions)ES()112 0 TN TL()Ec /AF f D(. 2. )0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D( that represents )0 112 1 A()I(compiled
functions)ES()112 0 TN TL()Ec /AF f D(, such as the contents of a )0 111 1 A()I(compiled file)ES()111 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 111 Sn()WB 111 Sn()BD(compiled
file)ES()EA( )I(n.)ES( a )0 2 A()I(file)ES()EA( which represents the results of
)I(compiling)ES( the )0 2 A()I(forms)ES()EA( which appeared in a
corresponding )0 2 A()I(source file)ES()EA(, and which can be
)I(loaded)ES(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(compile-file)ES()EA(.)EP(
)0 P()WB 112 Sn()WB 112 Sn()BD(compiled
function)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(compiled-function)ES()EA(,
which is a )0 2 A()I(function)ES()EA( that has been
)I(compiled)ES(, which contains no references to )0 2 A()I(macros)ES()EA( that must
be expanded at run time, and which contains no unresolved
references to )0 2 A()I(load time values)ES()EA(.)EP(
)0 P()WB 113 Sn()WB 113 Sn()BD(compiler)ES()EA( )I(n.)ES( a
facility that is part of Lisp and that translates )0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D( into an )0 2 A()I(implementation-dependent)ES()EA(
form that might be represented or )I(executed)ES( efficiently. The
functions )0 2 A()BD(compile)ES()EA( and )0 2 A()BD(compile-file)ES()EA( permit
programs to invoke the )0 113 1 A()I(compiler)ES()113 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 114 Sn()WB 114 Sn()BD(compiler
macro)ES()EA( )I(n.)ES( an auxiliary macro definition for a
globally defined )0 2 A()I(function)ES()EA( or )0 2 A()I(macro)ES()EA( which might or might not
be called by any given )0 134 1 A()I(conforming implementation)ES()134 0 TN TL()Ec /AF f D(
and which must preserve the semantics of the globally defined
)0 2 A()I(function)ES()EA( or )0 2 A()I(macro)ES()EA( but which might perform
some additional optimizations. \201Unlike a )0 2 A()I(macro)ES()EA(, a )0 114 1 A()I(compiler macro)ES()114 0 TN TL()Ec /AF f D( does not extend the
syntax of Common Lisp; rather, it provides an alternate
implementation strategy for some existing syntax or
functionality.\202)EP(
)0 P()WB 115 Sn()WB 115 Sn()BD(compiler macro expansion)ES()EA(
)I(n.)ES( 1. the process of translating a )0 2 A()I(form)ES()EA( into another )0 2 A()I(form)ES()EA( by a )0 114 1 A()I(compiler macro)ES()114 0 TN TL()Ec /AF f D(. 2.
the )0 2 A()I(form)ES()EA(
resulting from this process.)EP(
)0 P()WB 116 Sn()WB 116 Sn()BD(compiler macro form)ES()EA( )I(n.)ES( a
)0 2 A()I(function
form)ES()EA( or )0 2 A()I(macro form)ES()EA( whose )0 2 A()I(operator)ES()EA( has a
definition as a )0 114 1 A()I(compiler macro)ES()114 0 TN TL()Ec /AF f D(, or a )0 2 A()BD(funcall)ES()EA( )0 2 A()I(form)ES()EA( whose first
)0 2 A()I(argument)ES()EA( is a )0 2 A()BD(function)ES()EA( )0 2 A()I(form)ES()EA( whose )0 2 A()I(argument)ES()EA( is
the )0 2 A()I(name)ES()EA( of
a )0 2 A()I(function)ES()EA( that has a definition
as a )0 114 1 A()I(compiler
macro)ES()114 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 117 Sn()WB 117 Sn()BD(compiler macro function)ES()EA(
)I(n.)ES( a )0 2 A()I(function)ES()EA( of two arguments, a
)0 2 A()I(form)ES()EA( and an
)0 2 A()I(environment)ES()EA(, that implements
)0 115 1 A()I(compiler
macro expansion)ES()115 0 TN TL()Ec /AF f D( by producing either a )0 2 A()I(form)ES()EA( to be used in place of the
original argument )0 2 A()I(form)ES()EA( or else )0 2 A()BD(nil)ES()EA(, indicating that the original
)0 2 A()I(form)ES()EA( should
not be replaced. See )0 2 A(Section
3.2.2.1 \201Compiler Macros\202)EA(.)EP(
)0 P()WB 118 Sn()WB 118 Sn()BD(complex)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(complex)ES()EA(.)EP(
)0 P()WB 119 Sn()WB 119 Sn()BD(complex
float)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(complex)ES()EA( which has a )0 120 1 A()I(complex part type)ES()120 0 TN TL()Ec /AF f D(
that is a )0 2 A()I(subtype)ES()EA( of )0 2 A()BD(float)ES()EA(. A )0 119 1 A()I(complex float)ES()119 0 TN TL()Ec /AF f D( is a )0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(, but it is not a
)0 2 A()I(float)ES()EA(.)EP(
)0 P()WB 120 Sn()WB 120 Sn()BD(complex
part type)ES()EA( )I(n.)ES( \201of a )0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(\202 1. the )0 2 A()I(type)ES()EA( which is used to represent both
the real part and the imaginary part of the )0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(. 2. the )0 2 A()I(actual complex part
type)ES()EA( of the )0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(. 3. the )0 2 A()I(expressed complex
part type)ES()EA( of the )0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 121 Sn()WB 121 Sn()BD(complex
rational)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(complex)ES()EA( which has a )0 120 1 A()I(complex part type)ES()120 0 TN TL()Ec /AF f D(
that is a )0 2 A()I(subtype)ES()EA( of )0 2 A()BD(rational)ES()EA(. A )0 121 1 A()I(complex rational)ES()121 0 TN TL()Ec /AF f D(
is a )0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(, but it
is not a )0 2 A()I(rational)ES()EA(. No )0 121 1 A()I(complex rational)ES()121 0 TN TL()Ec /AF f D( has an
imaginary part of zero because such a number is always represented
by Common Lisp as an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(rational)ES()EA(; see )0 2 A(Section 12.1.5.3 \201Rule of Canonical
Representation for Complex Rationals\202)EA(.)EP(
)0 P()WB 122 Sn()WB 122 Sn()BD(complex single float)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(complex)ES()EA(
which has a )0 120 1 A()I(complex part type)ES()120 0 TN TL()Ec /AF f D( that is a )0 2 A()I(subtype)ES()EA( of
)0 2 A()BD(single-float)ES()EA(. A )0 122 1 A()I(complex single
float)ES()122 0 TN TL()Ec /AF f D( is a )0 118 1 A()I(complex)ES()118 0 TN TL()Ec /AF f D(, but it is not a )0 2 A()I(single float)ES()EA(.)EP(
)0 P()WB 123 Sn()WB 123 Sn()BD(composite
stream)ES()EA( )I(n.)ES( a )0 2 A()I(stream)ES()EA( that is composed of one or
more other )0 2 A()I(streams)ES()EA(. ")0 2 A()BD(make-synonym-stream)ES()EA(
creates a composite stream.")EP(
)0 P()WB 124 Sn()WB 124 Sn()BD(compound
form)ES()EA( )I(n.)ES( a )0 2 A()I(non-empty)ES()EA( )0 2 A()I(list)ES()EA( which is a )0 2 A()I(form)ES()EA(: a )0 2 A()I(special
form)ES()EA(, a )0 2 A()I(lambda form)ES()EA(, a )0 2 A()I(macro form)ES()EA(,
or a )0 2 A()I(function form)ES()EA(.)EP(
)0 P()WB 125 Sn()WB 125 Sn()BD(compound type specifier)ES()EA(
)I(n.)ES( a )0 2 A()I(type specifier)ES()EA( that is a
)0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D(; i.e., a )0 2 A()I(type
specifier)ES()EA( that is not an )0 2 A()I(atomic type
specifier)ES()EA(. ")TT(\201vector single-float\202)ES( is a compound
type specifier.")EP(
)0 P()WB 126 Sn()WB 126 Sn()BD(concatenated stream)ES()EA( )I(n.)ES( an
)0 2 A()I(input)ES()EA(
)0 2 A()I(stream)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(concatenated-stream)ES()EA(.)EP(
)0 P()WB 127 Sn()WB 127 Sn()BD(condition)ES()EA(
)I(n.)ES( 1. an )0 2 A()I(object)ES()EA( which represents a )0 2 A()I(situation)ES()EA(---usually, but not
necessarily, during )I(signaling)ES(. 2. an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(condition)ES()EA(.)EP(
)0 P()WB 128 Sn()WB 128 Sn()BD(condition designator)ES()EA( )I(n.)ES(
one or more )0 2 A()I(objects)ES()EA( that, taken together,
denote either an existing )0 127 1 A()I(condition)ES()127 0 TN TL()Ec /AF f D( )0 2 A()I(object)ES()EA( or a )0 127 1 A()I(condition)ES()127 0 TN TL()Ec /AF f D( )0 2 A()I(object)ES()EA( to be implicitly created.
For details, see )0 2 A(Section 9.1.2.1
\201Condition Designators\202)EA(.)EP(
)0 P()WB 129 Sn()WB 129 Sn()BD(condition
handler)ES()EA( )I(n.)ES( a )0 2 A()I(function)ES()EA( that might be invoked
by the act of )I(signaling)ES(, that receives the )0 127 1 A()I(condition)ES()127 0 TN TL()Ec /AF f D( being signaled
as its only argument, and that is permitted to )0 2 A()I(handle)ES()EA( the )0 127 1 A()I(condition)ES()127 0 TN TL()Ec /AF f D( or to )0 2 A()I(decline)ES()EA(. See
)0 2 A(Section 9.1.4.1
\201Signaling\202)EA(.)EP(
)0 P()WB 130 Sn()WB 130 Sn()BD(condition reporter)ES()EA( )I(n.)ES( a
)0 2 A()I(function)ES()EA( that describes how a
)0 127 1 A()I(condition)ES()127 0 TN TL()Ec /AF f D( is to be
printed when the )0 2 A()I(Lisp printer)ES()EA( is invoked
while )0 2 A()BD(*print-escape*)ES()EA( is
)0 2 A()I(false)ES()EA(. See
)0 2 A(Section 9.1.3 \201Printing
Conditions\202)EA(.)EP(
)0 P()WB 131 Sn()WB 131 Sn()BD(conditional newline)ES()EA( )I(n.)ES( a
point in output where a )0 2 A()I(newline)ES()EA( might be inserted at the
discretion of the )0 2 A()I(pretty printer)ES()EA(. There are
four kinds of )0 131 1 A()I(conditional newlines)ES()131 0 TN TL()Ec /AF f D(, called
"linear-style," "fill-style," "miser-style," and "mandatory-style."
See the )0 2 A()I(function)ES()EA( )0 2 A()BD(pprint-newline)ES()EA( and
)0 2 A(Section 22.2.1.1 \201Dynamic Control
of the Arrangement of Output\202)EA(.)EP(
)0 P()WB 132 Sn()WB 132 Sn()BD(conformance)ES()EA(
)I(n.)ES( a state achieved by proper and complete adherence to the
requirements of this specification. See )0 2 A(Section 1.5 \201Conformance\202)EA(.)EP(
)0 P()WB 133 Sn()WB 133 Sn()BD(conforming
code)ES()EA( )I(n.)ES( )0 100 1 A()I(code)ES()100 0 TN TL()Ec /AF f D( that is all of part of a )0 136 1 A()I(conforming
program)ES()136 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 134 Sn()WB 134 Sn()BD(conforming implementation)ES()EA(
)I(n.)ES( an )0 2 A()I(implementation)ES()EA(, used to
emphasize complete and correct adherance to all conformance
criteria. A )0 134 1 A()I(conforming implementation)ES()134 0 TN TL()Ec /AF f D(
is capable of accepting a )0 136 1 A()I(conforming program)ES()136 0 TN TL()Ec /AF f D( as input,
preparing that )0 2 A()I(program)ES()EA( for )I(execution)ES(, and
executing the prepared )0 2 A()I(program)ES()EA( in accordance with this
specification. An )0 2 A()I(implementation)ES()EA( which has
been extended may still be a )0 134 1 A()I(conforming implementation)ES()134 0 TN TL()Ec /AF f D(
provided that no extension interferes with the correct function of
any )0 136 1 A()I(conforming
program)ES()136 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 135 Sn()WB 135 Sn()BD(conforming processor)ES()EA( )I(n.)ES(
)I(ANSI)ES( a )0 134 1 A()I(conforming
implementation)ES()134 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 136 Sn()WB 136 Sn()BD(conforming program)ES()EA( )I(n.)ES( a
)0 2 A()I(program)ES()EA(,
used to emphasize the fact that the )0 2 A()I(program)ES()EA( depends for its
correctness only upon documented aspects of Common Lisp, and can
therefore be expected to run correctly in any )0 134 1 A()I(conforming
implementation)ES()134 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 137 Sn()WB 137 Sn()BD(congruent)ES()EA(
)I(n.)ES( conforming to the rules of )0 2 A()I(lambda list)ES()EA( congruency, as
detailed in )0 2 A(Section 7.6.4
\201Congruent Lambda-lists for all Methods of a Generic
Function\202)EA(.)EP(
)0 P()WB 138 Sn()WB 138 Sn()BD(cons)ES()EA( )I(n.)ES()I(v.)ES( 1.
)I(n.)ES( a compound data )0 2 A()I(object)ES()EA( having two components
called the )0 80 1 A()I(car)ES()80 0 TN TL()Ec /AF f D( and the
)0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D(. 2. )I(v.)ES( to
create such an )0 2 A()I(object)ES()EA(. 3. )I(v.)ES( )I(Idiom.)ES(
to create any )0 2 A()I(object)ES()EA(, or to allocate
storage.)EP(
)0 P()WB 139 Sn()WB 139 Sn()BD(constant)ES()EA( )I(n.)ES(
1. a )0 140 1 A()I(constant
form)ES()140 0 TN TL()Ec /AF f D(. 2. a )0 142 1 A()I(constant variable)ES()142 0 TN TL()Ec /AF f D(. 3. a )0 141 1 A()I(constant object)ES()141 0 TN TL()Ec /AF f D(. 4.
a )0 2 A()I(self-evaluating
object)ES()EA(.)EP(
)0 P()WB 140 Sn()WB 140 Sn()BD(constant
form)ES()EA( )I(n.)ES( any )0 2 A()I(form)ES()EA( for which )0 2 A()I(evaluation)ES()EA( always )0 2 A()I(yields)ES()EA( the same
)0 2 A()I(value)ES()EA(,
that neither affects nor is affected by the )0 2 A()I(environment)ES()EA( in which it
is )I(evaluated)ES( \201except that it is permitted to refer to the
names of )0 142 1 A()I(constant
variables)ES()142 0 TN TL()Ec /AF f D( defined in the )0 2 A()I(environment)ES()EA(\202, and that
neither affects nor is affected by the state of any )0 2 A()I(object)ES()EA( except
those )0 2 A()I(objects)ES()EA( that are )0 2 A()I(otherwise
inaccessible parts)ES()EA( of )0 2 A()I(objects)ES()EA( created by the )0 2 A()I(form)ES()EA( itself. "A
)0 2 A()BD(car)ES()EA( form in
which the argument is a )0 2 A()BD(quote)ES()EA( form is a constant form.")EP(
)0 P()WB 141 Sn()WB 141 Sn()BD(constant
object)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( that is constrained \201e.g.,
by its context in a )0 2 A()I(program)ES()EA( or by the source from
which it was obtained\202 to be )0 2 A()I(immutable)ES()EA(. "A literal object
that has been processed by )0 2 A()BD(compile-file)ES()EA( is a constant
object.")EP(
)0 P()WB 142 Sn()WB 142 Sn()BD(constant
variable)ES()EA( )I(n.)ES( a )0 2 A()I(variable)ES()EA(, the )0 2 A()I(value)ES()EA( of which
can never change; that is, a )0 2 A()I(keyword)ES()EA([1] or a )0 2 A()I(named
constant)ES()EA(. "The symbols )0 2 A()BD(t)ES()EA(, )0 2 A()BD(nil)ES()EA(, )TT(:direction)ES(, and )0 2 A()BD(most-positive-fixnum)ES()EA(
are constant variables.")EP(
)0 P()WB 143 Sn()WB 143 Sn()BD(constituent)ES()EA(
)I(n.)ES(, )I(adj.)ES( 1. a. )I(n.)ES( the )0 2 A()I(syntax type)ES()EA( of a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( that is part of
a )0 2 A()I(token)ES()EA(.
For details, see )0 2 A(Section 2.1.4.1
\201Constituent Characters\202)EA(. b. )I(adj.)ES( \201of a )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D(\202 having the
)0 143 1 A()I(constituent)ES()143 0 TN TL()Ec /AF f D([1a]
)0 2 A()I(syntax
type)ES()EA([2]. c. )I(n.)ES( a )0 143 1 A()I(constituent)ES()143 0 TN TL()Ec /AF f D([1b] )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D(. 2. )I(n.)ES( \201of a )0 123 1 A()I(composite stream)ES()123 0 TN TL()Ec /AF f D(\202
one of possibly several )0 2 A()I(objects)ES()EA( that collectively comprise
the source or sink of that )0 2 A()I(stream)ES()EA(.)EP(
)0 P()WB 144 Sn()WB 144 Sn()BD(constituent trait)ES()EA( )I(n.)ES( \201of a
)0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D(\202 one of
several classifications of a )0 143 1 A()I(constituent)ES()143 0 TN TL()Ec /AF f D( )0 88 1 A()I(character)ES()88 0 TN TL()Ec /AF f D( in a )0 2 A()I(readtable)ES()EA(. See )0 2 A(Section 2.1.4.1 \201Constituent Characters\202)EA(.)EP(
)0 P()WB 145 Sn()WB 145 Sn()BD(constructed stream)ES()EA( )I(n.)ES( a
)0 2 A()I(stream)ES()EA(
whose source or sink is a Lisp )0 2 A()I(object)ES()EA(. Note that since a )0 2 A()I(stream)ES()EA( is
another Lisp )0 2 A()I(object)ES()EA(, )0 123 1 A()I(composite streams)ES()123 0 TN TL()Ec /AF f D( are considered
)0 145 1 A()I(constructed
streams)ES()145 0 TN TL()Ec /AF f D(. "A string stream is a constructed stream.")EP(
)0 P()WB 146 Sn()WB 146 Sn()BD(contagion)ES()EA(
)I(n.)ES( a process whereby operations on )0 2 A()I(objects)ES()EA( of differing )0 2 A()I(types)ES()EA( \201e.g.,
arithmetic on mixed )0 2 A()I(types)ES()EA( of )0 2 A()I(numbers)ES()EA(\202 produce a result whose
)0 2 A()I(type)ES()EA( is
controlled by the dominance of one )0 2 A()I(argument)ES()EA('s )0 2 A()I(type)ES()EA( over the )0 2 A()I(types)ES()EA( of the other
)0 2 A()I(arguments)ES()EA(. See )0 2 A(Section 12.1.1.2 \201Contagion in Numeric
Operations\202)EA(.)EP(
)0 P()WB 147 Sn()WB 147 Sn()BD(continuable)ES()EA(
)I(n.)ES( \201of an )0 2 A()I(error)ES()EA(\202 an )0 2 A()I(error)ES()EA( that is )0 150 1 A()I(correctable)ES()150 0 TN TL()Ec /AF f D( by the )TT(continue)ES(
restart.)EP(
)0 P()WB 148 Sn()WB 148 Sn()BD(control form)ES()EA(
)I(n.)ES( 1. a )0 2 A()I(form)ES()EA( that establishes one or more
places to which control can be transferred. 2. a )0 2 A()I(form)ES()EA( that
transfers control.)EP(
)0 P()WB 149 Sn()WB 149 Sn()BD(copy)ES()EA( )I(n.)ES( 1. \201of a
)0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D( C\202 a )0 2 A()I(fresh)ES()EA( )0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D( with the )0 2 A()I(same)ES()EA( )0 80 1 A()I(car)ES()80 0 TN TL()Ec /AF f D( and )0 86 1 A()I(cdr)ES()86 0 TN TL()Ec /AF f D( as C. 2. \201of a )0 2 A()I(list)ES()EA( L\202 a )0 2 A()I(fresh)ES()EA( )0 2 A()I(list)ES()EA( with the )0 2 A()I(same)ES()EA( )0 2 A()I(elements)ES()EA( as L. \201Only the )0 2 A()I(list
structure)ES()EA( is )0 2 A()I(fresh)ES()EA(; the )0 2 A()I(elements)ES()EA( are the )0 2 A()I(same)ES()EA(.\202 See the
)0 2 A()I(function)ES()EA( )0 2 A()BD(copy-list)ES()EA(. 3. \201of an
)0 2 A()I(association list)ES()EA( A with
)0 2 A()I(elements)ES()EA(
Ai\202 a )0 2 A()I(fresh)ES()EA( )0 2 A()I(list)ES()EA( B with )0 2 A()I(elements)ES()EA( Bi, each of which
is )0 2 A()BD(nil)ES()EA( if Ai is
)0 2 A()BD(nil)ES()EA(, or else a
)0 149 1 A()I(copy)ES()149 0 TN TL()Ec /AF f D( of the )0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D( Ai. See the )0 2 A()I(function)ES()EA(
)0 2 A()BD(copy-alist)ES()EA(. 4. \201of a )0 2 A()I(tree)ES()EA( T\202 a )0 2 A()I(fresh)ES()EA( )0 2 A()I(tree)ES()EA( with the
)0 2 A()I(same)ES()EA(
)0 2 A()I(leaves)ES()EA( as
T. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(copy-tree)ES()EA(. 5. \201of a
)0 2 A()I(random
state)ES()EA( R\202 a )0 2 A()I(fresh)ES()EA( )0 2 A()I(random state)ES()EA( that, if used
as an argument to to the )0 2 A()I(function)ES()EA( )0 2 A()BD(random)ES()EA( would produce the same
series of "random" values as R would produce. 6. \201of a )0 2 A()I(structure)ES()EA( S\202
a )0 2 A()I(fresh)ES()EA(
)0 2 A()I(structure)ES()EA( that has the same
)0 2 A()I(type)ES()EA( as S,
and that has slot values, each of which is the )0 2 A()I(same)ES()EA( as the corresponding slot
value of S. \201Note that since the difference between a )0 138 1 A()I(cons)ES()138 0 TN TL()Ec /AF f D(, a )0 2 A()I(list)ES()EA(, and a )0 2 A()I(tree)ES()EA( is a matter of "view" or
"intention," there can be no general-purpose )0 2 A()I(function)ES()EA( which, based
solely on the )0 2 A()I(type)ES()EA( of an )0 2 A()I(object)ES()EA(, can determine which of
these distinct meanings is intended. The distinction rests solely
on the basis of the text description within this document. For
example, phrases like "a )0 149 1 A()I(copy)ES()149 0 TN TL()Ec /AF f D( of the given )0 2 A()I(list)ES()EA(" or "copy of the )0 2 A()I(list)ES()EA( )I(x)ES("
imply the second definition.\202)EP(
)0 P()WB 150 Sn()WB 150 Sn()BD(correctable)ES()EA(
)I(adj.)ES( \201of an )0 2 A()I(error)ES()EA(\202 1. \201by a )0 2 A()I(restart)ES()EA( other than )0 2 A()BD(abort)ES()EA( that has
been associated with the )0 2 A()I(error)ES()EA(\202 capable of being corrected
by invoking that )0 2 A()I(restart)ES()EA(. "The function )0 2 A()BD(cerror)ES()EA( signals
an error that is correctable by the )0 2 A()BD(continue)ES()EA( )0 2 A()I(restart)ES()EA(." \201Note that
correctability is not a property of an )0 2 A()I(error)ES()EA( )0 2 A()I(object)ES()EA(, but rather a property of
the )0 2 A()I(dynamic environment)ES()EA(
that is in effect when the )0 2 A()I(error)ES()EA( is )I(signaled)ES(.
Specifically, the )0 2 A()I(restart)ES()EA( is "associated with" the
)0 2 A()I(error)ES()EA(
)0 127 1 A()I(condition)ES()127 0 TN TL()Ec /AF f D( )0 2 A()I(object)ES()EA(. See
)0 2 A(Section 9.1.4.2.4 \201Associating a
Restart with a Condition\202)EA(.\202 2. \201when no specific )0 2 A()I(restart)ES()EA( is
mentioned\202 )0 150 1 A()I(correctable)ES()150 0 TN TL()Ec /AF f D([1] by at least one )0 2 A()I(restart)ES()EA(.
")0 2 A()BD(import)ES()EA(
signals a correctable error of )0 2 A()I(type)ES()EA( )0 2 A()BD(package-error)ES()EA( if any of the
imported symbols has the same name as some distinct symbol already
accessible in the package.")EP(
)0 P()WB 151 Sn()WB 151 Sn()BD(current
input base)ES()EA( )I(n.)ES( \201in a )0 2 A()I(dynamic environment)ES()EA(\202
the )0 2 A()I(radix)ES()EA(
that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*read-base*)ES()EA( in that )0 2 A()I(environment)ES()EA(, and that is the
default )0 2 A()I(radix)ES()EA( employed by the )0 2 A()I(Lisp reader)ES()EA(
and its related )0 2 A()I(functions)ES()EA(.)EP(
)0 P()WB 152 Sn()WB 152 Sn()BD(current logical block)ES()EA( )I(n.)ES(
the context of the innermost lexically enclosing use of )0 2 A()BD(pprint-logical-block)ES()EA(.)EP(
)0 P()WB 153 Sn()WB 153 Sn()BD(current output base)ES()EA( )I(n.)ES( \201in
a )0 2 A()I(dynamic environment)ES()EA(\202
the )0 2 A()I(radix)ES()EA(
that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*print-base*)ES()EA( in that
)0 2 A()I(environment)ES()EA(, and that is the
default )0 2 A()I(radix)ES()EA( employed by the )0 2 A()I(Lisp
printer)ES()EA( and its related )0 2 A()I(functions)ES()EA(.)EP(
)0 P()WB 154 Sn()WB 154 Sn()BD(current
package)ES()EA( )I(n.)ES( \201in a )0 2 A()I(dynamic environment)ES()EA(\202
the )0 2 A()I(package)ES()EA( that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*package*)ES()EA( in
that )0 2 A()I(environment)ES()EA(, and that is the
default )0 2 A()I(package)ES()EA( employed by the )0 2 A()I(Lisp reader)ES()EA(
and )0 2 A()I(Lisp
printer)ES()EA(, and their related )0 2 A()I(functions)ES()EA(.)EP(
)0 P()WB 155 Sn()WB 155 Sn()BD(current pprint dispatch
table)ES()EA( )I(n.)ES( \201in a )0 2 A()I(dynamic environment)ES()EA(\202
the )0 2 A()I(pprint dispatch
table)ES()EA( that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*print-pprint-dispatch*)ES()EA(
in that )0 2 A()I(environment)ES()EA(, and that is the
default )0 2 A()I(pprint dispatch
table)ES()EA( employed by the )0 2 A()I(pretty printer)ES()EA(.)EP(
)0 P()WB 156 Sn()WB 156 Sn()BD(current random state)ES()EA( )I(n.)ES(
\201in a )0 2 A()I(dynamic environment)ES()EA(\202
the )0 2 A()I(random
state)ES()EA( that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*random-state*)ES()EA( in that
)0 2 A()I(environment)ES()EA(, and that is the
default )0 2 A()I(random state)ES()EA( employed by
)0 2 A()BD(random)ES()EA(.)EP(
)0 P()WB 157 Sn()WB 157 Sn()BD(current
readtable)ES()EA( )I(n.)ES( \201in a )0 2 A()I(dynamic environment)ES()EA(\202
the )0 2 A()I(readtable)ES()EA( that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*readtable*)ES()EA( in that )0 2 A()I(environment)ES()EA(, and that affects
the way in which )0 2 A()I(expressions)ES()EA([2] are parsed into
)0 2 A()I(objects)ES()EA(
by the )0 2 A()I(Lisp
reader)ES()EA(.)EP(

)BD(D)ES(
)0 P()WB 158 Sn()WB 158 Sn()BD(data type)ES()EA(
)I(n.)ES( )I(Trad.)ES( a )0 2 A()I(type)ES()EA(.)EP(
)0 P()WB 159 Sn()WB 159 Sn()BD(debug I/O)ES()EA(
)I(n.)ES( the )0 2 A()I(bidirectional)ES()EA( )0 2 A()I(stream)ES()EA( that is
the )0 2 A()I(value)ES()EA(
of the )0 2 A()I(variable)ES()EA( )0 2 A()BD(*debug-io*)ES()EA(.)EP(
)0 P()WB 160 Sn()WB 160 Sn()BD(debugger)ES()EA( )I(n.)ES( a
facility that allows the )0 2 A()I(user)ES()EA( to handle a )0 2 A()I(condition)ES()EA( interactively.
For example, the )0 160 1 A()I(debugger)ES()160 0 TN TL()Ec /AF f D( might permit interactive selection
of a )0 2 A()I(restart)ES()EA( from among the )0 2 A()I(active)ES()EA( )0 2 A()I(restarts)ES()EA(, and
it might perform additional )0 2 A()I(implementation-defined)ES()EA(
services for the purposes of debugging.)EP(
)0 P()WB 161 Sn()WB 161 Sn()BD(declaration)ES()EA(
)I(n.)ES( a )0 2 A()I(global declaration)ES()EA( or
)0 2 A()I(local
declaration)ES()EA(.)EP(
)0 P()WB 162 Sn()WB 162 Sn()BD(declaration identifier)ES()EA(
)I(n.)ES( one of the )0 2 A()I(symbols)ES()EA( )0 2 A()BD(declaration)ES()EA(, )0 2 A()BD(dynamic-extent)ES()EA(, )0 2 A()BD(ftype)ES()EA(,
)BD(function)ES(, )0 2 A()BD(ignore)ES()EA(, )0 2 A()BD(inline)ES()EA(, )0 2 A()BD(notinline)ES()EA(, )0 2 A()BD(optimize)ES()EA(, )0 2 A()BD(special)ES()EA(, or
)0 2 A()BD(type)ES()EA(; or a
)0 2 A()I(symbol)ES()EA(
which is the )0 2 A()I(name)ES()EA( of a )0 2 A()I(type)ES()EA(; or a )0 2 A()I(symbol)ES()EA( which has been
)I(declared)ES( to be a )0 162 1 A()I(declaration identifier)ES()162 0 TN TL()Ec /AF f D( by
using a )0 2 A()BD(declaration)ES()EA( )0 161 1 A()I(declaration)ES()161 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 163 Sn()WB 163 Sn()BD(declaration specifier)ES()EA( )I(n.)ES(
an )0 2 A()I(expression)ES()EA( that can appear at
top level of a )0 2 A()BD(declare)ES()EA( expression or a )0 2 A()BD(declaim)ES()EA( form,
or as the argument to )0 2 A()BD(proclaim)ES()EA(, and which has a
)0 2 A()I(car)ES()EA( which is
a )0 162 1 A()I(declaration
identifier)ES()162 0 TN TL()Ec /AF f D(, and which has a )0 2 A()I(cdr)ES()EA( that is data interpreted
according to rules specific to the )0 162 1 A()I(declaration identifier)ES()162 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 164 Sn()WB 164 Sn()BD(declare)ES()EA( )I(v.)ES( to
)0 2 A()I(establish)ES()EA( a )0 161 1 A()I(declaration)ES()161 0 TN TL()Ec /AF f D(. See )0 2 A()BD(declare)ES()EA(, )0 2 A()BD(declaim)ES()EA(, or )0 2 A()BD(proclaim)ES()EA(.)EP(
)0 P()WB 165 Sn()WB 165 Sn()BD(decline)ES()EA( )I(v.)ES( \201of
a )0 2 A()I(handler)ES()EA(\202 to return normally
without having )I(handled)ES( the )0 2 A()I(condition)ES()EA( being
)I(signaled)ES(, permitting the signaling process to continue as if
the )0 2 A()I(handler)ES()EA( had not been present.)EP(
)0 P()WB 166 Sn()WB 166 Sn()BD(decoded time)ES()EA(
)I(n.)ES( )0 2 A()I(absolute)ES()EA( )0 2 A()I(time)ES()EA(, represented as an ordered
series of nine )0 2 A()I(objects)ES()EA( which, taken together,
form a description of a point in calendar time, accurate to the
nearest second \201except that )0 2 A()I(leap seconds)ES()EA( are ignored\202.
See )0 2 A(Section 25.1.4.1 \201Decoded
Time\202)EA(.)EP(
)0 P()WB 167 Sn()WB 167 Sn()BD(default
method)ES()EA( )I(n.)ES( a )0 2 A()I(method)ES()EA( having no )0 2 A()I(parameter
specializers)ES()EA( other than the )0 2 A()I(class)ES()EA( )0 2 A()BD(t)ES()EA(. Such a )0 2 A()I(method)ES()EA( is always an )0 2 A()I(applicable
method)ES()EA( but might be )I(shadowed)ES([2] by a more specific
)0 2 A()I(method)ES()EA(.)EP(
)0 P()WB 168 Sn()WB 168 Sn()BD(defaulted
initialization argument list)ES()EA( )I(n.)ES( a )0 2 A()I(list)ES()EA( of
alternating initialization argument )0 2 A()I(names)ES()EA( and )0 2 A()I(values)ES()EA( in which unsupplied
initialization arguments are defaulted, used in the protocol for
initializing and reinitializing )0 2 A()I(instances)ES()EA( of )0 2 A()I(classes)ES()EA(.)EP(
)0 P()WB 169 Sn()WB 169 Sn()BD(define-method-combination
arguments lambda list)ES()EA( )I(n.)ES( a )0 2 A()I(lambda list)ES()EA( used by the
)TT(:arguments)ES( option to )0 2 A()BD(define-method-combination)ES()EA(.
See )0 2 A(Section 3.4.10
\201Define-method-combination Arguments Lambda Lists\202)EA(.)EP(
)0 P()WB 170 Sn()WB 170 Sn()BD(define-modify-macro lambda
list)ES()EA( )I(n.)ES( a )0 2 A()I(lambda list)ES()EA( used by )0 2 A()BD(define-modify-macro)ES()EA(.
See )0 2 A(Section 3.4.9
\201Define-modify-macro Lambda Lists\202)EA(.)EP(
)0 P()WB 171 Sn()WB 171 Sn()BD(defined name)ES()EA(
)I(n.)ES( a )0 2 A()I(symbol)ES()EA( the meaning of which is
defined by Common Lisp.)EP(
)0 P()WB 172 Sn()WB 172 Sn()BD(defining
form)ES()EA( )I(n.)ES( a )0 2 A()I(form)ES()EA( that has the side-effect of
)I(establishing)ES( a definition. ")0 2 A()BD(defun)ES()EA( and )0 2 A()BD(defparameter)ES()EA( are defining
forms.")EP(
)0 P()WB 173 Sn()WB 173 Sn()BD(defsetf lambda list)ES()EA( )I(n.)ES( a
)0 2 A()I(lambda
list)ES()EA( that is like an )0 2 A()I(ordinary lambda list)ES()EA(
except that it does not permit )TT(&aux)ES( and that it
permits use of )TT(&environment)ES(. See )0 2 A(Section 3.4.7 \201Defsetf Lambda Lists\202)EA(.)EP(
)0 P()WB 174 Sn()WB 174 Sn()BD(deftype lambda list)ES()EA( )I(n.)ES( a
)0 2 A()I(lambda
list)ES()EA( that is like a )0 2 A()I(macro lambda list)ES()EA(
except that the default )0 2 A()I(value)ES()EA( for unsupplied )0 2 A()I(optional
parameters)ES()EA( and )0 2 A()I(keyword parameters)ES()EA( is
the )0 2 A()I(symbol)ES()EA( )0 2 A()BD(*)ES()EA( \201rather than )0 2 A()BD(nil)ES()EA(\202. See )0 2 A(Section 3.4.8 \201Deftype Lambda Lists\202)EA(.)EP(
)0 P()WB 175 Sn()WB 175 Sn()BD(denormalized)ES()EA(
)I(adj.)ES(, )I(ANSI)ES(, )I(IEEE)ES( \201of a )0 2 A()I(float)ES()EA(\202 conforming to the
description of "denormalized" as described by )I(IEEE Standard for
Binary Floating-Point Arithmetic)ES(. For example, in an )0 2 A()I(implementation)ES()EA( where the
minimum possible exponent was )TT(-7)ES( but where )TT(0.001)ES(
was a valid mantissa, the number )TT(1.0e-10)ES( might be
representable as )TT(0.001e-7)ES( internally even if the )0 2 A()I(normalized)ES()EA(
representation would call for it to be represented instead as
)TT(1.0e-10)ES( or )TT(0.1e-9)ES(. By their nature, )0 175 1 A()I(denormalized)ES()175 0 TN TL()Ec /AF f D( )0 2 A()I(floats)ES()EA( generally
have less precision than )0 2 A()I(normalized)ES()EA( )0 2 A()I(floats)ES()EA(.)EP(
)0 P()WB 176 Sn()WB 176 Sn()BD(derived type)ES()EA(
)I(n.)ES( a )0 2 A()I(type specifier)ES()EA( which is
defined in terms of an expansion into another )0 2 A()I(type specifier)ES()EA(.
)0 2 A()BD(deftype)ES()EA(
defines )0 176 1 A()I(derived
types)ES()176 0 TN TL()Ec /AF f D(, and there may be other )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(operators)ES()EA( which do so as
well.)EP(
)0 P()WB 177 Sn()WB 177 Sn()BD(derived type specifier)ES()EA(
)I(n.)ES( a )0 2 A()I(type specifier)ES()EA( for a
)0 176 1 A()I(derived
type)ES()176 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 178 Sn()WB 178 Sn()BD(designator)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( that denotes another
)0 2 A()I(object)ES()EA(.
In the dictionary entry for an )0 2 A()I(operator)ES()EA( if a )0 2 A()I(parameter)ES()EA( is
described as a )0 178 1 A()I(designator)ES()178 0 TN TL()Ec /AF f D( for a )0 2 A()I(type)ES()EA(, the description of the )0 2 A()I(operator)ES()EA( is
written in a way that assumes that appropriate coercion to that
)0 2 A()I(type)ES()EA( has
already occurred; that is, that the )0 2 A()I(parameter)ES()EA( is already of the
denoted )0 2 A()I(type)ES()EA(. For more detailed information,
see )0 2 A(Section 1.4.1.5
\201Designators\202)EA(.)EP(
)0 P()WB 179 Sn()WB 179 Sn()BD(destructive)ES()EA(
)I(adj.)ES( \201of an )0 2 A()I(operator)ES()EA(\202 capable of modifying
some program-visible aspect of one or more )0 2 A()I(objects)ES()EA( that are either
explicit )0 2 A()I(arguments)ES()EA( to the )0 2 A()I(operator)ES()EA( or
that can be obtained directly or indirectly from the )0 2 A()I(global
environment)ES()EA( by the )0 2 A()I(operator)ES()EA(.)EP(
)0 P()WB 180 Sn()WB 180 Sn()BD(destructuring lambda list)ES()EA(
)I(n.)ES( an )0 2 A()I(extended lambda list)ES()EA(
used in )0 2 A()BD(destructuring-bind)ES()EA( and
nested within )0 2 A()I(macro lambda lists)ES()EA(. See
)0 2 A(Section 3.4.5 \201Destructuring Lambda
Lists\202)EA(.)EP(
)0 P()WB 181 Sn()WB 181 Sn()BD(different)ES()EA(
)I(adj.)ES( not the )0 2 A()I(same)ES()EA( "The strings )TT("FOO")ES( and
)TT("foo")ES( are different under )0 2 A()BD(equal)ES()EA( but not under )0 2 A()BD(equalp)ES()EA(.")EP(
)0 P()WB 182 Sn()WB 182 Sn()BD(digit)ES()EA( )I(n.)ES( \201in a
)0 2 A()I(radix)ES()EA(\202 a
)0 2 A()I(character)ES()EA( that is among the
possible digits \201)TT(0)ES( to )TT(9)ES(, )TT(A)ES( to
)TT(Z)ES(, and )TT(a)ES( to )TT(z)ES(\202 and that is defined to
have an associated numeric weight as a digit in that )0 2 A()I(radix)ES()EA(. See
)0 2 A(Section 13.1.4.6 \201Digits in a
Radix\202)EA(.)EP(
)0 P()WB 183 Sn()WB 183 Sn()BD(dimension)ES()EA(
)I(n.)ES( 1. a non-negative )0 2 A()I(integer)ES()EA( indicating the number of
)0 2 A()I(objects)ES()EA(
an )0 2 A()I(array)ES()EA(
can hold along one axis. If the )0 2 A()I(array)ES()EA( is a )0 2 A()I(vector)ES()EA( with a )0 2 A()I(fill
pointer)ES()EA(, the )0 2 A()I(fill pointer)ES()EA( is ignored.
"The second dimension of that array is 7." 2. an axis of an array.
"This array has six dimensions.")EP(
)0 P()WB 184 Sn()WB 184 Sn()BD(direct
instance)ES()EA( )I(n.)ES( \201of a )0 2 A()I(class)ES()EA( C\202 an )0 2 A()I(object)ES()EA( whose )0 2 A()I(class)ES()EA( is C
itself, rather than some )0 2 A()I(subclass)ES()EA( of C. "The function
)0 2 A()BD(make-instance)ES()EA( always
returns a direct instance of the class which is \201or is named by\202
its first argument.")EP(
)0 P()WB 185 Sn()WB 185 Sn()BD(direct
subclass)ES()EA( )I(n.)ES( \201of a )0 2 A()I(class)ES()EA( C1\202 a )0 2 A()I(class)ES()EA( C2, such that C1 is a
)0 186 1 A()I(direct
superclass)ES()186 0 TN TL()Ec /AF f D( of C2.)EP(
)0 P()WB 186 Sn()WB 186 Sn()BD(direct
superclass)ES()EA( )I(n.)ES( \201of a )0 2 A()I(class)ES()EA( C1\202 a )0 2 A()I(class)ES()EA( C2 which was explicitly
designated as a )0 2 A()I(superclass)ES()EA( of C1 in the
definition of C1.)EP(
)0 P()WB 187 Sn()WB 187 Sn()BD(disestablish)ES()EA(
)I(v.t.)ES( to withdraw the )I(establishment)ES( of an )0 2 A()I(object)ES()EA(, a
)0 2 A()I(binding)ES()EA(,
an )0 2 A()I(exit
point)ES()EA(, a )0 2 A()I(tag)ES()EA(, a )0 2 A()I(handler)ES()EA(, a )0 2 A()I(restart)ES()EA(, or an )0 2 A()I(environment)ES()EA(.)EP(
)0 P()WB 188 Sn()WB 188 Sn()BD(disjoint)ES()EA( )I(n.)ES(
\201of )0 2 A()I(types)ES()EA(\202
having no )0 2 A()I(elements)ES()EA( in common.)EP(
)0 P()WB 189 Sn()WB 189 Sn()BD(dispatching macro
character)ES()EA( )I(n.)ES( a )0 2 A()I(macro character)ES()EA( that has
an associated table that specifies the )0 2 A()I(function)ES()EA( to be called for each
)0 2 A()I(character)ES()EA( that is seen
following the )0 189 1 A()I(dispatching macro
character)ES()189 0 TN TL()Ec /AF f D(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(make-dispatch-macro-character)ES()EA(.)EP(
)0 P()WB 190 Sn()WB 190 Sn()BD(displaced
array)ES()EA( )I(n.)ES( an )0 2 A()I(array)ES()EA( which has no storage of its
own, but which is instead indirected to the storage of another
)0 2 A()I(array)ES()EA(,
called its )0 2 A()I(target)ES()EA(, at a specified offset, in
such a way that any attempt to )0 2 A()I(access)ES()EA( the )0 190 1 A()I(displaced array)ES()190 0 TN TL()Ec /AF f D( implicitly
references the )0 2 A()I(target)ES()EA( )0 2 A()I(array)ES()EA(.)EP(
)0 P()WB 191 Sn()WB 191 Sn()BD(distinct)ES()EA( )I(adj.)ES(
not )0 2 A()I(identical)ES()EA(.)EP(
)0 P()WB 192 Sn()WB 192 Sn()BD(documentation string)ES()EA( )I(n.)ES(
\201in a defining )0 2 A()I(form)ES()EA(\202 A )0 2 A()I(literal)ES()EA( )0 2 A()I(string)ES()EA( which because of the
context in which it appears \201rather than because of some
intrinsically observable aspect of the )0 2 A()I(string)ES()EA(\202 is taken as documentation.
In some cases, the )0 192 1 A()I(documentation string)ES()192 0 TN TL()Ec /AF f D( is saved in
such a way that it can later be obtained by supplying either an
)0 2 A()I(object)ES()EA(,
or by supplying a )0 2 A()I(name)ES()EA( and a "kind" to the )0 2 A()I(function)ES()EA(
)0 2 A()BD(documentation)ES()EA(. "The body of
code in a )0 2 A()BD(defmacro)ES()EA( form can be preceded by
a documentation string of kind )0 2 A()BD(function)ES()EA(.")EP(
)0 P()WB 193 Sn()WB 193 Sn()BD(dot)ES()EA( )I(n.)ES( the )0 2 A()I(standard
character)ES()EA( that is variously called "full stop," "period,"
or "dot" \201)TT(.)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 194 Sn()WB 194 Sn()BD(dotted list)ES()EA(
)I(n.)ES( a )0 2 A()I(list)ES()EA( which has a terminating )0 2 A()I(atom)ES()EA( that is not
)0 2 A()BD(nil)ES()EA(. \201An
)0 2 A()I(atom)ES()EA( by
itself is not a )0 194 1 A()I(dotted
list)ES()194 0 TN TL()Ec /AF f D(, however.\202)EP(
)0 P()WB 195 Sn()WB 195 Sn()BD(dotted pair)ES()EA(
)I(n.)ES( 1. a )0 2 A()I(cons)ES()EA( whose )0 2 A()I(cdr)ES()EA( is a )0 2 A()I(non-list)ES()EA(. 2. any )0 2 A()I(cons)ES()EA(, used to
emphasize the use of the )0 2 A()I(cons)ES()EA( as a symmetric data pair.)EP(
)0 P()WB 196 Sn()WB 196 Sn()BD(double float)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(double-float)ES()EA(.)EP(
)0 P()WB 197 Sn()WB 197 Sn()BD(double-quote)ES()EA(
)I(n.)ES( the )0 2 A()I(standard character)ES()EA(
that is variously called "quotation mark" or "double quote"
\201)TT(")ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 198 Sn()WB 198 Sn()BD(dynamic
binding)ES()EA( )I(n.)ES( a )0 2 A()I(binding)ES()EA( in a )0 199 1 A()I(dynamic environment)ES()199 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 199 Sn()WB 199 Sn()BD(dynamic environment)ES()EA( )I(n.)ES( that
part of an )0 2 A()I(environment)ES()EA( that contains
)0 2 A()I(bindings)ES()EA(
with )0 200 1 A()I(dynamic
extent)ES()200 0 TN TL()Ec /AF f D(. A )0 199 1 A()I(dynamic environment)ES()199 0 TN TL()Ec /AF f D( contains,
among other things: )0 2 A()I(exit points)ES()EA( established by
)0 2 A()BD(unwind-protect)ES()EA(, and
)0 2 A()I(bindings)ES()EA(
of )0 202 1 A()I(dynamic
variables)ES()202 0 TN TL()Ec /AF f D(, )0 2 A()I(exit points)ES()EA( established by
)0 2 A()BD(catch)ES()EA(,
)0 2 A()I(condition handlers)ES()EA(, and
)0 2 A()I(restarts)ES()EA(.)EP(
)0 P()WB 200 Sn()WB 200 Sn()BD(dynamic
extent)ES()EA( )I(n.)ES( an )0 2 A()I(extent)ES()EA( whose duration is bounded
by points of )I(establishment)ES( and )I(disestablishment)ES(
within the execution of a particular )0 2 A()I(form)ES()EA(. See )0 2 A()I(indefinite extent)ES()EA(.
"Dynamic variable bindings have dynamic extent.")EP(
)0 P()WB 201 Sn()WB 201 Sn()BD(dynamic
scope)ES()EA( )I(n.)ES( )0 2 A()I(indefinite scope)ES()EA( along
with )0 200 1 A()I(dynamic
extent)ES()200 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 202 Sn()WB 202 Sn()BD(dynamic
variable)ES()EA( )I(n.)ES( a )0 2 A()I(variable)ES()EA( the )0 2 A()I(binding)ES()EA( for which is in the
)0 199 1 A()I(dynamic
environment)ES()199 0 TN TL()Ec /AF f D(. See )0 2 A()BD(special)ES()EA(.)EP(

)BD(E)ES(
)0 P()WB 203 Sn()WB 203 Sn()BD(echo stream)ES()EA(
)I(n.)ES( a )0 2 A()I(stream)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(echo-stream)ES()EA(.)EP(
)0 P()WB 204 Sn()WB 204 Sn()BD(effective
method)ES()EA( )I(n.)ES( the combination of )0 2 A()I(applicable methods)ES()EA(
that are executed when a )0 2 A()I(generic function)ES()EA( is
invoked with a particular sequence of )0 2 A()I(arguments)ES()EA(.)EP(
)0 P()WB 205 Sn()WB 205 Sn()BD(element)ES()EA( )I(n.)ES( 1.
\201of a )0 2 A()I(list)ES()EA(\202
an )0 2 A()I(object)ES()EA(
that is the )0 2 A()I(car)ES()EA( of one of the )0 2 A()I(conses)ES()EA( that comprise the
)0 2 A()I(list)ES()EA(. 2.
\201of an )0 2 A()I(array)ES()EA(\202 an )0 2 A()I(object)ES()EA( that is stored in the
)0 2 A()I(array)ES()EA(. 3.
\201of a )0 2 A()I(sequence)ES()EA(\202 an )0 2 A()I(object)ES()EA( that is an )0 205 1 A()I(element)ES()205 0 TN TL()Ec /AF f D( of the )0 2 A()I(list)ES()EA( or )0 2 A()I(array)ES()EA( that is the
)0 2 A()I(sequence)ES()EA(. 4. \201of a )0 2 A()I(type)ES()EA(\202 an )0 2 A()I(object)ES()EA( that is a
member of the set of )0 2 A()I(objects)ES()EA( designated by the )0 2 A()I(type)ES()EA(. 5. \201of an
)0 2 A()I(input)ES()EA(
)0 2 A()I(stream)ES()EA(\202 a
)0 2 A()I(character)ES()EA( or )0 2 A()I(number)ES()EA( \201as
appropriate to the )0 206 1 A()I(element type)ES()206 0 TN TL()Ec /AF f D( of the )0 2 A()I(stream)ES()EA(\202 that is among the
ordered series of )0 2 A()I(objects)ES()EA( that can be read from the
)0 2 A()I(stream)ES()EA(
\201using )0 2 A()BD(read-char)ES()EA( or )0 2 A()BD(read-byte)ES()EA(, as
appropriate to the )0 2 A()I(stream)ES()EA(\202. 6. \201of an )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA(\202 a
)0 2 A()I(character)ES()EA( or )0 2 A()I(number)ES()EA( \201as
appropriate to the )0 206 1 A()I(element type)ES()206 0 TN TL()Ec /AF f D( of the )0 2 A()I(stream)ES()EA(\202 that is among the
ordered series of )0 2 A()I(objects)ES()EA( that has been or will be
written to the )0 2 A()I(stream)ES()EA( \201using )0 2 A()BD(write-char)ES()EA( or )0 2 A()BD(write-byte)ES()EA(,
as appropriate to the )0 2 A()I(stream)ES()EA(\202. 7. \201of a )0 2 A()I(class)ES()EA(\202 a )0 2 A()I(generalized instance)ES()EA(
of the )0 2 A()I(class)ES()EA(.)EP(
)0 P()WB 206 Sn()WB 206 Sn()BD(element type)ES()EA(
)I(n.)ES( 1. \201of an )0 2 A()I(array)ES()EA(\202 the )0 2 A()I(array element
type)ES()EA( of the )0 2 A()I(array)ES()EA(. 2. \201of a )0 2 A()I(stream)ES()EA(\202 the )0 2 A()I(stream
element type)ES()EA( of the )0 2 A()I(stream)ES()EA(.)EP(
)0 P()WB 207 Sn()WB 207 Sn()BD(em)ES()EA( )I(n.)ES( )I(Trad.)ES( a
context-dependent unit of measure commonly used in typesetting,
equal to the displayed width of of a letter "M" in the current
font. \201The letter "M" is traditionally chosen because it is
typically represented by the widest )0 2 A()I(glyph)ES()EA( in the font, and other
characters' widths are typically fractions of an )0 207 1 A()I(em)ES()207 0 TN TL()Ec /AF f D(. In implementations providing
non-Roman characters with wider characters than "M," it is
permissible for another character to be the )0 2 A()I(implementation-defined)ES()EA(
reference character for this measure, and for "M" to be only a
fraction of an )0 207 1 A()I(em)ES()207 0 TN TL()Ec /AF f D( wide.\202
In a fixed width font, a line with )I(n)ES( characters is )I(n)ES(
)0 207 1 A()I(ems)ES()207 0 TN TL()Ec /AF f D( wide; in a variable
width font, )I(n)ES( )0 207 1 A()I(ems)ES()207 0 TN TL()Ec /AF f D(
is the expected upper bound on the width of such a line.)EP(
)0 P()WB 208 Sn()WB 208 Sn()BD(empty list)ES()EA(
)I(n.)ES( the )0 2 A()I(list)ES()EA( containing no )0 205 1 A()I(elements)ES()205 0 TN TL()Ec /AF f D(. See )0 2 A()I(\201\202)ES()EA(.)EP(
)0 P()WB 209 Sn()WB 209 Sn()BD(empty type)ES()EA(
)I(n.)ES( the )0 2 A()I(type)ES()EA( that contains no )0 205 1 A()I(elements)ES()205 0 TN TL()Ec /AF f D(, and that is a
)0 2 A()I(subtype)ES()EA(
of all )0 2 A()I(types)ES()EA( \201including itself\202. See
)0 2 A()I(nil)ES()EA(.)EP(
)0 P()WB 210 Sn()WB 210 Sn()BD(end of file)ES()EA(
)I(n.)ES( 1. the point in an )0 2 A()I(input)ES()EA( )0 2 A()I(stream)ES()EA( beyond which there is no
further data. Whether or not there is such a point on an )0 2 A()I(interactive
stream)ES()EA( is )0 2 A()I(implementation-defined)ES()EA(.
2. a )0 2 A()I(situation)ES()EA( that occurs upon an
attempt to obtain data from an )0 2 A()I(input)ES()EA( )0 2 A()I(stream)ES()EA( that is at the )0 210 1 A()I(end of file)ES()210 0 TN TL()Ec /AF f D([1].)EP(
)0 P()WB 211 Sn()WB 211 Sn()BD(environment)ES()EA(
)I(n.)ES( 1. a set of )0 2 A()I(bindings)ES()EA(. See )0 2 A(Section 3.1.1 \201Introduction to Environments\202)EA(.
2. an )0 212 1 A()I(environment
object)ES()212 0 TN TL()Ec /AF f D(. ")0 2 A()BD(macroexpand)ES()EA( takes an optional
environment argument.")EP(
)0 P()WB 212 Sn()WB 212 Sn()BD(environment object)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA(
representing a set of )0 2 A()I(lexical bindings)ES()EA(, used in
the processing of a )0 2 A()I(form)ES()EA( to provide meanings for )0 2 A()I(names)ES()EA( within that
)0 2 A()I(form)ES()EA(.
")0 2 A()BD(macroexpand)ES()EA( takes an optional
environment argument." \201The )0 2 A()I(object)ES()EA( )0 2 A()BD(nil)ES()EA( when used as an )0 212 1 A()I(environment object)ES()212 0 TN TL()Ec /AF f D( denotes
the )0 2 A()I(null lexical
environment)ES()EA(; the )0 2 A()I(values)ES()EA( of )0 213 1 A()I(environment parameters)ES()213 0 TN TL()Ec /AF f D( to
)0 2 A()I(macro
functions)ES()EA( are )0 2 A()I(objects)ES()EA( of )0 2 A()I(implementation-dependent)ES()EA(
nature which represent the )0 211 1 A()I(environment)ES()211 0 TN TL()Ec /AF f D([1] in which the corresponding
)0 2 A()I(macro
form)ES()EA( is to be expanded.\202 See )0 2 A(Section 3.1.1.4 \201Environment Objects\202)EA(.)EP(
)0 P()WB 213 Sn()WB 213 Sn()BD(environment parameter)ES()EA( )I(n.)ES(
A )0 2 A()I(parameter)ES()EA( in a )0 2 A()I(defining
form)ES()EA( f for which there is no corresponding )0 2 A()I(argument)ES()EA(;
instead, this )0 2 A()I(parameter)ES()EA( receives as its value
an )0 211 1 A()I(environment)ES()211 0 TN TL()Ec /AF f D(
)0 2 A()I(object)ES()EA(
which corresponds to the )0 2 A()I(lexical environment)ES()EA(
in which the )0 2 A()I(defining form)ES()EA( f
appeared.)EP(
)0 P()WB 214 Sn()WB 214 Sn()BD(error)ES()EA( )I(n.)ES( 1. \201only
in the phrase "is an error"\202 a )0 2 A()I(situation)ES()EA( in which the
semantics of a program are not specified, and in which the
consequences are undefined. 2. a )0 2 A()I(condition)ES()EA( which represents an
)0 214 1 A()I(error)ES()214 0 TN TL()Ec /AF f D( )0 2 A()I(situation)ES()EA(.
See )0 2 A(Section 1.4.2 \201Error
Terminology\202)EA(. 3. an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(error)ES()EA(.)EP(
)0 P()WB 215 Sn()WB 215 Sn()BD(error output)ES()EA(
)I(n.)ES( the )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA( which is the )0 2 A()I(value)ES()EA( of the
)0 2 A()I(dynamic
variable)ES()EA( )0 2 A()BD(*error-output*)ES()EA(.)EP(
)0 P()WB 216 Sn()WB 216 Sn()BD(escape)ES()EA( )I(n.)ES(,
)I(adj.)ES( 1. )I(n.)ES( a )0 2 A()I(single escape)ES()EA( or a )0 2 A()I(multiple
escape)ES()EA(. 2. )I(adj.)ES( )0 2 A()I(single escape)ES()EA( or )0 2 A()I(multiple
escape)ES()EA(.)EP(
)0 P()WB 217 Sn()WB 217 Sn()BD(establish)ES()EA(
)I(v.t.)ES( to build or bring into being a )0 2 A()I(binding)ES()EA(, a )0 2 A()I(declaration)ES()EA(, an )0 225 1 A()I(exit point)ES()225 0 TN TL()Ec /AF f D(, a )0 2 A()I(tag)ES()EA(, a )0 2 A()I(handler)ES()EA(, a
)0 2 A()I(restart)ES()EA(,
or an )0 211 1 A()I(environment)ES()211 0 TN TL()Ec /AF f D(. ")0 2 A()BD(let)ES()EA( establishes lexical bindings.")EP(
)0 P()WB 218 Sn()WB 218 Sn()BD(evaluate)ES()EA( )I(v.t.)ES(
\201a )0 2 A()I(form)ES()EA( or
an )0 2 A()I(implicit progn)ES()EA(\202 to )0 221 1 A()I(execute)ES()221 0 TN TL()Ec /AF f D( the )0 2 A()I(code)ES()EA( represented
by the )0 2 A()I(form)ES()EA(
\201or the series of )0 2 A()I(forms)ES()EA( making up the )0 2 A()I(implicit
progn)ES()EA(\202 by applying the rules of )0 219 1 A()I(evaluation)ES()219 0 TN TL()Ec /AF f D(, returning zero or more
values.)EP(
)0 P()WB 219 Sn()WB 219 Sn()BD(evaluation)ES()EA(
)I(n.)ES( a model whereby )0 2 A()I(forms)ES()EA( are )I(executed)ES(, returning
zero or more values. Such execution might be implemented directly
in one step by an interpreter or in two steps by first
)I(compiling)ES( the )0 2 A()I(form)ES()EA( and then )I(executing)ES( the
)I(compiled)ES( )0 2 A()I(code)ES()EA(; this choice is dependent both
on context and the nature of the )0 2 A()I(implementation)ES()EA(, but in any
case is not in general detectable by any program. The evaluation
model is designed in such a way that a )0 2 A()I(conforming
implementation)ES()EA( might legitimately have only a compiler and
no interpreter, or vice versa. See )0 2 A(Section 3.1.2 \201The Evaluation Model\202)EA(.)EP(
)0 P()WB 220 Sn()WB 220 Sn()BD(evaluation environment)ES()EA(
)I(n.)ES( a )0 2 A()I(run-time environment)ES()EA(
in which macro expanders and code specified by )0 2 A()BD(eval-when)ES()EA( to be evaluated
are evaluated. All evaluations initiated by the )0 2 A()I(compiler)ES()EA( take place in the
)0 220 1 A()I(evaluation
environment)ES()220 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 221 Sn()WB 221 Sn()BD(execute)ES()EA( )I(v.t.)ES(
)I(Trad.)ES( \201)0 2 A()I(code)ES()EA(\202 to perform the imperative
actions represented by the )0 2 A()I(code)ES()EA(.)EP(
)0 P()WB 222 Sn()WB 222 Sn()BD(execution
time)ES()EA( )I(n.)ES( the duration of time that )0 2 A()I(compiled
code)ES()EA( is being )I(executed)ES(.)EP(
)0 P()WB 223 Sn()WB 223 Sn()BD(exhaustive partition)ES()EA( )I(n.)ES(
\201of a )0 2 A()I(type)ES()EA(\202
a set of )0 2 A()I(pairwise)ES()EA( )0 2 A()I(disjoint)ES()EA( )0 2 A()I(types)ES()EA( that form an
)0 224 1 A()I(exhaustive
union)ES()224 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 224 Sn()WB 224 Sn()BD(exhaustive
union)ES()EA( )I(n.)ES( \201of a )0 2 A()I(type)ES()EA(\202 a set of )0 2 A()I(subtypes)ES()EA( of the )0 2 A()I(type)ES()EA(, whose union
contains all )0 205 1 A()I(elements)ES()205 0 TN TL()Ec /AF f D( of that )0 2 A()I(type)ES()EA(.)EP(
)0 P()WB 225 Sn()WB 225 Sn()BD(exit point)ES()EA(
)I(n.)ES( a point in a )0 2 A()I(control form)ES()EA( from which
\201e.g., )0 2 A()BD(block)ES()EA(\202, through which \201e.g., )0 2 A()BD(unwind-protect)ES()EA(\202, or to
which \201e.g., )0 2 A()BD(tagbody)ES()EA(\202 control and possibly
)0 2 A()I(values)ES()EA( can
be transferred both actively by using another )0 2 A()I(control form)ES()EA( and
passively through the normal control and data flow of )0 219 1 A()I(evaluation)ES()219 0 TN TL()Ec /AF f D(. ")0 2 A()BD(catch)ES()EA( and )0 2 A()BD(block)ES()EA( establish
bindings for exit points to which )0 2 A()BD(throw)ES()EA( and )0 2 A()BD(return-from)ES()EA(, respectively,
can transfer control and values; )0 2 A()BD(tagbody)ES()EA( establishes a binding for
an exit point with lexical extent to which )0 2 A()BD(go)ES()EA( can transfer control; and )0 2 A()BD(unwind-protect)ES()EA( establishes
an exit point through which control might be transferred by
operators such as )0 2 A()BD(throw)ES()EA(, )0 2 A()BD(return-from)ES()EA(, and )0 2 A()BD(go)ES()EA(.")EP(
)0 P()WB 226 Sn()WB 226 Sn()BD(explicit
return)ES()EA( )I(n.)ES( the act of transferring control \201and
possibly )0 2 A()I(values)ES()EA(\202 to a )0 2 A()I(block)ES()EA( by using )0 2 A()BD(return-from)ES()EA(
\201or )0 2 A()BD(return)ES()EA(\202.)EP(
)0 P()WB 227 Sn()WB 227 Sn()BD(explicit use)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(variable)ES()EA( V in a )0 2 A()I(form)ES()EA( F\202 a
reference to V that is directly apparent in the normal semantics of
F; i.e., that does not expose any undocumented details of the
)0 2 A()I(macro
expansion)ES()EA( of the )0 2 A()I(form)ES()EA( itself. References to V exposed
by expanding )0 2 A()I(subforms)ES()EA( of F are, however,
considered to be )0 227 1 A()I(explicit uses)ES()227 0 TN TL()Ec /AF f D( of V.)EP(
)0 P()WB 228 Sn()WB 228 Sn()BD(exponent
marker)ES()EA( )I(n.)ES( a character that is used in the textual
notation for a )0 2 A()I(float)ES()EA( to separate the mantissa from
the exponent. The characters defined as )0 228 1 A()I(exponent markers)ES()228 0 TN TL()Ec /AF f D( in the )0 2 A()I(standard
readtable)ES()EA( are shown in the next figure. For more
information, see )0 2 A(Section 2.1
\201Character Syntax\202)EA(. "The exponent marker `d' in `3.0d7'
indicates that this number is to be represented as a double
float.")EP(
) 6 47 PR(Marker  Meaning                                  
D or d  )0 2 A(double-float)EA(                             
E or e  )0 2 A(float)EA( \201see )0 2 A(*read-default-float-format*)EA(\202  
F or f  )0 2 A(single-float)EA(                             
L or l  )0 2 A(long-float)EA(                               
S or s  )0 2 A(short-float)EA()RP(
)0 P()BD(Figure 26-1. Exponent Markers)ES()EP(
)0 P()WB 229 Sn()WB 229 Sn()BD(export)ES()EA( )I(v.t.)ES( \201a
)0 2 A()I(symbol)ES()EA( in
a )0 2 A()I(package)ES()EA(\202 to add the )0 2 A()I(symbol)ES()EA( to the
list of )0 243 1 A()I(external
symbols)ES()243 0 TN TL()Ec /AF f D( of the )0 2 A()I(package)ES()EA(.)EP(
)0 P()WB 230 Sn()WB 230 Sn()BD(exported)ES()EA( )I(adj.)ES(
\201of a )0 2 A()I(symbol)ES()EA( in a )0 2 A()I(package)ES()EA(\202 being an )0 243 1 A()I(external symbol)ES()243 0 TN TL()Ec /AF f D( of
the )0 2 A()I(package)ES()EA(.)EP(
)0 P()WB 231 Sn()WB 231 Sn()BD(expressed adjustability)ES()EA(
)I(n.)ES( \201of an )0 2 A()I(array)ES()EA(\202 a )0 2 A()I(generalized boolean)ES()EA(
that is conceptually \201but not necessarily actually\202 associated with
the )0 2 A()I(array)ES()EA(,
representing whether the )0 2 A()I(array)ES()EA( is )0 235 1 A()I(expressly adjustable)ES()235 0 TN TL()Ec /AF f D(. See also
)0 2 A()I(actual
adjustability)ES()EA(.)EP(
)0 P()WB 232 Sn()WB 232 Sn()BD(expressed array element
type)ES()EA( )I(n.)ES( \201of an )0 2 A()I(array)ES()EA(\202 the )0 2 A()I(type)ES()EA( which is the )0 2 A()I(array
element type)ES()EA( implied by a )0 2 A()I(type declaration)ES()EA( for the
)0 2 A()I(array)ES()EA(, or
which is the requested )0 2 A()I(array element type)ES()EA( at
its time of creation, prior to any selection of an )0 2 A()I(upgraded array
element type)ES()EA(. \201Common Lisp does not provide a way of
detecting this )0 2 A()I(type)ES()EA( directly at run time, but an
)0 2 A()I(implementation)ES()EA( is
permitted to make assumptions about the )0 2 A()I(array)ES()EA('s contents and the operations
which may be performed on the )0 2 A()I(array)ES()EA( when this )0 2 A()I(type)ES()EA( is noted during code
analysis, even if those assumptions would not be valid in general
for the )0 2 A()I(upgraded array
element type)ES()EA( of the )0 232 1 A()I(expressed array element
type)ES()232 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 233 Sn()WB 233 Sn()BD(expressed complex part
type)ES()EA( )I(n.)ES( \201of a )0 2 A()I(complex)ES()EA(\202 the )0 2 A()I(type)ES()EA( which is implied as the
)0 2 A()I(complex part type)ES()EA( by a
)0 2 A()I(type
declaration)ES()EA( for the )0 2 A()I(complex)ES()EA(, or which is the
requested )0 2 A()I(complex part type)ES()EA( at
its time of creation, prior to any selection of an )0 2 A()I(upgraded complex part
type)ES()EA(. \201Common Lisp does not provide a way of detecting this
)0 2 A()I(type)ES()EA(
directly at run time, but an )0 2 A()I(implementation)ES()EA( is
permitted to make assumptions about the operations which may be
performed on the )0 2 A()I(complex)ES()EA( when this )0 2 A()I(type)ES()EA( is noted
during code analysis, even if those assumptions would not be valid
in general for the )0 2 A()I(upgraded complex part
type)ES()EA( of the )0 233 1 A()I(expressed complex part
type)ES()233 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 234 Sn()WB 234 Sn()BD(expression)ES()EA(
)I(n.)ES( 1. an )0 2 A()I(object)ES()EA(, often used to emphasize
the use of the )0 2 A()I(object)ES()EA( to encode or represent
information in a specialized format, such as program text. "The
second expression in a )0 2 A()BD(let)ES()EA( form is a list of bindings." 2.
the textual notation used to notate an )0 2 A()I(object)ES()EA( in a source file. "The
expression )TT('sample)ES( is equivalent to )TT(\201quote
sample\202)ES(.")EP(
)0 P()WB 235 Sn()WB 235 Sn()BD(expressly adjustable)ES()EA( )I(adj.)ES(
\201of an )0 2 A()I(array)ES()EA(\202 being )0 2 A()I(actually
adjustable)ES()EA( by virtue of an explicit request for this
characteristic having been made at the time of its creation. All
)0 2 A()I(arrays)ES()EA(
that are )0 235 1 A()I(expressly adjustable)ES()235 0 TN TL()Ec /AF f D( are )0 2 A()I(actually
adjustable)ES()EA(, but not necessarily vice versa.)EP(
)0 P()WB 236 Sn()WB 236 Sn()BD(extended
character)ES()EA( )I(n.)ES( a )0 2 A()I(character)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(extended-char)ES()EA(: a )0 2 A()I(character)ES()EA(
that is not a )0 2 A()I(base character)ES()EA(.)EP(
)0 P()WB 237 Sn()WB 237 Sn()BD(extended function
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 2 A()I(function)ES()EA(; that
is, an )0 2 A()I(object)ES()EA( that denotes a )0 2 A()I(function)ES()EA( and
that is one of: a )0 2 A()I(function name)ES()EA( \201denoting the
)0 2 A()I(function)ES()EA( it names in the )0 2 A()I(global
environment)ES()EA(\202, or a )0 2 A()I(function)ES()EA( \201denoting itself\202. The
consequences are undefined if a )0 2 A()I(function name)ES()EA( is used as an
)0 237 1 A()I(extended function
designator)ES()237 0 TN TL()Ec /AF f D( but it does not have a global definition as a
)0 2 A()I(function)ES()EA(, or if it is a )0 2 A()I(symbol)ES()EA( that has
a global definition as a )0 2 A()I(macro)ES()EA( or a )0 2 A()I(special form)ES()EA(. See also
)0 2 A()I(function
designator)ES()EA(.)EP(
)0 P()WB 238 Sn()WB 238 Sn()BD(extended lambda list)ES()EA( )I(n.)ES( a
list resembling an )0 2 A()I(ordinary lambda list)ES()EA(
in form and purpose, but offering additional syntax or
functionality not available in an )0 2 A()I(ordinary lambda
list)ES()EA(. ")0 2 A()BD(defmacro)ES()EA( uses extended lambda
lists.")EP(
)0 P()WB 239 Sn()WB 239 Sn()BD(extension)ES()EA(
)I(n.)ES( a facility in an )0 2 A()I(implementation)ES()EA( of Common
Lisp that is not specified by this standard.)EP(
)0 P()WB 240 Sn()WB 240 Sn()BD(extent)ES()EA( )I(n.)ES( the
interval of time during which a )0 2 A()I(reference)ES()EA( to an )0 2 A()I(object)ES()EA(, a
)0 2 A()I(binding)ES()EA(,
an )0 225 1 A()I(exit point)ES()225 0 TN TL()Ec /AF f D(, a
)0 2 A()I(tag)ES()EA(, a
)0 2 A()I(handler)ES()EA(,
a )0 2 A()I(restart)ES()EA(, or an )0 211 1 A()I(environment)ES()211 0 TN TL()Ec /AF f D( is
defined.)EP(
)0 P()WB 241 Sn()WB 241 Sn()BD(external file format)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(implementation-dependent)ES()EA(
nature which determines one of possibly several )0 2 A()I(implementation-dependent)ES()EA(
ways in which )0 2 A()I(characters)ES()EA( are encoded
externally in a )0 2 A()I(character)ES()EA( )0 2 A()I(file)ES()EA(.)EP(
)0 P()WB 242 Sn()WB 242 Sn()BD(external file format
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for an )0 241 1 A()I(external file
format)ES()241 0 TN TL()Ec /AF f D(; that is, an )0 2 A()I(object)ES()EA( that denotes an )0 241 1 A()I(external file
format)ES()241 0 TN TL()Ec /AF f D( and that is one of: the )0 2 A()I(symbol)ES()EA( )TT(:default)ES( \201denoting
an )0 2 A()I(implementation-dependent)ES()EA(
default )0 241 1 A()I(external file format)ES()241 0 TN TL()Ec /AF f D( that can
accomodate at least the )0 2 A()I(base characters)ES()EA(\202, some
other )0 2 A()I(object)ES()EA( defined by the )0 2 A()I(implementation)ES()EA( to be an
)0 242 1 A()I(external file format
designator)ES()242 0 TN TL()Ec /AF f D( \201denoting an )0 2 A()I(implementation-defined)ES()EA(
)0 241 1 A()I(external file
format)ES()241 0 TN TL()Ec /AF f D(\202, or some other )0 2 A()I(object)ES()EA( defined by the )0 2 A()I(implementation)ES()EA( to be an
)0 241 1 A()I(external file
format)ES()241 0 TN TL()Ec /AF f D( \201denoting itself\202.)EP(
)0 P()WB 243 Sn()WB 243 Sn()BD(external
symbol)ES()EA( )I(n.)ES( \201of a )0 2 A()I(package)ES()EA(\202 a )0 2 A()I(symbol)ES()EA( that is part of the
`external interface' to the )0 2 A()I(package)ES()EA( and that are
)I(inherited)ES([3] by any other )0 2 A()I(package)ES()EA( that )0 2 A()I(uses)ES()EA( the )0 2 A()I(package)ES()EA(. When using the
)0 2 A()I(Lisp
reader)ES()EA(, if a )0 2 A()I(package prefix)ES()EA( is used,
the )0 2 A()I(name)ES()EA( of
an )0 243 1 A()I(external
symbol)ES()243 0 TN TL()Ec /AF f D( is separated from the )0 2 A()I(package)ES()EA( )0 2 A()I(name)ES()EA( by a single )0 2 A()I(package marker)ES()EA( while
the )0 2 A()I(name)ES()EA( of
an )0 2 A()I(internal symbol)ES()EA( is
separated from the )0 2 A()I(package)ES()EA( )0 2 A()I(name)ES()EA( by a double )0 2 A()I(package marker)ES()EA(; see
)0 2 A(Section 2.3.4 \201Symbols as
Tokens\202)EA(.)EP(
)0 P()WB 244 Sn()WB 244 Sn()BD(externalizable object)ES()EA( )I(n.)ES(
an )0 2 A()I(object)ES()EA(
that can be used as a )0 2 A()I(literal)ES()EA( )0 2 A()I(object)ES()EA( in )0 2 A()I(code)ES()EA( to be processed by the
)0 2 A()I(file
compiler)ES()EA(.)EP(

)BD(F)ES(
)0 P()WB 245 Sn()WB 245 Sn()BD(false)ES()EA( )I(n.)ES( the
)0 2 A()I(symbol)ES()EA(
)0 2 A()BD(nil)ES()EA(, used to
represent the failure of a )0 2 A()I(predicate)ES()EA( test.)EP(
)0 P()WB 246 Sn()WB 246 Sn()BD(fbound)ES()EA( ['ef,band]
)I(adj.)ES( \201of a )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D(\202 )0 2 A()I(bound)ES()EA( in the )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( )0 2 A()I(namespace)ES()EA(.
\201The )0 2 A()I(names)ES()EA(
of )0 2 A()I(macros)ES()EA(
and )0 2 A()I(special operators)ES()EA( are
)0 246 1 A()I(fbound)ES()246 0 TN TL()Ec /AF f D(, but the
nature and )0 2 A()I(type)ES()EA( of the )0 2 A()I(object)ES()EA( which is their )0 2 A()I(value)ES()EA( is )0 2 A()I(implementation-dependent)ES()EA(.
Further, defining a )0 2 A()I(setf expander)ES()EA( )I(F)ES( does
not cause the )0 2 A()I(setf function)ES()EA(
)TT(\201setf)ES( )I(F)ES()TT(\202)ES( to become defined; as such, if
there is a such a definition of a )0 2 A()I(setf expander)ES()EA( )I(F)ES(, the
)0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(
)TT(\201setf)ES( )I(F)ES()TT(\202)ES( can be )0 246 1 A()I(fbound)ES()246 0 TN TL()Ec /AF f D( if and only if, by design or
coincidence, a function binding for )TT(\201setf)ES(
)I(F)ES()TT(\202)ES( has been independently established.\202 See the
)0 274 1 A()I(functions)ES()274 0 TN TL()Ec /AF f D( )0 2 A()BD(fboundp)ES()EA( and
)0 2 A()BD(symbol-function)ES()EA(.)EP(
)0 P()WB 247 Sn()WB 247 Sn()BD(feature)ES()EA( )I(n.)ES( 1.
an aspect or attribute of Common Lisp, of the )0 2 A()I(implementation)ES()EA(, or of
the )0 2 A()I(environment)ES()EA(. 2. a )0 2 A()I(symbol)ES()EA( that
names a )0 247 1 A()I(feature)ES()247 0 TN TL()Ec /AF f D([1].
See )0 2 A(Section 24.1.2 \201Features\202)EA(.
"The )TT(:ansi-cl)ES( feature is present in all conforming
implementations.")EP(
)0 P()WB 248 Sn()WB 248 Sn()BD(feature
expression)ES()EA( )I(n.)ES( A boolean combination of )0 247 1 A()I(features)ES()247 0 TN TL()Ec /AF f D( used by the
)TT(#+)ES( and )TT(#-)ES( )0 2 A()I(reader macros)ES()EA( in order to
direct conditional )I(reading)ES( of )0 2 A()I(expressions)ES()EA( by the )0 2 A()I(Lisp
reader)ES()EA(. See )0 2 A(Section
24.1.2.1 \201Feature Expressions\202)EA(.)EP(
)0 P()WB 249 Sn()WB 249 Sn()BD(features
list)ES()EA( )I(n.)ES( the )0 2 A()I(list)ES()EA( that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*features*)ES()EA(.)EP(
)0 P()WB 250 Sn()WB 250 Sn()BD(file)ES()EA( )I(n.)ES( a named entry
in a )0 255 1 A()I(file
system)ES()255 0 TN TL()Ec /AF f D(, having an )0 2 A()I(implementation-defined)ES()EA(
nature.)EP(
)0 P()WB 251 Sn()WB 251 Sn()BD(file
compiler)ES()EA( )I(n.)ES( any )0 2 A()I(compiler)ES()EA( which )0 2 A()I(compiles)ES()EA(
)0 2 A()I(source
code)ES()EA( contained in a )0 250 1 A()I(file)ES()250 0 TN TL()Ec /AF f D(, producing a )0 2 A()I(compiled file)ES()EA( as output.
The )0 2 A()BD(compile-file)ES()EA( function is the
only interface to such a )0 2 A()I(compiler)ES()EA( provided by Common
Lisp, but there might be other, )0 2 A()I(implementation-defined)ES()EA(
mechanisms for invoking the )0 251 1 A()I(file compiler)ES()251 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 252 Sn()WB 252 Sn()BD(file
position)ES()EA( )I(n.)ES( \201in a )0 2 A()I(stream)ES()EA(\202 a non-negative )0 2 A()I(integer)ES()EA( that
represents a position in the )0 2 A()I(stream)ES()EA(. Not all )0 2 A()I(streams)ES()EA( are able
to represent the notion of )0 252 1 A()I(file position)ES()252 0 TN TL()Ec /AF f D(; in the description of
any )0 2 A()I(operator)ES()EA( which manipulates
)0 252 1 A()I(file
positions)ES()252 0 TN TL()Ec /AF f D(, the behavior for )0 2 A()I(streams)ES()EA( that don't have this
notion must be explicitly stated. For )0 2 A()I(binary)ES()EA( )0 2 A()I(streams)ES()EA(, the )0 252 1 A()I(file position)ES()252 0 TN TL()Ec /AF f D( represents the
number of preceding )0 2 A()I(bytes)ES()EA( in the )0 2 A()I(stream)ES()EA(. For )0 2 A()I(character)ES()EA(
)0 2 A()I(streams)ES()EA(,
the constraint is more relaxed: )0 252 1 A()I(file positions)ES()252 0 TN TL()Ec /AF f D( must increase
monotonically, the amount of the increase between )0 252 1 A()I(file positions)ES()252 0 TN TL()Ec /AF f D(
corresponding to any two successive characters in the )0 2 A()I(stream)ES()EA( is
)0 2 A()I(implementation-dependent)ES()EA(.)EP(
)0 P()WB 253 Sn()WB 253 Sn()BD(file position designator)ES()EA(
)I(n.)ES( \201in a )0 2 A()I(stream)ES()EA(\202 a )0 2 A()I(designator)ES()EA( for a )0 252 1 A()I(file position)ES()252 0 TN TL()Ec /AF f D( in that
)0 2 A()I(stream)ES()EA(;
that is, the symbol )TT(:start)ES( \201denoting )TT(0)ES(, the first
)0 252 1 A()I(file position)ES()252 0 TN TL()Ec /AF f D(
in that )0 2 A()I(stream)ES()EA(\202, the symbol )TT(:end)ES(
\201denoting the last )0 252 1 A()I(file position)ES()252 0 TN TL()Ec /AF f D( in that )0 2 A()I(stream)ES()EA(; i.e.,
the position following the last )0 2 A()I(element)ES()EA( of the )0 2 A()I(stream)ES()EA(\202, or a
)0 252 1 A()I(file position)ES()252 0 TN TL()Ec /AF f D(
\201denoting itself\202.)EP(
)0 P()WB 254 Sn()WB 254 Sn()BD(file stream)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(file-stream)ES()EA(.)EP(
)0 P()WB 255 Sn()WB 255 Sn()BD(file system)ES()EA(
)I(n.)ES( a facility which permits aggregations of data to be
stored in named )0 250 1 A()I(files)ES()250 0 TN TL()Ec /AF f D(
on some medium that is external to the )0 2 A()I(Lisp image)ES()EA( and that therefore
persists from )0 2 A()I(session)ES()EA( to )0 2 A()I(session)ES()EA(.)EP(
)0 P()WB 256 Sn()WB 256 Sn()BD(filename)ES()EA( )I(n.)ES( a
handle, not necessarily ever directly represented as an )0 2 A()I(object)ES()EA(, that can
be used to refer to a )0 250 1 A()I(file)ES()250 0 TN TL()Ec /AF f D( in a )0 255 1 A()I(file system)ES()255 0 TN TL()Ec /AF f D(. )0 2 A()I(Pathnames)ES()EA( and )0 2 A()I(namestrings)ES()EA(
are two kinds of )0 2 A()I(objects)ES()EA( that substitute for
)0 256 1 A()I(filenames)ES()256 0 TN TL()Ec /AF f D( in Common
Lisp.)EP(
)0 P()WB 257 Sn()WB 257 Sn()BD(fill pointer)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(vector)ES()EA(\202 an )0 2 A()I(integer)ES()EA( associated with a
)0 2 A()I(vector)ES()EA(
that represents the index above which no )0 2 A()I(elements)ES()EA( are )0 2 A()I(active)ES()EA(. \201A )0 257 1 A()I(fill pointer)ES()257 0 TN TL()Ec /AF f D( is a
non-negative )0 2 A()I(integer)ES()EA( no larger than the total
number of )0 2 A()I(elements)ES()EA( in the )0 2 A()I(vector)ES()EA(. Not all
)0 2 A()I(vectors)ES()EA(
have )0 257 1 A()I(fill
pointers)ES()257 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 258 Sn()WB 258 Sn()BD(finite)ES()EA( )I(adj.)ES( \201of a
)0 2 A()I(type)ES()EA(\202
having a finite number of )0 2 A()I(elements)ES()EA(. "The type specifier
)TT(\201integer 0 5\202)ES( denotes a finite type, but the type
specifiers )0 2 A()BD(integer)ES()EA( and )TT(\201integer 0\202)ES(
do not.")EP(
)0 P()WB 259 Sn()WB 259 Sn()BD(fixnum)ES()EA( )I(n.)ES( an
)0 2 A()I(integer)ES()EA(
of )0 2 A()I(type)ES()EA(
)0 2 A()BD(fixnum)ES()EA(.)EP(
)0 P()WB 260 Sn()WB 260 Sn()BD(float)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(float)ES()EA(.)EP(
)0 P()WB 261 Sn()WB 261 Sn()BD(for-value)ES()EA(
)I(adj.)ES( \201of a )0 2 A()I(reference)ES()EA( to a )0 2 A()I(binding)ES()EA(\202 being
a )0 2 A()I(reference)ES()EA( that )0 2 A()I(reads)ES()EA([1] the
)0 2 A()I(value)ES()EA( of
the )0 2 A()I(binding)ES()EA(.)EP(
)0 P()WB 262 Sn()WB 262 Sn()BD(form)ES()EA( )I(n.)ES( 1. any
)0 2 A()I(object)ES()EA(
meant to be )I(evaluated)ES(. 2. a )0 2 A()I(symbol)ES()EA(, a )0 2 A()I(compound form)ES()EA(, or a
)0 2 A()I(self-evaluating
object)ES()EA(. 3. \201for an )0 2 A()I(operator)ES()EA(, as in
"<<)I(operator)ES(>> )0 262 1 A()I(form)ES()262 0 TN TL()Ec /AF f D("\202 a )0 2 A()I(compound form)ES()EA( having that
)0 2 A()I(operator)ES()EA( as its first element.
"A )0 2 A()BD(quote)ES()EA(
form is a constant form.")EP(
)0 P()WB 263 Sn()WB 263 Sn()BD(formal
argument)ES()EA( )I(n.)ES( )I(Trad.)ES( a )0 2 A()I(parameter)ES()EA(.)EP(
)0 P()WB 264 Sn()WB 264 Sn()BD(formal
parameter)ES()EA( )I(n.)ES( )I(Trad.)ES( a )0 2 A()I(parameter)ES()EA(.)EP(
)0 P()WB 265 Sn()WB 265 Sn()BD(format)ES()EA( )I(v.t.)ES( \201a
)0 267 1 A()I(format
control)ES()267 0 TN TL()Ec /AF f D( and )0 266 1 A()I(format arguments)ES()266 0 TN TL()Ec /AF f D(\202 to perform output
as if by )0 2 A()BD(format)ES()EA(, using the )0 269 1 A()I(format string)ES()269 0 TN TL()Ec /AF f D( and
)0 266 1 A()I(format
arguments)ES()266 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 266 Sn()WB 266 Sn()BD(format
argument)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( which is used as data by
functions such as )0 2 A()BD(format)ES()EA( which interpret )0 267 1 A()I(format controls)ES()267 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 267 Sn()WB 267 Sn()BD(format
control)ES()EA( )I(n.)ES( a )0 269 1 A()I(format string)ES()269 0 TN TL()Ec /AF f D(, or a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( that obeys the )0 2 A()I(argument)ES()EA(
conventions for a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( returned by the )0 2 A()BD(formatter)ES()EA( )0 2 A()I(macro)ES()EA(. See
)0 2 A(Section 22.2.1.3 \201Compiling Format
Strings\202)EA(.)EP(
)0 P()WB 268 Sn()WB 268 Sn()BD(format
directive)ES()EA( )I(n.)ES( 1. a sequence of )0 2 A()I(characters)ES()EA( in a )0 269 1 A()I(format string)ES()269 0 TN TL()Ec /AF f D( which
is introduced by a )0 2 A()I(tilde)ES()EA(, and which is specially
interpreted by )0 2 A()I(code)ES()EA( which processes )0 269 1 A()I(format strings)ES()269 0 TN TL()Ec /AF f D( to
mean that some special operation should be performed, possibly
involving data supplied by the )0 266 1 A()I(format arguments)ES()266 0 TN TL()Ec /AF f D( that accompanied the
)0 269 1 A()I(format string)ES()269 0 TN TL()Ec /AF f D(.
See the )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(
)0 2 A()BD(format)ES()EA(.
"In )TT("~D base 10 = ~8R")ES(, the character sequences
`)TT(~D)ES(' and `)TT(~8R)ES(' are format directives." 2. the
conceptual category of all )0 268 1 A()I(format directives)ES()268 0 TN TL()Ec /AF f D([1] which use the
same dispatch character. "Both )TT("~3d")ES( and )TT("~3,'0D")ES(
are valid uses of the `)TT(~D)ES(' format directive.")EP(
)0 P()WB 269 Sn()WB 269 Sn()BD(format
string)ES()EA( )I(n.)ES( a )0 2 A()I(string)ES()EA( which can contain both
ordinary text and )0 268 1 A()I(format directives)ES()268 0 TN TL()Ec /AF f D(, and which is used
in conjunction with )0 266 1 A()I(format arguments)ES()266 0 TN TL()Ec /AF f D( to describe how text
output should be formatted by certain functions, such as )0 2 A()BD(format)ES()EA(.)EP(
)0 P()WB 270 Sn()WB 270 Sn()BD(free
declaration)ES()EA( )I(n.)ES( a declaration that is not a )0 2 A()I(bound
declaration)ES()EA(. See )0 2 A()BD(declare)ES()EA(.)EP(
)0 P()WB 271 Sn()WB 271 Sn()BD(fresh)ES()EA( )I(adj.)ES( 1. \201of
an )0 2 A()I(object)ES()EA(
)I(yielded)ES( by a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(\202 having been newly-allocated by
that )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(. \201The
caller of a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( that returns a )0 271 1 A()I(fresh)ES()271 0 TN TL()Ec /AF f D( )0 2 A()I(object)ES()EA( may freely modify the
)0 2 A()I(object)ES()EA(
without fear that such modification will compromise the future
correct behavior of that )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(.\202 2. \201of a )0 2 A()I(binding)ES()EA( for a )0 2 A()I(name)ES()EA(\202
newly-allocated; not shared with other )0 2 A()I(bindings)ES()EA( for that )0 2 A()I(name)ES()EA(.)EP(
)0 P()WB 272 Sn()WB 272 Sn()BD(freshline)ES()EA(
)I(n.)ES( a conceptual operation on a )0 2 A()I(stream)ES()EA(, implemented by the )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( )0 2 A()BD(fresh-line)ES()EA(
and by the )0 268 1 A()I(format
directive)ES()268 0 TN TL()Ec /AF f D( )TT(~&)ES(, which advances the display
position to the beginning of the next line \201as if a )0 2 A()I(newline)ES()EA( had
been typed, or the )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( )0 2 A()BD(terpri)ES()EA( had been called\202 unless the
)0 2 A()I(stream)ES()EA( is
already known to be positioned at the beginning of a line. Unlike
)0 2 A()I(newline)ES()EA(,
)0 272 1 A()I(freshline)ES()272 0 TN TL()Ec /AF f D( is not a
)0 2 A()I(character)ES()EA(.)EP(
)0 P()WB 273 Sn()WB 273 Sn()BD(funbound)ES()EA( ['efunband]
)I(n.)ES( \201of a )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D(\202 not )0 246 1 A()I(fbound)ES()246 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 274 Sn()WB 274 Sn()BD(function)ES()EA( )I(n.)ES(
1. an )0 2 A()I(object)ES()EA( representing code, which
can be )I(called)ES( with zero or more )0 2 A()I(arguments)ES()EA(, and which produces
zero or more )0 2 A()I(values)ES()EA(. 2. an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(function)ES()EA(.)EP(
)0 P()WB 275 Sn()WB 275 Sn()BD(function block name)ES()EA( )I(n.)ES( \201of
a )0 279 1 A()I(function
name)ES()279 0 TN TL()Ec /AF f D(\202 The )0 2 A()I(symbol)ES()EA( that would be used as the
name of an )0 2 A()I(implicit block)ES()EA( which
surrounds the body of a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( having that )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D(. If the )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D( is a
)0 2 A()I(symbol)ES()EA(,
its )0 275 1 A()I(function
block name)ES()275 0 TN TL()Ec /AF f D( is the )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D( itself. If the )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D( is a
)0 2 A()I(list)ES()EA( whose
)0 2 A()I(car)ES()EA( is
)0 2 A()BD(setf)ES()EA( and
whose )0 2 A()I(cadr)ES()EA(
is a )0 2 A()I(symbol)ES()EA(, its )0 275 1 A()I(function block name)ES()275 0 TN TL()Ec /AF f D( is the
)0 2 A()I(symbol)ES()EA(
that is the )0 2 A()I(cadr)ES()EA( of the )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D(. An )0 2 A()I(implementation)ES()EA( which
supports additional kinds of )0 279 1 A()I(function names)ES()279 0 TN TL()Ec /AF f D( must specify for each
how the corresponding )0 275 1 A()I(function block name)ES()275 0 TN TL()Ec /AF f D( is
computed.)EP(
)0 P()WB 276 Sn()WB 276 Sn()BD(function
cell)ES()EA( )I(n.)ES( )I(Trad.)ES( \201of a )0 2 A()I(symbol)ES()EA(\202 The )0 2 A()I(place)ES()EA( which holds the
)I(definition)ES( of the global )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( )0 2 A()I(binding)ES()EA(, if any, named by that
)0 2 A()I(symbol)ES()EA(,
and which is )I(accessed)ES( by )0 2 A()BD(symbol-function)ES()EA(. See
)0 2 A()I(cell)ES()EA(.)EP(
)0 P()WB 277 Sn()WB 277 Sn()BD(function designator)ES()EA( )I(n.)ES( a
)0 2 A()I(designator)ES()EA( for a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(; that is, an
)0 2 A()I(object)ES()EA(
that denotes a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( and that is one of: a )0 2 A()I(symbol)ES()EA( \201denoting
the )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( named
by that )0 2 A()I(symbol)ES()EA( in the )0 2 A()I(global
environment)ES()EA(\202, or a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( \201denoting itself\202. The consequences
are undefined if a )0 2 A()I(symbol)ES()EA( is used as a )0 277 1 A()I(function
designator)ES()277 0 TN TL()Ec /AF f D( but it does not have a global definition as a
)0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(, or it has
a global definition as a )0 2 A()I(macro)ES()EA( or a )0 2 A()I(special form)ES()EA(. See also
)0 2 A()I(extended function
designator)ES()EA(.)EP(
)0 P()WB 278 Sn()WB 278 Sn()BD(function
form)ES()EA( )I(n.)ES( a )0 262 1 A()I(form)ES()262 0 TN TL()Ec /AF f D( that is a )0 2 A()I(list)ES()EA( and that has a first element
which is the )0 2 A()I(name)ES()EA( of a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( to be called on )0 2 A()I(arguments)ES()EA( which are the
result of )I(evaluating)ES( subsequent elements of the )0 278 1 A()I(function form)ES()278 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 279 Sn()WB 279 Sn()BD(function
name)ES()EA( )I(n.)ES( 1. \201in an )0 2 A()I(environment)ES()EA(\202 A )0 2 A()I(symbol)ES()EA( or a
)0 2 A()I(list)ES()EA(
)TT(\201setf)ES( )I(symbol)ES()TT(\202)ES( that is the )0 2 A()I(name)ES()EA( of a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( in that )0 2 A()I(environment)ES()EA(. 2. A )0 2 A()I(symbol)ES()EA( or a
)0 2 A()I(list)ES()EA(
)TT(\201setf)ES( )I(symbol)ES()TT(\202)ES(.)EP(
)0 P()WB 280 Sn()WB 280 Sn()BD(functional evaluation)ES()EA( )I(n.)ES(
the process of extracting a )0 281 1 A()I(functional value)ES()281 0 TN TL()Ec /AF f D( from a )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D( or a
)0 2 A()I(lambda
expression)ES()EA(. The evaluator performs )0 280 1 A()I(functional evaluation)ES()280 0 TN TL()Ec /AF f D(
implicitly when it encounters a )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D( or a )0 2 A()I(lambda expression)ES()EA(
in the )0 2 A()I(car)ES()EA(
of a )0 2 A()I(compound form)ES()EA(, or
explicitly when it encounters a )0 2 A()BD(function)ES()EA( )0 2 A()I(special form)ES()EA(. Neither a use
of a )0 2 A()I(symbol)ES()EA( as a )0 277 1 A()I(function designator)ES()277 0 TN TL()Ec /AF f D( nor a
use of the )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(
)0 2 A()BD(symbol-function)ES()EA( to
extract the )0 281 1 A()I(functional value)ES()281 0 TN TL()Ec /AF f D( of a )0 2 A()I(symbol)ES()EA( is
considered a )0 280 1 A()I(functional evaluation)ES()280 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 281 Sn()WB 281 Sn()BD(functional
value)ES()EA( )I(n.)ES( 1. \201of a )0 279 1 A()I(function name)ES()279 0 TN TL()Ec /AF f D( N in an )0 2 A()I(environment)ES()EA(
E\202 The )0 2 A()I(value)ES()EA( of the )0 2 A()I(binding)ES()EA( named N in the
)0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( )0 2 A()I(namespace)ES()EA( for
)0 2 A()I(environment)ES()EA( E; that is, the
contents of the )0 276 1 A()I(function cell)ES()276 0 TN TL()Ec /AF f D( named N in )0 2 A()I(environment)ES()EA(
E. 2. \201of an )0 246 1 A()I(fbound)ES()246 0 TN TL()Ec /AF f D(
)0 2 A()I(symbol)ES()EA( S\202
the contents of the )0 2 A()I(symbol)ES()EA('s )0 276 1 A()I(function cell)ES()276 0 TN TL()Ec /AF f D(; that is, the )0 2 A()I(value)ES()EA( of the
)0 2 A()I(binding)ES()EA(
named S in the )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D( )0 2 A()I(namespace)ES()EA( of the )0 2 A()I(global
environment)ES()EA(. \201A )0 2 A()I(name)ES()EA( that is a )0 2 A()I(macro name)ES()EA( in the )0 2 A()I(global
environment)ES()EA( or is a )0 2 A()I(special operator)ES()EA( might
or might not be )0 246 1 A()I(fbound)ES()246 0 TN TL()Ec /AF f D(. But if S is such a )0 2 A()I(name)ES()EA( and is )0 246 1 A()I(fbound)ES()246 0 TN TL()Ec /AF f D(, the specific nature of its
)0 281 1 A()I(functional
value)ES()281 0 TN TL()Ec /AF f D( is )0 2 A()I(implementation-dependent)ES()EA(;
in particular, it might or might not be a )0 274 1 A()I(function)ES()274 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 282 Sn()WB 282 Sn()BD(further compilation)ES()EA( )I(n.)ES(
)0 2 A()I(implementation-dependent)ES()EA(
compilation beyond )0 2 A()I(minimal compilation)ES()EA(.
Further compilation is permitted to take place at )0 2 A()I(run time)ES()EA(.
"Block compilation and generation of machine-specific instructions
are examples of further compilation.")EP(

)BD(G)ES(
)0 P()WB 283 Sn()WB 283 Sn()BD(general)ES()EA( )I(adj.)ES(
\201of an )0 2 A()I(array)ES()EA(\202 having )0 2 A()I(element type)ES()EA( )0 2 A()BD(t)ES()EA(, and consequently able
to have any )0 2 A()I(object)ES()EA( as an )0 2 A()I(element)ES()EA(.)EP(
)0 P()WB 284 Sn()WB 284 Sn()BD(generalized boolean)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA(
used as a truth value, where the symbol )0 2 A()BD(nil)ES()EA( represents )0 2 A()I(false)ES()EA( and all other )0 2 A()I(objects)ES()EA(
represent )0 2 A()I(true)ES()EA(. See )0 2 A()I(boolean)ES()EA(.)EP(
)0 P()WB 285 Sn()WB 285 Sn()BD(generalized instance)ES()EA( )I(n.)ES(
\201of a )0 2 A()I(class)ES()EA(\202 an )0 2 A()I(object)ES()EA( the )0 2 A()I(class)ES()EA( of which is either that
)0 2 A()I(class)ES()EA(
itself, or some subclass of that )0 2 A()I(class)ES()EA(. \201Because of the
correspondence between types and classes, the term "generalized
instance of X" implies "object of type X" and in cases where X is a
)0 2 A()I(class)ES()EA( \201or
)0 2 A()I(class)ES()EA(
)0 2 A()I(name)ES()EA(\202 the
reverse is also true. The former terminology emphasizes the view of
X as a )0 2 A()I(class)ES()EA( while the latter emphasizes
the view of X as a )0 2 A()I(type specifier)ES()EA(.\202)EP(
)0 P()WB 286 Sn()WB 286 Sn()BD(generalized reference)ES()EA( )I(n.)ES(
a reference to a location storing an )0 2 A()I(object)ES()EA( as if to a )0 2 A()I(variable)ES()EA(.
\201Such a reference can be either to )0 2 A()I(read)ES()EA( or )0 2 A()I(write)ES()EA( the location.\202 See )0 2 A(Section 5.1 \201Generalized Reference\202)EA(.
See also )0 2 A()I(place)ES()EA(.)EP(
)0 P()WB 287 Sn()WB 287 Sn()BD(generalized synonym stream)ES()EA(
)I(n.)ES( \201with a )0 2 A()I(synonym stream
symbol)ES()EA(\202 1. \201to a )0 2 A()I(stream)ES()EA(\202 a )0 2 A()I(synonym stream)ES()EA( to the
)0 2 A()I(stream)ES()EA(,
or a )0 2 A()I(composite stream)ES()EA( which
has as a target a )0 287 1 A()I(generalized synonym stream)ES()287 0 TN TL()Ec /AF f D(
to the )0 2 A()I(stream)ES()EA(. 2. \201to a )0 2 A()I(symbol)ES()EA(\202 a
)0 2 A()I(synonym
stream)ES()EA( to the )0 2 A()I(symbol)ES()EA(, or a )0 2 A()I(composite stream)ES()EA(
which has as a target a )0 287 1 A()I(generalized synonym stream)ES()287 0 TN TL()Ec /AF f D(
to the )0 2 A()I(symbol)ES()EA(.)EP(
)0 P()WB 288 Sn()WB 288 Sn()BD(generic
function)ES()EA( )I(n.)ES( a )0 2 A()I(function)ES()EA( whose behavior depends
on the )0 2 A()I(classes)ES()EA( or identities of the
arguments supplied to it and whose parts include, among other
things, a set of )0 2 A()I(methods)ES()EA(, a )0 2 A()I(lambda list)ES()EA(, and a
)0 2 A()I(method combination)ES()EA(
type.)EP(
)0 P()WB 289 Sn()WB 289 Sn()BD(generic function lambda
list)ES()EA( )I(n.)ES( A )0 2 A()I(lambda list)ES()EA( that is used to
describe data flow into a )0 288 1 A()I(generic function)ES()288 0 TN TL()Ec /AF f D(. See )0 2 A(Section 3.4.2 \201Generic Function Lambda
Lists\202)EA(.)EP(
)0 P()WB 290 Sn()WB 290 Sn()BD(gensym)ES()EA( )I(n.)ES(
)I(Trad.)ES( an )0 2 A()I(uninterned)ES()EA( )0 2 A()I(symbol)ES()EA(. See the )0 2 A()I(function)ES()EA(
)0 2 A()BD(gensym)ES()EA(.)EP(
)0 P()WB 291 Sn()WB 291 Sn()BD(global
declaration)ES()EA( )I(n.)ES( a )0 2 A()I(form)ES()EA( that makes certain kinds of
information about code globally available; that is, a )0 2 A()BD(proclaim)ES()EA(
)0 2 A()I(form)ES()EA( or a
)0 2 A()BD(declaim)ES()EA(
)0 2 A()I(form)ES()EA(.)EP(
)0 P()WB 292 Sn()WB 292 Sn()BD(global
environment)ES()EA( )I(n.)ES( that part of an )0 2 A()I(environment)ES()EA( that
contains )0 2 A()I(bindings)ES()EA( with )0 2 A()I(indefinite scope)ES()EA(
and )0 2 A()I(indefinite extent)ES()EA(.)EP(
)0 P()WB 293 Sn()WB 293 Sn()BD(global
variable)ES()EA( )I(n.)ES( a )0 2 A()I(dynamic variable)ES()EA( or a
)0 2 A()I(constant variable)ES()EA(.)EP(
)0 P()WB 294 Sn()WB 294 Sn()BD(glyph)ES()EA( )I(n.)ES( a visual
representation. "Graphic characters have associated glyphs.")EP(
)0 P()WB 295 Sn()WB 295 Sn()BD(go)ES()EA( )I(v.)ES( to transfer control
to a )0 296 1 A()I(go point)ES()296 0 TN TL()Ec /AF f D(. See
the )0 2 A()I(special operator)ES()EA( )0 2 A()BD(go)ES()EA(.)EP(
)0 P()WB 296 Sn()WB 296 Sn()BD(go point)ES()EA( one of
possibly several )0 2 A()I(exit points)ES()EA( that are
)I(established)ES( by )0 2 A()BD(tagbody)ES()EA( \201or other abstractions,
such as )0 2 A()BD(prog)ES()EA(, which are built from )0 2 A()BD(tagbody)ES()EA(\202.)EP(
)0 P()WB 297 Sn()WB 297 Sn()BD(go tag)ES()EA( )I(n.)ES( the
)0 2 A()I(symbol)ES()EA( or
)0 2 A()I(integer)ES()EA(
that, within the )0 2 A()I(lexical scope)ES()EA( of a )0 2 A()BD(tagbody)ES()EA( )0 2 A()I(form)ES()EA(, names an
)0 2 A()I(exit
point)ES()EA( )I(established)ES( by that )0 2 A()BD(tagbody)ES()EA( )0 2 A()I(form)ES()EA(.)EP(
)0 P()WB 298 Sn()WB 298 Sn()BD(graphic)ES()EA( )I(adj.)ES(
\201of a )0 2 A()I(character)ES()EA(\202 being a "printing"
or "displayable" )0 2 A()I(character)ES()EA( that has a standard
visual representation as a single )0 294 1 A()I(glyph)ES()294 0 TN TL()Ec /AF f D(, such as )TT(A)ES( or )TT(*)ES( or
)TT(=)ES(. )0 2 A()I(Space)ES()EA( is defined to be )0 298 1 A()I(graphic)ES()298 0 TN TL()Ec /AF f D(. Of the )0 2 A()I(standard
characters)ES()EA(, all but )0 2 A()I(newline)ES()EA( are )0 298 1 A()I(graphic)ES()298 0 TN TL()Ec /AF f D(. See )0 2 A()I(non-graphic)ES()EA(.)EP(

)BD(H)ES(
)0 P()WB 299 Sn()WB 299 Sn()BD(handle)ES()EA( )I(v.)ES( \201of a
)0 2 A()I(condition)ES()EA( being
)I(signaled)ES(\202 to perform a non-local transfer of control,
terminating the ongoing )I(signaling)ES( of the )0 2 A()I(condition)ES()EA(.)EP(
)0 P()WB 300 Sn()WB 300 Sn()BD(handler)ES()EA( )I(n.)ES( a
)0 2 A()I(condition handler)ES()EA(.)EP(
)0 P()WB 301 Sn()WB 301 Sn()BD(hash table)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(hash-table)ES()EA(, which provides a
mapping from )0 2 A()I(keys)ES()EA( to )0 2 A()I(values)ES()EA(.)EP(
)0 P()WB 302 Sn()WB 302 Sn()BD(home package)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(symbol)ES()EA(\202 the )0 2 A()I(package)ES()EA(, if any, which is
contents of the )0 2 A()I(package cell)ES()EA( of the )0 2 A()I(symbol)ES()EA(, and
which dictates how the )0 2 A()I(Lisp printer)ES()EA( prints the
)0 2 A()I(symbol)ES()EA(
when it is not )0 2 A()I(accessible)ES()EA( in the )0 2 A()I(current
package)ES()EA(. \201)0 2 A()I(Symbols)ES()EA( which have )0 2 A()BD(nil)ES()EA( in their )0 2 A()I(package
cell)ES()EA( are said to have no )0 302 1 A()I(home package)ES()302 0 TN TL()Ec /AF f D(, and also to be )0 2 A()I(apparently
uninterned)ES()EA(.\202)EP(

)BD(I)ES(
)0 P()WB 303 Sn()WB 303 Sn()BD(I/O customization variable)ES()EA(
)I(n.)ES( one of the )0 2 A()I(stream variables)ES()EA( in the
next figure, or some other \201)0 309 1 A()I(implementation-defined)ES()309 0 TN TL()Ec /AF f D(\202
)0 2 A()I(stream
variable)ES()EA( that is defined by the )0 307 1 A()I(implementation)ES()307 0 TN TL()Ec /AF f D( to be an )0 303 1 A()I(I/O
customization variable)ES()303 0 TN TL()Ec /AF f D(.)EP(
) 2 51 PR(*debug-io*        *error-io*         query-io*       
*standard-input*  *standard-output*  *trace-output*)RP(
)0 P()BD(Figure 26-2. Standardized I/O Customization Variables)ES()EP(
)0 P()WB 304 Sn()WB 304 Sn()BD(identical)ES()EA(
)I(adj.)ES( the )0 2 A()I(same)ES()EA( under )0 2 A()BD(eq)ES()EA(.)EP(
)0 P()WB 305 Sn()WB 305 Sn()BD(identifier)ES()EA(
)I(n.)ES( 1. a )0 2 A()I(symbol)ES()EA( used to identify or to
distinguish )0 2 A()I(names)ES()EA(. 2. a )0 2 A()I(string)ES()EA( used the same way.)EP(
)0 P()WB 306 Sn()WB 306 Sn()BD(immutable)ES()EA(
)I(adj.)ES( not subject to change, either because no )0 2 A()I(operator)ES()EA( is
provided which is capable of effecting such change or because some
constraint exists which prohibits the use of an )0 2 A()I(operator)ES()EA( that might
otherwise be capable of effecting such a change. Except as
explicitly indicated otherwise, )0 307 1 A()I(implementations)ES()307 0 TN TL()Ec /AF f D( are not required to
detect attempts to modify )0 306 1 A()I(immutable)ES()306 0 TN TL()Ec /AF f D( )0 2 A()I(objects)ES()EA( or )0 2 A()I(cells)ES()EA(; the consequences of
attempting to make such modification are undefined. "Numbers are
immutable.")EP(
)0 P()WB 307 Sn()WB 307 Sn()BD(implementation)ES()EA( )I(n.)ES( a system,
mechanism, or body of )0 2 A()I(code)ES()EA( that implements the semantics
of Common Lisp.)EP(
)0 P()WB 308 Sn()WB 308 Sn()BD(implementation limit)ES()EA( )I(n.)ES( a
restriction imposed by an )0 307 1 A()I(implementation)ES()307 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 309 Sn()WB 309 Sn()BD(implementation-defined)ES()EA(
)I(adj.)ES( )0 310 1 A()I(implementation-dependent)ES()310 0 TN TL()Ec /AF f D(,
but required by this specification to be defined by each )0 2 A()I(conforming
implementation)ES()EA( and to be documented by the corresponding
implementor.)EP(
)0 P()WB 310 Sn()WB 310 Sn()BD(implementation-dependent)ES()EA(
)I(adj.)ES( describing a behavior or aspect of Common Lisp which
has been deliberately left unspecified, that might be defined in
some )0 2 A()I(conforming
implementations)ES()EA( but not in others, and whose details may
differ between )0 307 1 A()I(implementations)ES()307 0 TN TL()Ec /AF f D(. A )0 2 A()I(conforming
implementation)ES()EA( is encouraged \201but not required\202 to document
its treatment of each item in this specification which is marked
)0 310 1 A()I(implementation-dependent)ES()310 0 TN TL()Ec /AF f D(,
although in some cases such documentation might simply identify the
item as "undefined.")EP(
)0 P()WB 311 Sn()WB 311 Sn()BD(implementation-independent)ES()EA(
)I(adj.)ES( used to identify or emphasize a behavior or aspect of
Common Lisp which does not vary between )0 2 A()I(conforming
implementations)ES()EA(.)EP(
)0 P()WB 312 Sn()WB 312 Sn()BD(implicit
block)ES()EA( )I(n.)ES( a )0 2 A()I(block)ES()EA( introduced by a )0 2 A()I(macro form)ES()EA(
rather than by an explicit )0 2 A()BD(block)ES()EA( )0 2 A()I(form)ES()EA(.)EP(
)0 P()WB 313 Sn()WB 313 Sn()BD(implicit compilation)ES()EA( )I(n.)ES(
)0 2 A()I(compilation)ES()EA( performed during
)0 2 A()I(evaluation)ES()EA(.)EP(
)0 P()WB 314 Sn()WB 314 Sn()BD(implicit
progn)ES()EA( )I(n.)ES( an ordered set of adjacent )0 2 A()I(forms)ES()EA( appearing in
another )0 2 A()I(form)ES()EA(, and defined by their context
in that )0 2 A()I(form)ES()EA( to be executed as if within a
)0 2 A()BD(progn)ES()EA(.)EP(
)0 P()WB 315 Sn()WB 315 Sn()BD(implicit
tagbody)ES()EA( )I(n.)ES( an ordered set of adjacent )0 2 A()I(forms)ES()EA( and/or
)0 2 A()I(tags)ES()EA(
appearing in another )0 2 A()I(form)ES()EA(, and defined by their context
in that )0 2 A()I(form)ES()EA( to be executed as if within a
)0 2 A()BD(tagbody)ES()EA(.)EP(
)0 P()WB 316 Sn()WB 316 Sn()BD(import)ES()EA( )I(v.t.)ES( \201a
)0 2 A()I(symbol)ES()EA(
into a )0 2 A()I(package)ES()EA(\202 to make the )0 2 A()I(symbol)ES()EA( be
)0 2 A()I(present)ES()EA(
in the )0 2 A()I(package)ES()EA(.)EP(
)0 P()WB 317 Sn()WB 317 Sn()BD(improper
list)ES()EA( )I(n.)ES( a )0 2 A()I(list)ES()EA( which is not a )0 2 A()I(proper
list)ES()EA(: a )0 2 A()I(circular list)ES()EA( or a )0 2 A()I(dotted
list)ES()EA(.)EP(
)0 P()WB 318 Sn()WB 318 Sn()BD(inaccessible)ES()EA(
)I(adj.)ES( not )0 2 A()I(accessible)ES()EA(.)EP(
)0 P()WB 319 Sn()WB 319 Sn()BD(indefinite
extent)ES()EA( )I(n.)ES( an )0 2 A()I(extent)ES()EA( whose duration is
unlimited. "Most Common Lisp objects have indefinite extent.")EP(
)0 P()WB 320 Sn()WB 320 Sn()BD(indefinite
scope)ES()EA( )I(n.)ES( )0 2 A()I(scope)ES()EA( that is unlimited.)EP(
)0 P()WB 321 Sn()WB 321 Sn()BD(indicator)ES()EA(
)I(n.)ES( a )0 2 A()I(property
indicator)ES()EA(.)EP(
)0 P()WB 322 Sn()WB 322 Sn()BD(indirect
instance)ES()EA( )I(n.)ES( \201of a )0 2 A()I(class)ES()EA( C1\202 an )0 2 A()I(object)ES()EA( of )0 2 A()I(class)ES()EA( C2, where C2 is a
)0 2 A()I(subclass)ES()EA( of C1. "An integer is
an indirect instance of the class )0 2 A()BD(number)ES()EA(.")EP(
)0 P()WB 323 Sn()WB 323 Sn()BD(inherit)ES()EA( )I(v.t.)ES( 1.
to receive or acquire a quality, trait, or characteristic; to gain
access to a feature defined elsewhere. 2. \201a )0 2 A()I(class)ES()EA(\202 to acquire the
structure and behavior defined by a )0 2 A()I(superclass)ES()EA(. 3. \201a )0 2 A()I(package)ES()EA(\202 to
make )0 2 A()I(symbols)ES()EA( )0 2 A()I(exported)ES()EA( by another )0 2 A()I(package)ES()EA( )0 2 A()I(accessible)ES()EA(
by using )0 2 A()BD(use-package)ES()EA(.)EP(
)0 P()WB 324 Sn()WB 324 Sn()BD(initial pprint dispatch
table)ES()EA( )I(n.)ES( the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*print-pprint-dispatch*)ES()EA(
at the time the )0 2 A()I(Lisp image)ES()EA( is started.)EP(
)0 P()WB 325 Sn()WB 325 Sn()BD(initial
readtable)ES()EA( )I(n.)ES( the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*readtable*)ES()EA( at the time the
)0 2 A()I(Lisp
image)ES()EA( is started.)EP(
)0 P()WB 326 Sn()WB 326 Sn()BD(initialization argument
list)ES()EA( )I(n.)ES( a )0 2 A()I(property list)ES()EA( of
initialization argument )0 2 A()I(names)ES()EA( and )0 2 A()I(values)ES()EA( used in the protocol for
initializing and reinitializing )0 329 1 A()I(instances)ES()329 0 TN TL()Ec /AF f D( of )0 2 A()I(classes)ES()EA(. See )0 2 A(Section 7.1 \201Object Creation and
Initialization\202)EA(.)EP(
)0 P()WB 327 Sn()WB 327 Sn()BD(initialization form)ES()EA( )I(n.)ES( a
)0 2 A()I(form)ES()EA( used
to supply the initial )0 2 A()I(value)ES()EA( for a )0 2 A()I(slot)ES()EA( or )0 2 A()I(variable)ES()EA(. "The
initialization form for a slot in a )0 2 A()BD(defclass)ES()EA( form is introduced by
the keyword )TT(:initform)ES(.")EP(
)0 P()WB 328 Sn()WB 328 Sn()BD(input)ES()EA( )I(adj.)ES( \201of a
)0 2 A()I(stream)ES()EA(\202
supporting input operations \201i.e., being a "data source"\202. An
)0 328 1 A()I(input)ES()328 0 TN TL()Ec /AF f D( )0 2 A()I(stream)ES()EA( might
also be an )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA(, in which case it is
sometimes called a )0 2 A()I(bidirectional)ES()EA( )0 2 A()I(stream)ES()EA(. See the
)0 2 A()I(function)ES()EA( )0 2 A()BD(input-stream-p)ES()EA(.)EP(
)0 P()WB 329 Sn()WB 329 Sn()BD(instance)ES()EA( )I(n.)ES(
1. a )0 2 A()I(direct instance)ES()EA(. 2. a
)0 2 A()I(generalized
instance)ES()EA(. 3. an )0 322 1 A()I(indirect instance)ES()322 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 330 Sn()WB 330 Sn()BD(integer)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(integer)ES()EA(,
which represents a mathematical integer.)EP(
)0 P()WB 331 Sn()WB 331 Sn()BD(interactive stream)ES()EA( )I(n.)ES( a
)0 2 A()I(stream)ES()EA( on
which it makes sense to perform interactive querying. See )0 2 A(Section 21.1.1.1.3 \201Interactive
Streams\202)EA(.)EP(
)0 P()WB 332 Sn()WB 332 Sn()BD(intern)ES()EA( )I(v.t.)ES( 1. \201a
)0 2 A()I(string)ES()EA( in
a )0 2 A()I(package)ES()EA(\202 to look up the )0 2 A()I(string)ES()EA( in the
)0 2 A()I(package)ES()EA(,
returning either a )0 2 A()I(symbol)ES()EA( with that )0 2 A()I(name)ES()EA( which was
already )0 2 A()I(accessible)ES()EA( in the )0 2 A()I(package)ES()EA( or a
newly created )0 333 1 A()I(internal symbol)ES()333 0 TN TL()Ec /AF f D( of the )0 2 A()I(package)ES()EA( with
that )0 2 A()I(name)ES()EA(.
2. )I(Idiom.)ES( generally, to observe a protocol whereby objects
which are equivalent or have equivalent names under some predicate
defined by the protocol are mapped to a single canonical
object.)EP(
)0 P()WB 333 Sn()WB 333 Sn()BD(internal
symbol)ES()EA( )I(n.)ES( \201of a )0 2 A()I(package)ES()EA(\202 a symbol which is
)0 2 A()I(accessible)ES()EA( in the )0 2 A()I(package)ES()EA(, but
which is not an )0 2 A()I(external symbol)ES()EA( of the
)0 2 A()I(package)ES()EA(.)EP(
)0 P()WB 334 Sn()WB 334 Sn()BD(internal
time)ES()EA( )I(n.)ES( )0 2 A()I(time)ES()EA(, represented as an )0 330 1 A()I(integer)ES()330 0 TN TL()Ec /AF f D( number of )0 335 1 A()I(internal time
units)ES()335 0 TN TL()Ec /AF f D(. )0 2 A()I(Absolute)ES()EA( )0 334 1 A()I(internal time)ES()334 0 TN TL()Ec /AF f D( is measured as an
offset from an arbitrarily chosen, )0 310 1 A()I(implementation-dependent)ES()310 0 TN TL()Ec /AF f D(
base. See )0 2 A(Section 25.1.4.3
\201Internal Time\202)EA(.)EP(
)0 P()WB 335 Sn()WB 335 Sn()BD(internal
time unit)ES()EA( )I(n.)ES( a unit of time equal to 1/n of a
second, for some )0 309 1 A()I(implementation-defined)ES()309 0 TN TL()Ec /AF f D( )0 330 1 A()I(integer)ES()330 0 TN TL()Ec /AF f D( value of n. See the
)0 2 A()I(variable)ES()EA( )0 2 A()BD(internal-time-units-per-second)ES()EA(.)EP(
)0 P()WB 336 Sn()WB 336 Sn()BD(interned)ES()EA( )I(adj.)ES(
)I(Trad.)ES( 1. \201of a )0 2 A()I(symbol)ES()EA(\202 )0 2 A()I(accessible)ES()EA([3] in any )0 2 A()I(package)ES()EA(. 2. \201of
a )0 2 A()I(symbol)ES()EA(
in a specific )0 2 A()I(package)ES()EA(\202 )0 2 A()I(present)ES()EA( in that )0 2 A()I(package)ES()EA(.)EP(
)0 P()WB 337 Sn()WB 337 Sn()BD(interpreted function)ES()EA( )I(n.)ES( a
)0 2 A()I(function)ES()EA( that is not a )0 2 A()I(compiled
function)ES()EA(. \201It is possible for there to be a )0 2 A()I(conforming
implementation)ES()EA( which has no )0 337 1 A()I(interpreted functions)ES()337 0 TN TL()Ec /AF f D(, but a
)0 2 A()I(conforming program)ES()EA(
must not assume that all )0 2 A()I(functions)ES()EA( are )0 2 A()I(compiled
functions)ES()EA(.\202)EP(
)0 P()WB 338 Sn()WB 338 Sn()BD(interpreted implementation)ES()EA(
)I(n.)ES( an )0 307 1 A()I(implementation)ES()307 0 TN TL()Ec /AF f D( that uses an execution
strategy for )0 337 1 A()I(interpreted functions)ES()337 0 TN TL()Ec /AF f D( that does
not involve a one-time semantic analysis pre-pass, and instead uses
"lazy" \201and sometimes repetitious\202 semantic analysis of )0 2 A()I(forms)ES()EA( as they are
encountered during execution.)EP(
)0 P()WB 339 Sn()WB 339 Sn()BD(interval designator)ES()EA( )I(n.)ES( \201of
)0 2 A()I(type)ES()EA( T\202 an
ordered pair of )0 2 A()I(objects)ES()EA( that describe a )0 2 A()I(subtype)ES()EA( of T by
delimiting an interval on the real number line. See )0 2 A(Section 12.1.6 \201Interval Designators\202)EA(.)EP(
)0 P()WB 340 Sn()WB 340 Sn()BD(invalid)ES()EA( )I(n.)ES(,
)I(adj.)ES( 1. )I(n.)ES( a possible )0 2 A()I(constituent trait)ES()EA( of a
)0 2 A()I(character)ES()EA( which if present
signifies that the )0 2 A()I(character)ES()EA( cannot ever appear in
a )0 2 A()I(token)ES()EA(
except under the control of a )0 2 A()I(single escape)ES()EA( )0 2 A()I(character)ES()EA(.
For details, see )0 2 A(Section 2.1.4.1
\201Constituent Characters\202)EA(. 2. )I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202
being a )0 2 A()I(character)ES()EA( that has )0 2 A()I(syntax type)ES()EA(
)0 2 A()I(constituent)ES()EA( in the )0 2 A()I(current
readtable)ES()EA( and that has the )0 2 A()I(constituent trait)ES()EA(
)0 340 1 A()I(invalid)ES()340 0 TN TL()Ec /AF f D([1]. See
)0 2 A(Figure 2-8)EA(.)EP(
)0 P()WB 341 Sn()WB 341 Sn()BD(iteration
form)ES()EA( )I(n.)ES( a )0 2 A()I(compound form)ES()EA( whose )0 2 A()I(operator)ES()EA( is
named in the next figure, or a )0 2 A()I(compound form)ES()EA( that has an
)0 309 1 A()I(implementation-defined)ES()309 0 TN TL()Ec /AF f D( )0 2 A()I(operator)ES()EA( and
that is defined by the )0 307 1 A()I(implementation)ES()307 0 TN TL()Ec /AF f D( to be an )0 341 1 A()I(iteration form)ES()341 0 TN TL()Ec /AF f D(.)EP(
) 3 44 PR()0 2 A(do)EA(              )0 2 A(do-external-symbols)EA(  )0 2 A(dotimes)EA(  
)0 2 A(do*)EA(             )0 2 A(do-symbols)EA(           )0 2 A(loop)EA(     
)0 2 A(do-all-symbols)EA(  )0 2 A(dolist)EA()RP(
)0 P()BD(Figure 26-3. Standardized Iteration Forms)ES()EP(
)0 P()WB 342 Sn()WB 342 Sn()BD(iteration variable)ES()EA( )I(n.)ES( a
)0 2 A()I(variable)ES()EA( V, the )0 2 A()I(binding)ES()EA( for
which was created by an )0 2 A()I(explicit use)ES()EA( of V in an
)0 341 1 A()I(iteration
form)ES()341 0 TN TL()Ec /AF f D(.)EP(

)BD(K)ES(
)0 P()WB 343 Sn()WB 343 Sn()BD(key)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( used for
selection during retrieval. See )0 2 A()I(association list)ES()EA(,
)0 2 A()I(property
list)ES()EA(, and )0 2 A()I(hash table)ES()EA(. Also, see )0 2 A(Section 17.1 \201Sequence Concepts\202)EA(.)EP(
)0 P()WB 344 Sn()WB 344 Sn()BD(keyword)ES()EA( )I(n.)ES( 1. a
)0 2 A()I(symbol)ES()EA(
the )0 2 A()I(home
package)ES()EA( of which is the )TT(KEYWORD)ES( package. 2. any
)0 2 A()I(symbol)ES()EA(,
usually but not necessarily in the )TT(KEYWORD)ES( package, that
is used as an identifying marker in keyword-style argument passing.
See )0 2 A()BD(lambda)ES()EA(. 3. )I(Idiom.)ES( a )0 2 A()I(lambda list
keyword)ES()EA(.)EP(
)0 P()WB 345 Sn()WB 345 Sn()BD(keyword
parameter)ES()EA( )I(n.)ES( A )0 2 A()I(parameter)ES()EA( for which a
corresponding keyword )0 2 A()I(argument)ES()EA( is optional. \201There is
no such thing as a required keyword )0 2 A()I(argument)ES()EA(.\202 If the )0 2 A()I(argument)ES()EA( is
not supplied, a default value is used. See also )0 2 A()I(supplied-p
parameter)ES()EA(.)EP(
)0 P()WB 346 Sn()WB 346 Sn()BD(keyword/value pair)ES()EA( )I(n.)ES( two
successive )0 2 A()I(elements)ES()EA( \201a )0 344 1 A()I(keyword)ES()344 0 TN TL()Ec /AF f D( and a )0 2 A()I(value)ES()EA(, respectively\202 of a )0 2 A()I(property
list)ES()EA(.)EP(

)BD(L)ES(
)0 P()WB 347 Sn()WB 347 Sn()BD(lambda
combination)ES()EA( )I(n.)ES( )I(Trad.)ES( a )0 349 1 A()I(lambda form)ES()349 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 348 Sn()WB 348 Sn()BD(lambda
expression)ES()EA( )I(n.)ES( a )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( which can be used in place of a )0 2 A()I(function
name)ES()EA( in certain contexts to denote a )0 2 A()I(function)ES()EA( by directly
describing its behavior rather than indirectly by referring to the
name of an )I(established)ES( )0 2 A()I(function)ES()EA(; its name derives from
the fact that its first element is the )0 2 A()I(symbol)ES()EA( )TT(lambda)ES(. See
)0 2 A()BD(lambda)ES()EA(.)EP(
)0 P()WB 349 Sn()WB 349 Sn()BD(lambda form)ES()EA(
)I(n.)ES( a )0 2 A()I(form)ES()EA( that is a )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( and that has a first element which is
a )0 348 1 A()I(lambda
expression)ES()348 0 TN TL()Ec /AF f D( representing a )0 2 A()I(function)ES()EA( to be called on )0 2 A()I(arguments)ES()EA(
which are the result of )I(evaluating)ES( subsequent elements of
the )0 349 1 A()I(lambda
form)ES()349 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 350 Sn()WB 350 Sn()BD(lambda list)ES()EA(
)I(n.)ES( a )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( that
specifies a set of )0 2 A()I(parameters)ES()EA( \201sometimes called
)0 352 1 A()I(lambda
variables)ES()352 0 TN TL()Ec /AF f D(\202 and a protocol for receiving )0 2 A()I(values)ES()EA( for those )0 2 A()I(parameters)ES()EA(;
that is, an )0 2 A()I(ordinary lambda
list)ES()EA(, an )0 2 A()I(extended lambda
list)ES()EA(, or a )0 2 A()I(modified lambda
list)ES()EA(.)EP(
)0 P()WB 351 Sn()WB 351 Sn()BD(lambda
list keyword)ES()EA( )I(n.)ES( a )0 2 A()I(symbol)ES()EA( whose )0 2 A()I(name)ES()EA( begins with )0 2 A()I(ampersand)ES()EA( and
that is specially recognized in a )0 350 1 A()I(lambda list)ES()350 0 TN TL()Ec /AF f D(. Note that no )0 2 A()I(standardized)ES()EA( )0 351 1 A()I(lambda list
keyword)ES()351 0 TN TL()Ec /AF f D( is in the )TT(KEYWORD)ES( package.)EP(
)0 P()WB 352 Sn()WB 352 Sn()BD(lambda
variable)ES()EA( )I(n.)ES( a )0 2 A()I(formal parameter)ES()EA(, used
to emphasize the )0 2 A()I(variable)ES()EA('s relation to the
)0 350 1 A()I(lambda list)ES()350 0 TN TL()Ec /AF f D( that
)I(established)ES( it.)EP(
)0 P()WB 353 Sn()WB 353 Sn()BD(leaf)ES()EA( )I(n.)ES( 1. an )0 2 A()I(atom)ES()EA( in a )0 2 A()I(tree)ES()EA([1]. 2. a
terminal node of a )0 2 A()I(tree)ES()EA([2].)EP(
)0 P()WB 354 Sn()WB 354 Sn()BD(leap seconds)ES()EA(
)I(n.)ES( additional one-second intervals of time that are
occasionally inserted into the true calendar by official
timekeepers as a correction similar to "leap years." All Common
Lisp )0 2 A()I(time)ES()EA(
representations ignore )0 354 1 A()I(leap seconds)ES()354 0 TN TL()Ec /AF f D(; every day is assumed to be
exactly 86400 seconds long.)EP(
)0 P()WB 355 Sn()WB 355 Sn()BD(left-parenthesis)ES()EA( )I(n.)ES( the
)0 2 A()I(standard character)ES()EA(
")TT(\201)ES(", that is variously called "left parenthesis" or "open
parenthesis" See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 356 Sn()WB 356 Sn()BD(length)ES()EA( )I(n.)ES( \201of a
)0 2 A()I(sequence)ES()EA(\202 the number of )0 2 A()I(elements)ES()EA( in the
)0 2 A()I(sequence)ES()EA(. \201Note that if the
)0 2 A()I(sequence)ES()EA( is a )0 2 A()I(vector)ES()EA( with a
)0 2 A()I(fill
pointer)ES()EA(, its )0 356 1 A()I(length)ES()356 0 TN TL()Ec /AF f D( is the same as the )0 2 A()I(fill pointer)ES()EA( even
though the total allocated size of the )0 2 A()I(vector)ES()EA( might be larger.\202)EP(
)0 P()WB 357 Sn()WB 357 Sn()BD(lexical
binding)ES()EA( )I(n.)ES( a )0 2 A()I(binding)ES()EA( in a )0 359 1 A()I(lexical environment)ES()359 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 358 Sn()WB 358 Sn()BD(lexical
closure)ES()EA( )I(n.)ES( a )0 2 A()I(function)ES()EA( that, when invoked on
)0 2 A()I(arguments)ES()EA(, executes the body of
a )0 348 1 A()I(lambda
expression)ES()348 0 TN TL()Ec /AF f D( in the )0 359 1 A()I(lexical environment)ES()359 0 TN TL()Ec /AF f D( that was
captured at the time of the creation of the )0 358 1 A()I(lexical closure)ES()358 0 TN TL()Ec /AF f D(, augmented by
)0 2 A()I(bindings)ES()EA(
of the )0 2 A()I(function)ES()EA('s )0 2 A()I(parameters)ES()EA( to the
corresponding )0 2 A()I(arguments)ES()EA(.)EP(
)0 P()WB 359 Sn()WB 359 Sn()BD(lexical environment)ES()EA( )I(n.)ES( that
part of the )0 2 A()I(environment)ES()EA( that contains
)0 2 A()I(bindings)ES()EA(
whose names have )0 360 1 A()I(lexical scope)ES()360 0 TN TL()Ec /AF f D(. A )0 359 1 A()I(lexical environment)ES()359 0 TN TL()Ec /AF f D(
contains, among other things: ordinary )0 2 A()I(bindings)ES()EA( of )0 2 A()I(variable)ES()EA( )0 2 A()I(names)ES()EA( to )0 2 A()I(values)ES()EA(, lexically
)I(established)ES( )0 2 A()I(bindings)ES()EA( of )0 2 A()I(function names)ES()EA( to
)0 2 A()I(functions)ES()EA(, )0 2 A()I(macros)ES()EA(, )0 2 A()I(symbol macros)ES()EA(, )0 2 A()I(blocks)ES()EA(, )0 2 A()I(tags)ES()EA(, and )0 374 1 A()I(local
declarations)ES()374 0 TN TL()Ec /AF f D( \201see )0 2 A()BD(declare)ES()EA(\202.)EP(
)0 P()WB 360 Sn()WB 360 Sn()BD(lexical
scope)ES()EA( )I(n.)ES( )0 2 A()I(scope)ES()EA( that is limited to a spatial
or textual region within the establishing )0 2 A()I(form)ES()EA(. "The names of parameters to a
function normally are lexically scoped.")EP(
)0 P()WB 361 Sn()WB 361 Sn()BD(lexical
variable)ES()EA( )I(n.)ES( a )0 2 A()I(variable)ES()EA( the )0 2 A()I(binding)ES()EA( for which is in the
)0 359 1 A()I(lexical
environment)ES()359 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 362 Sn()WB 362 Sn()BD(Lisp image)ES()EA(
)I(n.)ES( a running instantiation of a Common Lisp )0 2 A()I(implementation)ES()EA(. A )0 362 1 A()I(Lisp image)ES()362 0 TN TL()Ec /AF f D( is
characterized by a single address space in which any )0 2 A()I(object)ES()EA( can
directly refer to any another in conformance with this
specification, and by a single, common, )0 2 A()I(global environment)ES()EA(.
\201External operating systems sometimes call this a "core image,"
"fork," "incarnation," "job," or "process." Note however, that the
issue of a "process" in such an operating system is technically
orthogonal to the issue of a )0 362 1 A()I(Lisp image)ES()362 0 TN TL()Ec /AF f D( being defined here. Depending
on the operating system, a single "process" might have multiple
)0 362 1 A()I(Lisp images)ES()362 0 TN TL()Ec /AF f D(, and
multiple "processes" might reside in a single )0 362 1 A()I(Lisp image)ES()362 0 TN TL()Ec /AF f D(. Hence, it is the idea of
a fully shared address space for direct reference among all )0 2 A()I(objects)ES()EA( which is
the defining characteristic. Note, too, that two "processes" which
have a communication area that permits the sharing of some but not
all )0 2 A()I(objects)ES()EA( are considered to be
distinct )0 362 1 A()I(Lisp
images)ES()362 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 363 Sn()WB 363 Sn()BD(Lisp printer)ES()EA(
)I(n.)ES( )I(Trad.)ES( the procedure that prints the character
representation of an )0 2 A()I(object)ES()EA( onto a )0 2 A()I(stream)ES()EA(. \201This procedure is
implemented by the )0 2 A()I(function)ES()EA( )0 2 A()BD(write)ES()EA(.\202)EP(
)0 P()WB 364 Sn()WB 364 Sn()BD(Lisp read-eval-print loop)ES()EA(
)I(n.)ES( )I(Trad.)ES( an endless loop that )0 2 A()I(reads)ES()EA([2] a )0 2 A()I(form)ES()EA(, )0 2 A()I(evaluates)ES()EA( it, and prints \201i.e.,
)0 2 A()I(writes)ES()EA([2]\202
the results. In many )0 2 A()I(implementations)ES()EA(, the
default mode of interaction with Common Lisp during program
development is through such a loop.)EP(
)0 P()WB 365 Sn()WB 365 Sn()BD(Lisp reader)ES()EA(
)I(n.)ES( )I(Trad.)ES( the procedure that parses character
representations of )0 2 A()I(objects)ES()EA( from a )0 2 A()I(stream)ES()EA(, producing )0 2 A()I(objects)ES()EA(. \201This
procedure is implemented by the )0 2 A()I(function)ES()EA( )0 2 A()BD(read)ES()EA(.\202)EP(
)0 P()WB 366 Sn()WB 366 Sn()BD(list)ES()EA( )I(n.)ES( 1. a chain of
)0 2 A()I(conses)ES()EA( in
which the )0 2 A()I(car)ES()EA( of each )0 2 A()I(cons)ES()EA( is an )0 2 A()I(element)ES()EA( of the )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D(, and the )0 2 A()I(cdr)ES()EA( of each )0 2 A()I(cons)ES()EA( is either the
next link in the chain or a terminating )0 2 A()I(atom)ES()EA(. See also )0 2 A()I(proper list)ES()EA(, )0 2 A()I(dotted
list)ES()EA(, or )0 2 A()I(circular list)ES()EA(. 2. the
)0 2 A()I(type)ES()EA( that
is the union of )0 2 A()BD(null)ES()EA( and )0 2 A()BD(cons)ES()EA(.)EP(
)0 P()WB 367 Sn()WB 367 Sn()BD(list
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( of )0 2 A()I(objects)ES()EA(; that is, an )0 2 A()I(object)ES()EA( that
denotes a )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( and that
is one of: a )0 2 A()I(non-nil)ES()EA( )0 2 A()I(atom)ES()EA( \201denoting a )0 2 A()I(singleton)ES()EA( )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( whose )0 2 A()I(element)ES()EA( is that )0 2 A()I(non-nil)ES()EA( )0 2 A()I(atom)ES()EA(\202 or a )0 2 A()I(proper list)ES()EA(
\201denoting itself\202.)EP(
)0 P()WB 368 Sn()WB 368 Sn()BD(list
structure)ES()EA( )I(n.)ES( \201of a )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D(\202 the set of )0 2 A()I(conses)ES()EA( that make up the )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D(. Note that while the
)0 2 A()I(car)ES()EA([1b]
component of each such )0 2 A()I(cons)ES()EA( is part of the )0 368 1 A()I(list structure)ES()368 0 TN TL()Ec /AF f D(, the
)0 2 A()I(objects)ES()EA(
that are )0 2 A()I(elements)ES()EA( of the )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( \201i.e., the )0 2 A()I(objects)ES()EA( that are
the )0 2 A()I(cars)ES()EA([2]
of each )0 2 A()I(cons)ES()EA( in the )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D(\202 are not themselves part of its
)0 368 1 A()I(list
structure)ES()368 0 TN TL()Ec /AF f D(, even if they are )0 2 A()I(conses)ES()EA(, except in the \201)0 2 A()I(circular)ES()EA([2]\202
case where the )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D(
actually contains one of its )0 2 A()I(tails)ES()EA( as an )0 2 A()I(element)ES()EA(. \201The )0 368 1 A()I(list structure)ES()368 0 TN TL()Ec /AF f D( of a
)0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( is sometimes
redundantly referred to as its "top-level list structure" in order
to emphasize that any )0 2 A()I(conses)ES()EA( that are )0 2 A()I(elements)ES()EA( of the )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( are not involved.\202)EP(
)0 P()WB 369 Sn()WB 369 Sn()BD(literal)ES()EA( )I(adj.)ES(
\201of an )0 2 A()I(object)ES()EA(\202 referenced directly in a
program rather than being computed by the program; that is,
appearing as data in a )0 2 A()BD(quote)ES()EA( )0 2 A()I(form)ES()EA(, or, if the )0 2 A()I(object)ES()EA( is a )0 2 A()I(self-evaluating
object)ES()EA(, appearing as unquoted data. "In the form )TT(\201cons
"one" '\201"two"\202\202)ES(, the expressions )TT("one")ES(,
)TT(\201"two"\202)ES(, and )TT("two")ES( are literal objects.")EP(
)0 P()WB 370 Sn()WB 370 Sn()BD(load)ES()EA( )I(v.t.)ES( \201a )0 2 A()I(file)ES()EA(\202 to cause the
)0 2 A()I(code)ES()EA(
contained in the )0 2 A()I(file)ES()EA( to be )I(executed)ES(. See the
)0 2 A()I(function)ES()EA( )0 2 A()BD(load)ES()EA(.)EP(
)0 P()WB 371 Sn()WB 371 Sn()BD(load time)ES()EA(
)I(n.)ES( the duration of time that the loader is )I(loading)ES(
)0 2 A()I(compiled
code)ES()EA(.)EP(
)0 P()WB 372 Sn()WB 372 Sn()BD(load time
value)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( referred to in )0 2 A()I(code)ES()EA( by a )0 2 A()BD(load-time-value)ES()EA( )0 2 A()I(form)ES()EA(. The )0 2 A()I(value)ES()EA( of such a
)0 2 A()I(form)ES()EA( is
some specific )0 2 A()I(object)ES()EA( which can only be computed
in the run-time )0 2 A()I(environment)ES()EA(. In the case of
)0 2 A()I(file)ES()EA(
)0 2 A()I(compilation)ES()EA(, the )0 2 A()I(value)ES()EA( is computed
once as part of the process of )I(loading)ES( the )0 2 A()I(compiled
file)ES()EA(, and not again. See the )0 2 A()I(special operator)ES()EA( )0 2 A()BD(load-time-value)ES()EA(.)EP(
)0 P()WB 373 Sn()WB 373 Sn()BD(loader)ES()EA( )I(n.)ES( a
facility that is part of Lisp and that )0 370 1 A()I(loads)ES()370 0 TN TL()Ec /AF f D( a )0 2 A()I(file)ES()EA(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(load)ES()EA(.)EP(
)0 P()WB 374 Sn()WB 374 Sn()BD(local
declaration)ES()EA( )I(n.)ES( an )0 2 A()I(expression)ES()EA( which may appear
only in specially designated positions of certain )0 2 A()I(forms)ES()EA(, and which
provides information about the code contained within the containing
)0 2 A()I(form)ES()EA(; that
is, a )0 2 A()BD(declare)ES()EA( )0 2 A()I(expression)ES()EA(.)EP(
)0 P()WB 375 Sn()WB 375 Sn()BD(local precedence order)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(class)ES()EA(\202 a )0 366 1 A()I(list)ES()366 0 TN TL()Ec /AF f D( consisting of the )0 2 A()I(class)ES()EA( followed by its )0 2 A()I(direct
superclasses)ES()EA( in the order mentioned in the defining )0 2 A()I(form)ES()EA( for the
)0 2 A()I(class)ES()EA(.)EP(
)0 P()WB 376 Sn()WB 376 Sn()BD(local slot)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(class)ES()EA(\202 a )0 2 A()I(slot)ES()EA( )0 2 A()I(accessible)ES()EA( in only one )0 2 A()I(instance)ES()EA(,
namely the )0 2 A()I(instance)ES()EA( in which the )0 2 A()I(slot)ES()EA( is
allocated.)EP(
)0 P()WB 377 Sn()WB 377 Sn()BD(logical
block)ES()EA( )I(n.)ES( a conceptual grouping of related output
used by the )0 2 A()I(pretty printer)ES()EA(. See the
)0 2 A()I(macro)ES()EA(
)0 2 A()BD(pprint-logical-block)ES()EA(
and )0 2 A(Section 22.2.1.1 \201Dynamic
Control of the Arrangement of Output\202)EA(.)EP(
)0 P()WB 378 Sn()WB 378 Sn()BD(logical host)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(implementation-dependent)ES()EA(
nature that is used as the representation of a "host" in a )0 380 1 A()I(logical pathname)ES()380 0 TN TL()Ec /AF f D(,
and that has an associated set of translation rules for converting
)0 380 1 A()I(logical
pathnames)ES()380 0 TN TL()Ec /AF f D( belonging to that host into )0 2 A()I(physical
pathnames)ES()EA(. See )0 2 A(Section 19.3
\201Logical Pathnames\202)EA(.)EP(
)0 P()WB 379 Sn()WB 379 Sn()BD(logical host designator)ES()EA(
)I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 378 1 A()I(logical host)ES()378 0 TN TL()Ec /AF f D(; that is,
an )0 2 A()I(object)ES()EA(
that denotes a )0 378 1 A()I(logical
host)ES()378 0 TN TL()Ec /AF f D( and that is one of: a )0 2 A()I(string)ES()EA( \201denoting the )0 378 1 A()I(logical host)ES()378 0 TN TL()Ec /AF f D( that it
names\202, or a )0 378 1 A()I(logical
host)ES()378 0 TN TL()Ec /AF f D( \201denoting itself\202. \201Note that because the
representation of a )0 378 1 A()I(logical host)ES()378 0 TN TL()Ec /AF f D( is )0 2 A()I(implementation-dependent)ES()EA(,
it is possible that an )0 2 A()I(implementation)ES()EA( might
represent a )0 378 1 A()I(logical
host)ES()378 0 TN TL()Ec /AF f D( as the )0 2 A()I(string)ES()EA( that names it.\202)EP(
)0 P()WB 380 Sn()WB 380 Sn()BD(logical
pathname)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(logical-pathname)ES()EA(.)EP(
)0 P()WB 381 Sn()WB 381 Sn()BD(long float)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(long-float)ES()EA(.)EP(
)0 P()WB 382 Sn()WB 382 Sn()BD(loop keyword)ES()EA(
)I(n.)ES( )I(Trad.)ES( a symbol that is a specially recognized part
of the syntax of an extended )0 2 A()BD(loop)ES()EA( )0 2 A()I(form)ES()EA(. Such symbols are recognized by
their )0 2 A()I(name)ES()EA(
\201using )0 2 A()BD(string=)ES()EA(\202, not by their identity;
as such, they may be in any package. A )0 382 1 A()I(loop keyword)ES()382 0 TN TL()Ec /AF f D( is not a )0 2 A()I(keyword)ES()EA(.)EP(
)0 P()WB 383 Sn()WB 383 Sn()BD(lowercase)ES()EA(
)I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 being among )0 2 A()I(standard
characters)ES()EA( corresponding to the small letters )TT(a)ES(
through )TT(z)ES(, or being some other )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(character)ES()EA( that is defined by
the )0 2 A()I(implementation)ES()EA( to be
)0 383 1 A()I(lowercase)ES()383 0 TN TL()Ec /AF f D(. See
)0 2 A(Section 13.1.4.3 \201Characters With
Case\202)EA(.)EP(

)BD(M)ES(
)0 P()WB 384 Sn()WB 384 Sn()BD(macro)ES()EA( )I(n.)ES( 1. a
)0 387 1 A()I(macro form)ES()387 0 TN TL()Ec /AF f D( 2. a
)0 388 1 A()I(macro
function)ES()388 0 TN TL()Ec /AF f D(. 3. a )0 390 1 A()I(macro name)ES()390 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 385 Sn()WB 385 Sn()BD(macro
character)ES()EA( )I(n.)ES( a )0 2 A()I(character)ES()EA( which, when
encountered by the )0 2 A()I(Lisp reader)ES()EA( in its main
dispatch loop, introduces a )0 2 A()I(reader macro)ES()EA([1]. \201)0 385 1 A()I(Macro characters)ES()385 0 TN TL()Ec /AF f D(
have nothing to do with )0 384 1 A()I(macros)ES()384 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 386 Sn()WB 386 Sn()BD(macro
expansion)ES()EA( )I(n.)ES( 1. the process of translating a )0 387 1 A()I(macro form)ES()387 0 TN TL()Ec /AF f D( into another
)0 2 A()I(form)ES()EA(. 2.
the )0 2 A()I(form)ES()EA(
resulting from this process.)EP(
)0 P()WB 387 Sn()WB 387 Sn()BD(macro form)ES()EA(
)I(n.)ES( a )0 2 A()I(form)ES()EA( that stands for another )0 2 A()I(form)ES()EA( \201e.g., for
the purposes of abstraction, information hiding, or syntactic
convenience\202; that is, either a )0 2 A()I(compound form)ES()EA( whose first
element is a )0 390 1 A()I(macro
name)ES()390 0 TN TL()Ec /AF f D(, or a )0 2 A()I(form)ES()EA( that is a )0 2 A()I(symbol)ES()EA( that names a )0 2 A()I(symbol
macro)ES()EA(.)EP(
)0 P()WB 388 Sn()WB 388 Sn()BD(macro
function)ES()EA( )I(n.)ES( a )0 2 A()I(function)ES()EA( of two arguments, a
)0 2 A()I(form)ES()EA( and an
)0 2 A()I(environment)ES()EA(, that implements
)0 386 1 A()I(macro
expansion)ES()386 0 TN TL()Ec /AF f D( by producing a )0 2 A()I(form)ES()EA( to be evaluated in place of the
original argument )0 2 A()I(form)ES()EA(.)EP(
)0 P()WB 389 Sn()WB 389 Sn()BD(macro
lambda list)ES()EA( )I(n.)ES( an )0 2 A()I(extended lambda list)ES()EA(
used in )0 2 A()I(forms)ES()EA( that )0 2 A()I(establish)ES()EA( )0 384 1 A()I(macro)ES()384 0 TN TL()Ec /AF f D( definitions, such as )0 2 A()BD(defmacro)ES()EA( and
)0 2 A()BD(macrolet)ES()EA(. See )0 2 A(Section 3.4.4 \201Macro Lambda Lists\202)EA(.)EP(
)0 P()WB 390 Sn()WB 390 Sn()BD(macro name)ES()EA(
)I(n.)ES( a )0 2 A()I(name)ES()EA( for which )0 2 A()BD(macro-function)ES()EA(
returns )0 2 A()I(true)ES()EA( and which when used as the
first element of a )0 2 A()I(compound form)ES()EA( identifies
that )0 2 A()I(form)ES()EA(
as a )0 387 1 A()I(macro
form)ES()387 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 391 Sn()WB 391 Sn()BD(macroexpand
hook)ES()EA( )I(n.)ES( the )0 2 A()I(function)ES()EA( that is the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*macroexpand-hook*)ES()EA(.)EP(
)0 P()WB 392 Sn()WB 392 Sn()BD(mapping)ES()EA( )I(n.)ES( 1. a
type of iteration in which a )0 2 A()I(function)ES()EA( is successively applied
to )0 2 A()I(objects)ES()EA( taken from corresponding
entries in collections such as )0 2 A()I(sequences)ES()EA( or )0 2 A()I(hash tables)ES()EA(. 2.
)I(Math.)ES( a relation between two sets in which each element of
the first set \201the "domain"\202 is assigned one element of the second
set \201the "range"\202.)EP(
)0 P()WB 393 Sn()WB 393 Sn()BD(metaclass)ES()EA(
)I(n.)ES( 1. a )0 2 A()I(class)ES()EA( whose instances are )0 2 A()I(classes)ES()EA(. 2. \201of
an )0 2 A()I(object)ES()EA(\202 the )0 2 A()I(class)ES()EA( of the )0 2 A()I(class)ES()EA( of the
)0 2 A()I(object)ES()EA(.)EP(
)0 P()WB 394 Sn()WB 394 Sn()BD(Metaobject Protocol)ES()EA( )I(n.)ES( one
of many possible descriptions of how a )0 2 A()I(conforming
implementation)ES()EA( might implement various aspects of the
object system. This description is beyond the scope of this
document, and no )0 2 A()I(conforming
implementation)ES()EA( is required to adhere to it except as noted
explicitly in this specification. Nevertheless, its existence helps
to establish normative practice, and implementors with no reason to
diverge from it are encouraged to consider making their )0 2 A()I(implementation)ES()EA( adhere to
it where possible. It is described in detail in )R1 2 A()I(The Art of the Metaobject Protocol)ES()EA(.)EP(
)0 P()WB 395 Sn()WB 395 Sn()BD(method)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA(
that is part of a )0 2 A()I(generic function)ES()EA( and
which provides information about how that )0 2 A()I(generic function)ES()EA( should
behave when its )0 2 A()I(arguments)ES()EA( are )0 2 A()I(objects)ES()EA( of
certain )0 2 A()I(classes)ES()EA( or with certain
identities.)EP(
)0 P()WB 396 Sn()WB 396 Sn()BD(method
combination)ES()EA( )I(n.)ES( 1. generally, the composition of a
set of )0 395 1 A()I(methods)ES()395 0 TN TL()Ec /AF f D( to
produce an )0 2 A()I(effective method)ES()EA( for a
)0 2 A()I(generic
function)ES()EA(. 2. an object of )0 2 A()I(type)ES()EA( )0 2 A()BD(method-combination)ES()EA(,
which represents the details of how the )0 396 1 A()I(method combination)ES()396 0 TN TL()Ec /AF f D([1] for one or
more specific )0 2 A()I(generic functions)ES()EA( is to
be performed.)EP(
)0 P()WB 397 Sn()WB 397 Sn()BD(method-defining form)ES()EA( )I(n.)ES( a
)0 2 A()I(form)ES()EA( that
defines a )0 395 1 A()I(method)ES()395 0 TN TL()Ec /AF f D( for
a )0 2 A()I(generic function)ES()EA(,
whether explicitly or implicitly. See )0 2 A(Section 7.6.1 \201Introduction to Generic
Functions\202)EA(.)EP(
)0 P()WB 398 Sn()WB 398 Sn()BD(method-defining operator)ES()EA(
)I(n.)ES( an )0 2 A()I(operator)ES()EA( corresponding to a
)I(method-defining)ES( )0 2 A()I(form)ES()EA(. See )0 2 A(Figure 7-1)EA(.)EP(
)0 P()WB 399 Sn()WB 399 Sn()BD(minimal compilation)ES()EA( )I(n.)ES(
actions the )0 2 A()I(compiler)ES()EA( must take at compile
time. See )0 2 A(Section 3.2.2
\201Compilation Semantics\202)EA(.)EP(
)0 P()WB 400 Sn()WB 400 Sn()BD(modified lambda list)ES()EA( )I(n.)ES( a
list resembling an )0 2 A()I(ordinary lambda list)ES()EA(
in form and purpose, but which deviates in syntax or functionality
from the definition of an )0 2 A()I(ordinary lambda
list)ES()EA(. See )0 2 A()I(ordinary lambda
list)ES()EA(. ")0 2 A()BD(deftype)ES()EA( uses a modified lambda
list.")EP(
)0 P()WB 401 Sn()WB 401 Sn()BD(most recent)ES()EA(
)I(adj.)ES( innermost; that is, having been )I(established)ES( \201and
not yet )I(disestablished)ES(\202 more recently than any other of its
kind.)EP(
)0 P()WB 402 Sn()WB 402 Sn()BD(multiple
escape)ES()EA( )I(n.)ES(, )I(adj.)ES( 1. )I(n.)ES( the )0 2 A()I(syntax type)ES()EA(
of a )0 2 A()I(character)ES()EA( that is used in pairs
to indicate that the enclosed )0 2 A()I(characters)ES()EA( are to be treated as
)0 2 A()I(alphabetic)ES()EA([2] )0 2 A()I(characters)ES()EA(
with their )0 2 A()I(case)ES()EA( preserved. For details, see
)0 2 A(Section 2.1.4.5 \201Multiple Escape
Characters\202)EA(. 2. )I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 having the )0 402 1 A()I(multiple escape)ES()402 0 TN TL()Ec /AF f D(
)0 2 A()I(syntax
type)ES()EA(. 3. )I(n.)ES( a )0 402 1 A()I(multiple escape)ES()402 0 TN TL()Ec /AF f D([2] )0 2 A()I(character)ES()EA(.
\201In the )0 2 A()I(standard readtable)ES()EA(,
)0 2 A()I(vertical-bar)ES()EA( is a )0 402 1 A()I(multiple escape)ES()402 0 TN TL()Ec /AF f D(
)0 2 A()I(character)ES()EA(.\202)EP(
)0 P()WB 403 Sn()WB 403 Sn()BD(multiple
values)ES()EA( )I(n.)ES( 1. more than one )0 2 A()I(value)ES()EA(. "The function )0 2 A()BD(truncate)ES()EA(
returns multiple values." 2. a variable number of )0 2 A()I(values)ES()EA(, possibly
including zero or one. "The function )0 2 A()BD(values)ES()EA( returns multiple values."
3. a fixed number of values other than one. "The macro )0 2 A()BD(multiple-value-bind)ES()EA(
is among the few operators in Common Lisp which can detect and
manipulate multiple values.")EP(

)BD(N)ES(
)0 P()WB 404 Sn()WB 404 Sn()BD(name)ES()EA( )I(n.)ES(, )I(v.t.)ES(
1. )I(n.)ES( an )0 2 A()I(identifier)ES()EA( by which an )0 2 A()I(object)ES()EA(, a
)0 2 A()I(binding)ES()EA(,
or an )0 2 A()I(exit
point)ES()EA( is referred to by association using a )0 2 A()I(binding)ES()EA(. 2.
)I(v.t.)ES( to give a )0 404 1 A()I(name)ES()404 0 TN TL()Ec /AF f D( to. 3. )I(n.)ES( \201of an )0 2 A()I(object)ES()EA( having a name
component\202 the )0 2 A()I(object)ES()EA( which is that component.
"The string which is a symbol's name is returned by )0 2 A()BD(symbol-name)ES()EA(." 4. )I(n.)ES(
\201of a )0 2 A()I(pathname)ES()EA(\202 a. the name component,
returned by )0 2 A()BD(pathname-name)ES()EA(. b. the
entire namestring, returned by )0 2 A()BD(namestring)ES()EA(. 5. )I(n.)ES( \201of a
)0 2 A()I(character)ES()EA(\202 a )0 2 A()I(string)ES()EA( that
names the )0 2 A()I(character)ES()EA( and that has )0 2 A()I(length)ES()EA( greater
than one. \201All )0 417 1 A()I(non-graphic)ES()417 0 TN TL()Ec /AF f D( )0 2 A()I(characters)ES()EA( are required to have
)0 404 1 A()I(names)ES()404 0 TN TL()Ec /AF f D( unless they have
some )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(attribute)ES()EA( which is not )0 427 1 A()I(null)ES()427 0 TN TL()Ec /AF f D(. Whether or not other
)0 2 A()I(characters)ES()EA( have )0 404 1 A()I(names)ES()404 0 TN TL()Ec /AF f D( is )0 2 A()I(implementation-dependent)ES()EA(.\202)EP(
)0 P()WB 405 Sn()WB 405 Sn()BD(named
constant)ES()EA( )I(n.)ES( a )0 2 A()I(variable)ES()EA( that is defined by
Common Lisp, by the )0 2 A()I(implementation)ES()EA(, or by user
code \201see the )0 2 A()I(macro)ES()EA( )0 2 A()BD(defconstant)ES()EA(\202 to always
)0 2 A()I(yield)ES()EA( the
same )0 2 A()I(value)ES()EA(
when )I(evaluated)ES(. "The value of a named constant may not be
changed by assignment or by binding.")EP(
)0 P()WB 406 Sn()WB 406 Sn()BD(namespace)ES()EA(
)I(n.)ES( 1. )0 2 A()I(bindings)ES()EA( whose denotations are
restricted to a particular kind. "The bindings of names to tags is
the tag namespace." 2. any )0 2 A()I(mapping)ES()EA( whose domain is a set of
)0 404 1 A()I(names)ES()404 0 TN TL()Ec /AF f D(. "A package
defines a namespace.")EP(
)0 P()WB 407 Sn()WB 407 Sn()BD(namestring)ES()EA(
)I(n.)ES( a )0 2 A()I(string)ES()EA( that represents a )0 2 A()I(filename)ES()EA( using
either the )0 2 A()I(standardized)ES()EA( notation for
naming )0 2 A()I(logical pathnames)ES()EA(
described in )0 2 A(Section 19.3.1 \201Syntax
of Logical Pathname Namestrings\202)EA(, or some )0 2 A()I(implementation-defined)ES()EA(
notation for naming a )0 2 A()I(physical pathname)ES()EA(.)EP(
)0 P()WB 408 Sn()WB 408 Sn()BD(newline)ES()EA( )I(n.)ES( the
)0 2 A()I(standard character)ES()EA(
<Newline>, notated for the )0 2 A()I(Lisp reader)ES()EA( as
)TT(#\200Newline)ES(.)EP(
)0 P()WB 409 Sn()WB 409 Sn()BD(next method)ES()EA(
)I(n.)ES( the next )0 2 A()I(method)ES()EA( to be invoked with respect
to a given )0 2 A()I(method)ES()EA( for a particular set of
arguments or argument )0 2 A()I(classes)ES()EA(. See )0 2 A(Section 7.6.6.1.3 \201Applying method combination to the
sorted list of applicable methods\202)EA(.)EP(
)0 P()WB 410 Sn()WB 410 Sn()BD(nickname)ES()EA( )I(n.)ES(
\201of a )0 2 A()I(package)ES()EA(\202 one of possibly several
)0 404 1 A()I(names)ES()404 0 TN TL()Ec /AF f D( that can be used
to refer to the )0 2 A()I(package)ES()EA( but that is not the
primary )0 404 1 A()I(name)ES()404 0 TN TL()Ec /AF f D( of the
)0 2 A()I(package)ES()EA(.)EP(
)0 P()WB 411 Sn()WB 411 Sn()BD(nil)ES()EA( )I(n.)ES( the )0 2 A()I(object)ES()EA( that is
at once the )0 2 A()I(symbol)ES()EA( named )TT("NIL")ES( in the
)TT(COMMON-LISP)ES( package, the )0 2 A()I(empty list)ES()EA(, the )0 2 A()I(boolean)ES()EA( \201or
)0 2 A()I(generalized boolean)ES()EA(\202
representing )0 2 A()I(false)ES()EA(, and the )0 404 1 A()I(name)ES()404 0 TN TL()Ec /AF f D( of the )0 2 A()I(empty type)ES()EA(.)EP(
)0 P()WB 412 Sn()WB 412 Sn()BD(non-atomic)ES()EA(
)I(adj.)ES( being other than an )0 2 A()I(atom)ES()EA(; i.e., being a )0 2 A()I(cons)ES()EA(.)EP(
)0 P()WB 413 Sn()WB 413 Sn()BD(non-constant variable)ES()EA( )I(n.)ES(
a )0 2 A()I(variable)ES()EA( that is not a )0 2 A()I(constant
variable)ES()EA(.)EP(
)0 P()WB 414 Sn()WB 414 Sn()BD(non-correctable)ES()EA( )I(adj.)ES( \201of an
)0 2 A()I(error)ES()EA(\202 not
intentionally )0 2 A()I(correctable)ES()EA(. \201Because of the
dynamic nature of )0 2 A()I(restarts)ES()EA(, it is neither possible
nor generally useful to completely prohibit an )0 2 A()I(error)ES()EA( from being )0 2 A()I(correctable)ES()EA(. This term is
used in order to express an intent that no special effort should be
made by )0 2 A()I(code)ES()EA( signaling an )0 2 A()I(error)ES()EA( to make
that )0 2 A()I(error)ES()EA(
)0 2 A()I(correctable)ES()EA(; however, there
is no actual requirement on )0 2 A()I(conforming programs)ES()EA( or
)0 2 A()I(conforming
implementations)ES()EA( imposed by this term.\202)EP(
)0 P()WB 415 Sn()WB 415 Sn()BD(non-empty)ES()EA(
)I(adj.)ES( having at least one )0 2 A()I(element)ES()EA(.)EP(
)0 P()WB 416 Sn()WB 416 Sn()BD(non-generic function)ES()EA( )I(n.)ES( a
)0 2 A()I(function)ES()EA( that is not a )0 2 A()I(generic
function)ES()EA(.)EP(
)0 P()WB 417 Sn()WB 417 Sn()BD(non-graphic)ES()EA(
)I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 not )0 2 A()I(graphic)ES()EA(. See
)0 2 A(Section 13.1.4.1 \201Graphic
Characters\202)EA(.)EP(
)0 P()WB 418 Sn()WB 418 Sn()BD(non-list)ES()EA( )I(n.)ES(,
)I(adj.)ES( other than a )0 2 A()I(list)ES()EA(; i.e., a )0 420 1 A()I(non-nil)ES()420 0 TN TL()Ec /AF f D( )0 2 A()I(atom)ES()EA(.)EP(
)0 P()WB 419 Sn()WB 419 Sn()BD(non-local
exit)ES()EA( )I(n.)ES( a transfer of control \201and sometimes )0 2 A()I(values)ES()EA(\202 to an
)0 2 A()I(exit
point)ES()EA( for reasons other than a )0 425 1 A()I(normal return)ES()425 0 TN TL()Ec /AF f D(. "The operators )0 2 A()BD(go)ES()EA(, )0 2 A()BD(throw)ES()EA(, and )0 2 A()BD(return-from)ES()EA( cause a
non-local exit.")EP(
)0 P()WB 420 Sn()WB 420 Sn()BD(non-nil)ES()EA( )I(n.)ES(,
)I(adj.)ES( not )0 2 A()BD(nil)ES()EA(. Technically, any )0 2 A()I(object)ES()EA( which is
not )0 2 A()BD(nil)ES()EA( can be
referred to as )0 2 A()I(true)ES()EA(, but that would tend to imply a
unique view of the )0 2 A()I(object)ES()EA( as a )0 2 A()I(generalized
boolean)ES()EA(. Referring to such an )0 2 A()I(object)ES()EA( as )0 420 1 A()I(non-nil)ES()420 0 TN TL()Ec /AF f D( avoids this implication.)EP(
)0 P()WB 421 Sn()WB 421 Sn()BD(non-null lexical
environment)ES()EA( )I(n.)ES( a )0 2 A()I(lexical environment)ES()EA(
that has additional information not present in the )0 2 A()I(global
environment)ES()EA(, such as one or more )0 2 A()I(bindings)ES()EA(.)EP(
)0 P()WB 422 Sn()WB 422 Sn()BD(non-simple)ES()EA(
)I(adj.)ES( not )0 2 A()I(simple)ES()EA(.)EP(
)0 P()WB 423 Sn()WB 423 Sn()BD(non-terminating)ES()EA( )I(adj.)ES( \201of a
)0 2 A()I(macro
character)ES()EA(\202 being such that it is treated as a constituent
)0 2 A()I(character)ES()EA( when it appears in
the middle of an extended token. See )0 2 A(Section 2.2 \201Reader Algorithm\202)EA(.)EP(
)0 P()WB 424 Sn()WB 424 Sn()BD(non-top-level form)ES()EA( )I(n.)ES( a
)0 2 A()I(form)ES()EA( that,
by virtue of its position as a )0 2 A()I(subform)ES()EA( of another )0 2 A()I(form)ES()EA(, is not a
)0 2 A()I(top level
form)ES()EA(. See )0 2 A(Section 3.2.3.1
\201Processing of Top Level Forms\202)EA(.)EP(
)0 P()WB 425 Sn()WB 425 Sn()BD(normal
return)ES()EA( )I(n.)ES( the natural transfer of control and
)0 2 A()I(values)ES()EA(
which occurs after the complete )I(execution)ES( of a )0 2 A()I(form)ES()EA(.)EP(
)0 P()WB 426 Sn()WB 426 Sn()BD(normalized)ES()EA(
)I(adj.)ES(, )I(ANSI)ES(, )I(IEEE)ES( \201of a )0 2 A()I(float)ES()EA(\202 conforming to the
description of "normalized" as described by )I(IEEE Standard for
Binary Floating-Point Arithmetic)ES(. See )0 2 A()I(denormalized)ES()EA(.)EP(
)0 P()WB 427 Sn()WB 427 Sn()BD(null)ES()EA( )I(adj.)ES(, )I(n.)ES(
1. )I(adj.)ES( a. \201of a )0 2 A()I(list)ES()EA(\202 having no )0 2 A()I(elements)ES()EA(: empty. See )0 2 A()I(empty list)ES()EA(.
b. \201of a )0 2 A()I(string)ES()EA(\202 having a )0 2 A()I(length)ES()EA( of zero.
\201It is common, both within this document and in observed spoken
behavior, to refer to an empty string by an apparent definite
reference, as in "the )0 427 1 A()I(null)ES()427 0 TN TL()Ec /AF f D( )0 2 A()I(string)ES()EA(" even though no attempt is
made to )0 2 A()I(intern)ES()EA([2] null strings. The phrase
"a )0 427 1 A()I(null)ES()427 0 TN TL()Ec /AF f D( )0 2 A()I(string)ES()EA(" is
technically more correct, but is generally considered awkward by
most Lisp programmers. As such, the phrase "the )0 427 1 A()I(null)ES()427 0 TN TL()Ec /AF f D( )0 2 A()I(string)ES()EA(" should be treated as an
indefinite reference in all cases except for anaphoric references.\202
c. \201of an )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(attribute)ES()EA( of a )0 2 A()I(character)ES()EA(\202 An
)0 2 A()I(object)ES()EA( to
which the value of that )0 2 A()I(attribute)ES()EA( defaults if no
specific value was requested. 2. )I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(null)ES()EA( \201the only such )0 2 A()I(object)ES()EA( being
)0 2 A()BD(nil)ES()EA(\202.)EP(
)0 P()WB 428 Sn()WB 428 Sn()BD(null lexical environment)ES()EA(
)I(n.)ES( the )0 2 A()I(lexical environment)ES()EA(
which has no )0 2 A()I(bindings)ES()EA(.)EP(
)0 P()WB 429 Sn()WB 429 Sn()BD(number)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(number)ES()EA(.)EP(
)0 P()WB 430 Sn()WB 430 Sn()BD(numeric)ES()EA( )I(adj.)ES(
\201of a )0 2 A()I(character)ES()EA(\202 being one of the
)0 2 A()I(standard characters)ES()EA(
)TT(0)ES( through )I(9)ES(, or being some other )0 2 A()I(graphic)ES()EA( )0 2 A()I(character)ES()EA(
defined by the )0 2 A()I(implementation)ES()EA( to be
)0 430 1 A()I(numeric)ES()430 0 TN TL()Ec /AF f D(.)EP(

)BD(O)ES(
)0 P()WB 431 Sn()WB 431 Sn()BD(object)ES()EA( )I(n.)ES( 1. any
Lisp datum. "The function )0 2 A()BD(cons)ES()EA( creates an object which refers to
two other objects." 2. \201immediately following the name of a )0 2 A()I(type)ES()EA(\202 an )0 431 1 A()I(object)ES()431 0 TN TL()Ec /AF f D( which is of that
)0 2 A()I(type)ES()EA(, used
to emphasize that the )0 431 1 A()I(object)ES()431 0 TN TL()Ec /AF f D( is not just a )0 2 A()I(name)ES()EA( for an object of that )0 2 A()I(type)ES()EA( but really an
)0 2 A()I(element)ES()EA(
of the )0 2 A()I(type)ES()EA(
in cases where )0 431 1 A()I(objects)ES()431 0 TN TL()Ec /AF f D( of that )0 2 A()I(type)ES()EA( \201such as )0 2 A()BD(function)ES()EA( or )0 2 A()BD(class)ES()EA(\202 are commonly referred to
by )0 2 A()I(name)ES()EA(.
"The function )0 2 A()BD(symbol-function)ES()EA( takes a
function name and returns a function object.")EP(
)0 P()WB 432 Sn()WB 432 Sn()BD(object-traversing)ES()EA( )I(adj.)ES(
operating in succession on components of an )0 431 1 A()I(object)ES()431 0 TN TL()Ec /AF f D(. "The operators )0 2 A()BD(mapcar)ES()EA(, )0 2 A()BD(maphash)ES()EA(,
)0 2 A()BD(with-package-iterator)ES()EA(
and )0 2 A()BD(count)ES()EA(
perform object-traversing operations.")EP(
)0 P()WB 433 Sn()WB 433 Sn()BD(open)ES()EA( )I(adj.)ES(,
)I(v.t.)ES( \201a )0 2 A()I(file)ES()EA(\202 1. )I(v.t.)ES( to create and
return a )0 2 A()I(stream)ES()EA( to the )0 2 A()I(file)ES()EA(. 2. )I(adj.)ES( \201of a
)0 2 A()I(stream)ES()EA(\202
having been )I(opened)ES([1], but not yet )0 2 A()I(closed)ES()EA(.)EP(
)0 P()WB 434 Sn()WB 434 Sn()BD(operator)ES()EA( )I(n.)ES(
1. a )0 2 A()I(function)ES()EA(, )0 2 A()I(macro)ES()EA(, or )0 2 A()I(special operator)ES()EA(.
2. a )0 2 A()I(symbol)ES()EA( that names such a )0 2 A()I(function)ES()EA(,
)0 2 A()I(macro)ES()EA(, or
)0 2 A()I(special
operator)ES()EA(. 3. \201in a )0 2 A()BD(function)ES()EA( )0 2 A()I(special form)ES()EA(\202 the )0 2 A()I(cadr)ES()EA( of the
)0 2 A()BD(function)ES()EA(
)0 2 A()I(special
form)ES()EA(, which might be either an )0 434 1 A()I(operator)ES()434 0 TN TL()Ec /AF f D([2] or a )0 2 A()I(lambda expression)ES()EA(. 4.
\201of a )0 2 A()I(compound form)ES()EA(\202 the )0 2 A()I(car)ES()EA( of the )0 2 A()I(compound
form)ES()EA(, which might be either an )0 434 1 A()I(operator)ES()434 0 TN TL()Ec /AF f D([2] or a )0 2 A()I(lambda expression)ES()EA(, and
which is never )TT(\201setf )0 2 A()I(symbol)ES()EA(\202)ES(.)EP(
)0 P()WB 435 Sn()WB 435 Sn()BD(optimize
quality)ES()EA( )I(n.)ES( one of several aspects of a program that
might be optimizable by certain compilers. Since optimizing one
such quality might conflict with optimizing another, relative
priorities for qualities can be established in an )0 2 A()BD(optimize)ES()EA(
)0 2 A()I(declaration)ES()EA(. The )0 2 A()I(standardized)ES()EA( )0 435 1 A()I(optimize qualities)ES()435 0 TN TL()Ec /AF f D(
are )TT(compilation-speed)ES( \201speed of the compilation process\202,
)TT(debug)ES( \201ease of debugging\202, )TT(safety)ES( \201run-time error
checking\202, )TT(space)ES( \201both code size and run-time space\202, and
)TT(speed)ES( \201of the object code\202. )0 2 A()I(Implementations)ES()EA( may define
additional )0 435 1 A()I(optimize
qualities)ES()435 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 436 Sn()WB 436 Sn()BD(optional
parameter)ES()EA( )I(n.)ES( A )0 2 A()I(parameter)ES()EA( for which a
corresponding positional )0 2 A()I(argument)ES()EA( is optional. If the
)0 2 A()I(argument)ES()EA( is not supplied, a
default value is used. See also )0 2 A()I(supplied-p
parameter)ES()EA(.)EP(
)0 P()WB 437 Sn()WB 437 Sn()BD(ordinary
function)ES()EA( )I(n.)ES( a )0 2 A()I(function)ES()EA( that is not a )0 2 A()I(generic
function)ES()EA(.)EP(
)0 P()WB 438 Sn()WB 438 Sn()BD(ordinary lambda list)ES()EA( )I(n.)ES(
the kind of )0 2 A()I(lambda list)ES()EA( used by )0 2 A()BD(lambda)ES()EA(. See
)0 2 A()I(modified lambda list)ES()EA(
and )0 2 A()I(extended lambda
list)ES()EA(. ")0 2 A()BD(defun)ES()EA( uses an ordinary lambda
list.")EP(
)0 P()WB 439 Sn()WB 439 Sn()BD(otherwise inaccessible
part)ES()EA( )I(n.)ES( \201of an )0 431 1 A()I(object)ES()431 0 TN TL()Ec /AF f D(, O1\202 an )0 431 1 A()I(object)ES()431 0 TN TL()Ec /AF f D(, O2, which would be made )0 2 A()I(inaccessible)ES()EA( if O1 were made
)0 2 A()I(inaccessible)ES()EA(. \201Every )0 431 1 A()I(object)ES()431 0 TN TL()Ec /AF f D( is an )0 439 1 A()I(otherwise
inaccessible part)ES()439 0 TN TL()Ec /AF f D( of itself.\202)EP(
)0 P()WB 440 Sn()WB 440 Sn()BD(output)ES()EA( )I(adj.)ES( \201of a
)0 2 A()I(stream)ES()EA(\202
supporting output operations \201i.e., being a "data sink"\202. An
)0 440 1 A()I(output)ES()440 0 TN TL()Ec /AF f D( )0 2 A()I(stream)ES()EA( might
also be an )0 2 A()I(input)ES()EA( )0 2 A()I(stream)ES()EA(, in which case it is
sometimes called a )0 2 A()I(bidirectional)ES()EA( )0 2 A()I(stream)ES()EA(. See the
)0 2 A()I(function)ES()EA( )0 2 A()BD(output-stream-p)ES()EA(.)EP(

)BD(P)ES(
)0 P()WB 441 Sn()WB 441 Sn()BD(package)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(package)ES()EA(.)EP(
)0 P()WB 442 Sn()WB 442 Sn()BD(package cell)ES()EA(
)I(n.)ES( )I(Trad.)ES( \201of a )0 2 A()I(symbol)ES()EA(\202 The )0 455 1 A()I(place)ES()455 0 TN TL()Ec /AF f D( in a )0 2 A()I(symbol)ES()EA( that holds one of possibly
several )0 441 1 A()I(packages)ES()441 0 TN TL()Ec /AF f D( in
which the )0 2 A()I(symbol)ES()EA( is )0 2 A()I(interned)ES()EA(, called the
)0 2 A()I(home
package)ES()EA(, or which holds )0 2 A()BD(nil)ES()EA( if no such )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( exists or is known. See the )0 2 A()I(function)ES()EA(
)0 2 A()BD(symbol-package)ES()EA(.)EP(
)0 P()WB 443 Sn()WB 443 Sn()BD(package
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D(; that is, an
)0 2 A()I(object)ES()EA(
that denotes a )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( and that is one of: a )0 2 A()I(string
designator)ES()EA( \201denoting the )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( that has the )0 2 A()I(string)ES()EA( that it designates as
its )0 2 A()I(name)ES()EA( or
as one of its )0 2 A()I(nicknames)ES()EA(\202, or a )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( \201denoting
itself\202.)EP(
)0 P()WB 444 Sn()WB 444 Sn()BD(package
marker)ES()EA( )I(n.)ES( a character which is used in the textual
notation for a symbol to separate the package name from the symbol
name, and which is )0 2 A()I(colon)ES()EA( in the )0 2 A()I(standard
readtable)ES()EA(. See )0 2 A(Section 2.1
\201Character Syntax\202)EA(.)EP(
)0 P()WB 445 Sn()WB 445 Sn()BD(package
prefix)ES()EA( )I(n.)ES( a notation preceding the )0 2 A()I(name)ES()EA( of a )0 2 A()I(symbol)ES()EA( in text
that is processed by the )0 2 A()I(Lisp reader)ES()EA(, which uses a
)0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( )0 2 A()I(name)ES()EA( followed by
one or more )0 444 1 A()I(package
markers)ES()444 0 TN TL()Ec /AF f D(, and which indicates that the symbol is looked up
in the indicated )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 446 Sn()WB 446 Sn()BD(package
registry)ES()EA( )I(n.)ES( A mapping of )0 2 A()I(names)ES()EA( to )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( )0 2 A()I(objects)ES()EA(. It is possible for there
to be a )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D(
)0 2 A()I(object)ES()EA(
which is not in this mapping; such a )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( is called an )0 2 A()I(unregistered
package)ES()EA(. )0 2 A()I(Operators)ES()EA( such as )0 2 A()BD(find-package)ES()EA( consult this
mapping in order to find a )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( from its )0 2 A()I(name)ES()EA(. )0 2 A()I(Operators)ES()EA( such as )0 2 A()BD(do-all-symbols)ES()EA(, )0 2 A()BD(find-all-symbols)ES()EA(, and
)0 2 A()BD(list-all-packages)ES()EA(
operate only on )0 441 1 A()I(packages)ES()441 0 TN TL()Ec /AF f D( that exist in the )0 446 1 A()I(package
registry)ES()446 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 447 Sn()WB 447 Sn()BD(pairwise)ES()EA( )I(adv.)ES(
\201of an adjective on a set\202 applying individually to all possible
pairings of elements of the set. "The types A, B, and C are
pairwise disjoint if A and B are disjoint, B and C are disjoint,
and A and C are disjoint.")EP(
)0 P()WB 448 Sn()WB 448 Sn()BD(parallel)ES()EA( )I(adj.)ES(
)I(Trad.)ES( \201of )0 2 A()I(binding)ES()EA( or )I(assignment)ES(\202
done in the style of )0 2 A()BD(psetq)ES()EA(, )0 2 A()BD(let)ES()EA(, or )0 2 A()BD(do)ES()EA(; that is, first evaluating all of
the )0 2 A()I(forms)ES()EA(
that produce )0 2 A()I(values)ES()EA(, and only then
)I(assigning)ES( or )0 2 A()I(binding)ES()EA( the )0 2 A()I(variables)ES()EA( \201or )0 455 1 A()I(places)ES()455 0 TN TL()Ec /AF f D(\202. Note that this does
not imply traditional computational "parallelism" since the )0 2 A()I(forms)ES()EA( that produce
)0 2 A()I(values)ES()EA( are
evaluated )0 2 A()I(sequentially)ES()EA(. See )0 2 A()I(sequential)ES()EA(.)EP(
)0 P()WB 449 Sn()WB 449 Sn()BD(parameter)ES()EA(
)I(n.)ES( 1. \201of a )0 2 A()I(function)ES()EA(\202 a )0 2 A()I(variable)ES()EA( in the definition
of a )0 2 A()I(function)ES()EA( which takes on the
)0 2 A()I(value)ES()EA( of a
corresponding )0 2 A()I(argument)ES()EA( \201or of a )0 2 A()I(list)ES()EA( of
corresponding arguments\202 to that )0 2 A()I(function)ES()EA( when it is called, or
which in some cases is given a default value because there is no
corresponding )0 2 A()I(argument)ES()EA(. 2. \201of a )0 2 A()I(format
directive)ES()EA(\202 an )0 2 A()I(object)ES()EA( received as data flow by a
)0 2 A()I(format
directive)ES()EA( due to a prefix notation within the )0 2 A()I(format
string)ES()EA( at the )0 2 A()I(format directive)ES()EA('s point
of use. See )0 2 A(Section 22.3 \201Formatted
Output\202)EA(. "In )TT("~3,'0D")ES(, the number )TT(3)ES( and the
character )TT(#\2000)ES( are parameters to the )TT(~D)ES( format
directive.")EP(
)0 P()WB 450 Sn()WB 450 Sn()BD(parameter specializer)ES()EA( )I(n.)ES(
1. \201of a )0 2 A()I(method)ES()EA(\202 an )0 2 A()I(expression)ES()EA( which
constrains the )0 2 A()I(method)ES()EA( to be applicable only to
)0 2 A()I(argument)ES()EA( sequences in which the
corresponding )0 2 A()I(argument)ES()EA( matches the )0 450 1 A()I(parameter
specializer)ES()450 0 TN TL()Ec /AF f D(. 2. a )0 2 A()I(class)ES()EA(, or a )0 2 A()I(list)ES()EA( )TT(\201eql )0 2 A()I(object)ES()EA(\202)ES(.)EP(
)0 P()WB 451 Sn()WB 451 Sn()BD(parameter specializer name)ES()EA(
)I(n.)ES( 1. \201of a )0 2 A()I(method)ES()EA( definition\202 an expression
used in code to name a )0 450 1 A()I(parameter specializer)ES()450 0 TN TL()Ec /AF f D(. See
)0 2 A(Section 7.6.2 \201Introduction to
Methods\202)EA(. 2. a )0 2 A()I(class)ES()EA(, a )0 2 A()I(symbol)ES()EA( naming a )0 2 A()I(class)ES()EA(, or a
)0 2 A()I(list)ES()EA(
)TT(\201eql )0 2 A()I(form)ES()EA(\202)ES(.)EP(
)0 P()WB 452 Sn()WB 452 Sn()BD(pathname)ES()EA( )I(n.)ES(
an )0 2 A()I(object)ES()EA(
of )0 2 A()I(type)ES()EA(
)0 2 A()BD(pathname)ES()EA(,
which is a structured representation of the name of a )0 2 A()I(file)ES()EA(. A )0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D( has six
components: a "host," a "device," a "directory," a "name," a
"type," and a "version.")EP(
)0 P()WB 453 Sn()WB 453 Sn()BD(pathname designator)ES()EA( )I(n.)ES( a
)0 2 A()I(designator)ES()EA( for a )0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D(; that is, an
)0 2 A()I(object)ES()EA(
that denotes a )0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D( and that is one of: a )0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D( )0 2 A()I(namestring)ES()EA(
\201denoting the corresponding )0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D(\202, a )0 2 A()I(stream associated
with a file)ES()EA( \201denoting the )0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D( used to open the )0 2 A()I(file)ES()EA(; this may be,
but is not required to be, the actual name of the )0 2 A()I(file)ES()EA(\202, or a
)0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D( \201denoting
itself\202. See )0 2 A(Section 21.1.1.1.2
\201Open and Closed Streams\202)EA(.)EP(
)0 P()WB 454 Sn()WB 454 Sn()BD(physical
pathname)ES()EA( )I(n.)ES( a )0 452 1 A()I(pathname)ES()452 0 TN TL()Ec /AF f D( that is not a )0 2 A()I(logical
pathname)ES()EA(.)EP(
)0 P()WB 455 Sn()WB 455 Sn()BD(place)ES()EA( )I(n.)ES( 1. a
)0 2 A()I(form)ES()EA( which
is suitable for use as a )0 2 A()I(generalized
reference)ES()EA(. 2. the conceptual location referred to by such a
)0 455 1 A()I(place)ES()455 0 TN TL()Ec /AF f D([1].)EP(
)0 P()WB 456 Sn()WB 456 Sn()BD(plist)ES()EA( ['pee,list]
)I(n.)ES( a )0 487 1 A()I(property
list)ES()487 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 457 Sn()WB 457 Sn()BD(portable)ES()EA( )I(adj.)ES(
\201of )0 2 A()I(code)ES()EA(\202
required to produce equivalent results and observable side effects
in all )0 2 A()I(conforming
implementations)ES()EA(.)EP(
)0 P()WB 458 Sn()WB 458 Sn()BD(potential
copy)ES()EA( )I(n.)ES( \201of an )0 2 A()I(object)ES()EA( O1 subject to constriants\202
an )0 2 A()I(object)ES()EA(
O2 that if the specified constraints are satisfied by O1 without
any modification might or might not be )0 2 A()I(identical)ES()EA( to O1, or else that
must be a )0 2 A()I(fresh)ES()EA( )0 2 A()I(object)ES()EA( that resembles a )0 2 A()I(copy)ES()EA( of O1 except
that it has been modified as necessary to satisfy the
constraints.)EP(
)0 P()WB 459 Sn()WB 459 Sn()BD(potential
number)ES()EA( )I(n.)ES( A textual notation that might be parsed by
the )0 2 A()I(Lisp
reader)ES()EA( in some )0 2 A()I(conforming
implementation)ES()EA( as a )0 2 A()I(number)ES()EA( but is not required to be
parsed as a )0 2 A()I(number)ES()EA(. No )0 2 A()I(object)ES()EA( is a )0 459 1 A()I(potential
number)ES()459 0 TN TL()Ec /AF f D(---either an )0 2 A()I(object)ES()EA( is a )0 2 A()I(number)ES()EA( or it is not. See
)0 2 A(Section 2.3.1.1 \201Potential Numbers
as Tokens\202)EA(.)EP(
)0 P()WB 460 Sn()WB 460 Sn()BD(pprint dispatch table)ES()EA( )I(n.)ES(
an )0 2 A()I(object)ES()EA(
that can be the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*print-pprint-dispatch*)ES()EA(
and hence can control how )0 2 A()I(objects)ES()EA( are printed when )0 2 A()BD(*print-pretty*)ES()EA( is
)0 2 A()I(true)ES()EA(. See
)0 2 A(Section 22.2.1.4 \201Pretty Print
Dispatch Tables\202)EA(.)EP(
)0 P()WB 461 Sn()WB 461 Sn()BD(predicate)ES()EA(
)I(n.)ES( a )0 2 A()I(function)ES()EA( that returns a )0 2 A()I(generalized
boolean)ES()EA( as its first value.)EP(
)0 P()WB 462 Sn()WB 462 Sn()BD(present)ES()EA( )I(n.)ES( 1.
\201of a )0 2 A()I(feature)ES()EA( in a )0 2 A()I(Lisp image)ES()EA(\202 a state of
being that is in effect if and only if the )0 2 A()I(symbol)ES()EA( naming the )0 2 A()I(feature)ES()EA( is an
)0 2 A()I(element)ES()EA(
of the )0 2 A()I(features list)ES()EA(. 2. \201of a
)0 2 A()I(symbol)ES()EA( in
a )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D(\202 being
accessible in that )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D( directly, rather than being inherited
from another )0 441 1 A()I(package)ES()441 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 463 Sn()WB 463 Sn()BD(pretty print)ES()EA(
)I(v.t.)ES( \201an )0 2 A()I(object)ES()EA(\202 to invoke the )0 464 1 A()I(pretty printer)ES()464 0 TN TL()Ec /AF f D( on
the )0 2 A()I(object)ES()EA(.)EP(
)0 P()WB 464 Sn()WB 464 Sn()BD(pretty
printer)ES()EA( )I(n.)ES( the procedure that prints the character
representation of an )0 2 A()I(object)ES()EA( onto a )0 2 A()I(stream)ES()EA( when the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*print-pretty*)ES()EA( is
)0 2 A()I(true)ES()EA(, and
that uses layout techniques \201e.g., indentation\202 that tend to
highlight the structure of the )0 2 A()I(object)ES()EA( in a way that makes it
easier for human readers to parse visually. See the )0 2 A()I(variable)ES()EA(
)0 2 A()BD(*print-pprint-dispatch*)ES()EA(
and )0 2 A(Section 22.2 \201The Lisp Pretty
Printer\202)EA(.)EP(
)0 P()WB 465 Sn()WB 465 Sn()BD(pretty printing stream)ES()EA(
)I(n.)ES( a )0 2 A()I(stream)ES()EA( that does pretty printing.
Such streams are created by the )0 2 A()I(function)ES()EA( )0 2 A()BD(pprint-logical-block)ES()EA(
as a link between the output stream and the logical block.)EP(
)0 P()WB 466 Sn()WB 466 Sn()BD(primary
method)ES()EA( )I(n.)ES( a member of one of two sets of )0 2 A()I(methods)ES()EA( \201the set
of )0 2 A()I(auxiliary methods)ES()EA( is the
other\202 that form an exhaustive partition of the set of )0 2 A()I(methods)ES()EA( on the
)0 2 A()I(method)ES()EA('s
)0 2 A()I(generic
function)ES()EA(. How these sets are determined is dependent on the
)0 2 A()I(method combination)ES()EA(
type; see )0 2 A(Section 7.6.2
\201Introduction to Methods\202)EA(.)EP(
)0 P()WB 467 Sn()WB 467 Sn()BD(primary
value)ES()EA( )I(n.)ES( \201of )0 2 A()I(values)ES()EA( resulting from the )0 2 A()I(evaluation)ES()EA(
of a )0 2 A()I(form)ES()EA(\202
the first )0 2 A()I(value)ES()EA(, if any, or else )0 2 A()BD(nil)ES()EA( if there are no
)0 2 A()I(values)ES()EA(.
"The primary value returned by )0 2 A()BD(truncate)ES()EA( is an integer quotient,
truncated toward zero.")EP(
)0 P()WB 468 Sn()WB 468 Sn()BD(principal)ES()EA(
)I(adj.)ES( \201of a value returned by a Common Lisp )0 2 A()I(function)ES()EA( that
implements a mathematically irrational or transcendental function
defined in the complex domain\202 of possibly many \201sometimes an
infinite number of\202 correct values for the mathematical function,
being the particular )0 2 A()I(value)ES()EA( which the corresponding
Common Lisp )0 2 A()I(function)ES()EA( has been defined to
return.)EP(
)0 P()WB 469 Sn()WB 469 Sn()BD(print name)ES()EA(
)I(n.)ES( )I(Trad.)ES( \201usually of a )0 2 A()I(symbol)ES()EA(\202 a )0 2 A()I(name)ES()EA([3].)EP(
)0 P()WB 470 Sn()WB 470 Sn()BD(printer control variable)ES()EA(
)I(n.)ES( a )0 2 A()I(variable)ES()EA( whose specific purpose
is to control some action of the )0 2 A()I(Lisp printer)ES()EA(; that is, one
of the )0 2 A()I(variables)ES()EA( in )0 2 A(Figure 22-1)EA(, or else
some )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(variable)ES()EA( which is defined by the
)0 2 A()I(implementation)ES()EA( to be a
)0 470 1 A()I(printer
control variable)ES()470 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 471 Sn()WB 471 Sn()BD(printer
escaping)ES()EA( )I(n.)ES( The combined state of the )0 470 1 A()I(printer control
variables)ES()470 0 TN TL()Ec /AF f D( )0 2 A()BD(*print-escape*)ES()EA( and
)0 2 A()BD(*print-readably*)ES()EA(. If
the value of either )0 2 A()BD(*print-readably*)ES()EA( or
)0 2 A()BD(*print-escape*)ES()EA( is
)0 2 A()I(true)ES()EA(, then
)0 471 1 A()I(printer
escaping)ES()471 0 TN TL()Ec /AF f D( is "enabled"; otherwise \201if the values of both
)0 2 A()BD(*print-readably*)ES()EA( and
)0 2 A()BD(*print-escape*)ES()EA( are
)0 2 A()I(false)ES()EA(\202,
then )0 471 1 A()I(printer
escaping)ES()471 0 TN TL()Ec /AF f D( is "disabled".)EP(
)0 P()WB 472 Sn()WB 472 Sn()BD(printing)ES()EA( )I(adj.)ES(
\201of a )0 2 A()I(character)ES()EA(\202 being a )0 2 A()I(graphic)ES()EA( )0 2 A()I(character)ES()EA(
other than )0 2 A()I(space)ES()EA(.)EP(
)0 P()WB 473 Sn()WB 473 Sn()BD(process)ES()EA( )I(v.t.)ES( \201a
)0 2 A()I(form)ES()EA( by the
)0 2 A()I(compiler)ES()EA(\202 to perform )0 2 A()I(minimal
compilation)ES()EA(, determining the time of evaluation for a
)0 2 A()I(form)ES()EA(, and
possibly )I(evaluating)ES( that )0 2 A()I(form)ES()EA( \201if required\202.)EP(
)0 P()WB 474 Sn()WB 474 Sn()BD(processor)ES()EA(
)I(n.)ES(, )I(ANSI)ES( an )0 2 A()I(implementation)ES()EA(.)EP(
)0 P()WB 475 Sn()WB 475 Sn()BD(proclaim)ES()EA( )I(v.t.)ES(
\201a )0 476 1 A()I(proclamation)ES()476 0 TN TL()Ec /AF f D(\202 to )0 2 A()I(establish)ES()EA( that )0 476 1 A()I(proclamation)ES()476 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 476 Sn()WB 476 Sn()BD(proclamation)ES()EA(
)I(n.)ES( a )0 2 A()I(global
declaration)ES()EA(.)EP(
)0 P()WB 477 Sn()WB 477 Sn()BD(prog tag)ES()EA( )I(n.)ES(
)I(Trad.)ES( a )0 2 A()I(go
tag)ES()EA(.)EP(
)0 P()WB 478 Sn()WB 478 Sn()BD(program)ES()EA( )I(n.)ES(
)I(Trad.)ES( Common Lisp )0 2 A()I(code)ES()EA(.)EP(
)0 P()WB 479 Sn()WB 479 Sn()BD(programmer)ES()EA(
)I(n.)ES( an active entity, typically a human, that writes a
)0 478 1 A()I(program)ES()478 0 TN TL()Ec /AF f D(, and that
might or might not also be a )0 2 A()I(user)ES()EA( of the )0 478 1 A()I(program)ES()478 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 480 Sn()WB 480 Sn()BD(programmer
code)ES()EA( )I(n.)ES( )0 2 A()I(code)ES()EA( that is supplied by the
programmer; that is, )0 2 A()I(code)ES()EA( that is not )0 2 A()I(system code)ES()EA(.)EP(
)0 P()WB 481 Sn()WB 481 Sn()BD(proper list)ES()EA(
)I(n.)ES( A )0 2 A()I(list)ES()EA( terminated by the )0 2 A()I(empty list)ES()EA(.
\201The )0 2 A()I(empty
list)ES()EA( is a )0 481 1 A()I(proper
list)ES()481 0 TN TL()Ec /AF f D(.\202 See )0 2 A()I(improper list)ES()EA(.)EP(
)0 P()WB 482 Sn()WB 482 Sn()BD(proper name)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(class)ES()EA(\202 a )0 2 A()I(symbol)ES()EA( that )0 2 A()I(names)ES()EA( the )0 2 A()I(class)ES()EA( whose )0 2 A()I(name)ES()EA( is that
)0 2 A()I(symbol)ES()EA(.
See the )0 2 A()I(functions)ES()EA( )0 2 A()BD(class-name)ES()EA( and )0 2 A()BD(find-class)ES()EA(.)EP(
)0 P()WB 483 Sn()WB 483 Sn()BD(proper
sequence)ES()EA( )I(n.)ES( a )0 2 A()I(sequence)ES()EA( which is not an )0 2 A()I(improper
list)ES()EA(; that is, a )0 2 A()I(vector)ES()EA( or a )0 481 1 A()I(proper list)ES()481 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 484 Sn()WB 484 Sn()BD(proper
subtype)ES()EA( )I(n.)ES( \201of a )0 2 A()I(type)ES()EA(\202 a )0 2 A()I(subtype)ES()EA( of the )0 2 A()I(type)ES()EA( which is not
the )0 2 A()I(same)ES()EA(
)0 2 A()I(type)ES()EA( as the
)0 2 A()I(type)ES()EA( \201i.e.,
its )0 2 A()I(elements)ES()EA( are a "proper subset" of
the )0 2 A()I(type)ES()EA(\202.)EP(
)0 P()WB 485 Sn()WB 485 Sn()BD(property)ES()EA( )I(n.)ES(
\201of a )0 487 1 A()I(property
list)ES()487 0 TN TL()Ec /AF f D(\202 1. a conceptual pairing of a )0 486 1 A()I(property indicator)ES()486 0 TN TL()Ec /AF f D( and its
associated )0 488 1 A()I(property
value)ES()488 0 TN TL()Ec /AF f D( on a )0 487 1 A()I(property list)ES()487 0 TN TL()Ec /AF f D(. 2. a )0 488 1 A()I(property value)ES()488 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 486 Sn()WB 486 Sn()BD(property
indicator)ES()EA( )I(n.)ES( \201of a )0 487 1 A()I(property list)ES()487 0 TN TL()Ec /AF f D(\202 the )0 2 A()I(name)ES()EA( part of a )0 485 1 A()I(property)ES()485 0 TN TL()Ec /AF f D(, used as a
)0 2 A()I(key)ES()EA( when
looking up a )0 488 1 A()I(property
value)ES()488 0 TN TL()Ec /AF f D( on a )0 487 1 A()I(property list)ES()487 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 487 Sn()WB 487 Sn()BD(property
list)ES()EA( )I(n.)ES( 1. a )0 2 A()I(list)ES()EA( containing an even number of
)0 2 A()I(elements)ES()EA(
that are alternating )0 2 A()I(names)ES()EA( \201sometimes called )0 2 A()I(indicators)ES()EA( or
)0 2 A()I(keys)ES()EA(\202 and
)0 2 A()I(values)ES()EA(
\201sometimes called )0 485 1 A()I(properties)ES()485 0 TN TL()Ec /AF f D(\202. When there is more than one
)0 2 A()I(name)ES()EA( and
)0 2 A()I(value)ES()EA( pair
with the )0 2 A()I(identical)ES()EA( )0 2 A()I(name)ES()EA( in a )0 487 1 A()I(property list)ES()487 0 TN TL()Ec /AF f D(, the first such pair
determines the )0 485 1 A()I(property)ES()485 0 TN TL()Ec /AF f D(. 2. \201of a )0 2 A()I(symbol)ES()EA(\202 the component of the
)0 2 A()I(symbol)ES()EA(
containing a )0 487 1 A()I(property
list)ES()487 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 488 Sn()WB 488 Sn()BD(property
value)ES()EA( )I(n.)ES( \201of a )0 486 1 A()I(property indicator)ES()486 0 TN TL()Ec /AF f D( on a )0 487 1 A()I(property list)ES()487 0 TN TL()Ec /AF f D(\202 the
)0 2 A()I(object)ES()EA(
associated with the )0 486 1 A()I(property indicator)ES()486 0 TN TL()Ec /AF f D( on the )0 487 1 A()I(property list)ES()487 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 489 Sn()WB 489 Sn()BD(purports to conform)ES()EA( )I(v.)ES(
makes a good-faith claim of conformance. This term expresses
intention to conform, regardless of whether the goal of that
intention is realized in practice. For example, language
implementations have been known to have bugs, and while an )0 2 A()I(implementation)ES()EA( of this
specification with bugs might not be a )0 2 A()I(conforming
implementation)ES()EA(, it can still )I(purport to conform)ES(.
This is an important distinction in certain specific cases; e.g.,
see the )0 2 A()I(variable)ES()EA( )0 2 A()BD(*features*)ES()EA(.)EP(

)BD(Q)ES(
)0 P()WB 490 Sn()WB 490 Sn()BD(qualified
method)ES()EA( )I(n.)ES( a )0 2 A()I(method)ES()EA( that has one or more
)0 491 1 A()I(qualifiers)ES()491 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 491 Sn()WB 491 Sn()BD(qualifier)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(method)ES()EA( for a )0 2 A()I(generic function)ES()EA(\202
one of possibly several )0 2 A()I(objects)ES()EA( used to annotate the
)0 2 A()I(method)ES()EA( in
a way that identifies its role in the )0 2 A()I(method combination)ES()EA(.
The )0 2 A()I(method combination)ES()EA(
)0 2 A()I(type)ES()EA(
determines how many )0 491 1 A()I(qualifiers)ES()491 0 TN TL()Ec /AF f D( are permitted for each )0 2 A()I(method)ES()EA(, which
)0 491 1 A()I(qualifiers)ES()491 0 TN TL()Ec /AF f D( are
permitted, and the semantics of those )0 491 1 A()I(qualifiers)ES()491 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 492 Sn()WB 492 Sn()BD(query I/O)ES()EA(
)I(n.)ES( the )0 2 A()I(bidirectional)ES()EA( )0 2 A()I(stream)ES()EA( that is
the )0 2 A()I(value)ES()EA(
of the )0 2 A()I(variable)ES()EA( )0 2 A()BD(*query-io*)ES()EA(.)EP(
)0 P()WB 493 Sn()WB 493 Sn()BD(quoted
object)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( which is the second element
of a )0 2 A()BD(quote)ES()EA(
)0 2 A()I(form)ES()EA(.)EP(

)BD(R)ES(
)0 P()WB 494 Sn()WB 494 Sn()BD(radix)ES()EA( )I(n.)ES( an )0 2 A()I(integer)ES()EA( between
2 and 36, inclusive, which can be used to designate a base with
respect to which certain kinds of numeric input or output are
performed. \201There are n valid digit characters for any given
)0 494 1 A()I(radix)ES()494 0 TN TL()Ec /AF f D( n, and those
digits are the first n digits in the sequence )TT(0)ES(,
)TT(1)ES(, ..., )TT(9)ES(, )TT(A)ES(, )TT(B)ES(, ...,
)TT(Z)ES(, which have the weights )TT(0)ES(, )TT(1)ES(, ...,
)TT(9)ES(, )TT(10)ES(, )TT(11)ES(, ..., )TT(35)ES(,
respectively. Case is not significant in parsing numbers of radix
greater than )TT(10)ES(, so "9b8a" and "9B8A" denote the same
)0 494 1 A()I(radix)ES()494 0 TN TL()Ec /AF f D( )TT(16)ES(
number.\202)EP(
)0 P()WB 495 Sn()WB 495 Sn()BD(random state)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(random-state)ES()EA(.)EP(
)0 P()WB 496 Sn()WB 496 Sn()BD(rank)ES()EA( )I(n.)ES( a
non-negative )0 2 A()I(integer)ES()EA( indicating the number of
)0 2 A()I(dimensions)ES()EA( of an )0 2 A()I(array)ES()EA(.)EP(
)0 P()WB 497 Sn()WB 497 Sn()BD(ratio)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(ratio)ES()EA(.)EP(
)0 P()WB 498 Sn()WB 498 Sn()BD(ratio marker)ES()EA(
)I(n.)ES( a character which is used in the textual notation for a
)0 497 1 A()I(ratio)ES()497 0 TN TL()Ec /AF f D( to separate the
numerator from the denominator, and which is )0 2 A()I(slash)ES()EA( in the )0 2 A()I(standard
readtable)ES()EA(. See )0 2 A(Section 2.1
\201Character Syntax\202)EA(.)EP(
)0 P()WB 499 Sn()WB 499 Sn()BD(rational)ES()EA( )I(n.)ES(
an )0 2 A()I(object)ES()EA(
of )0 2 A()I(type)ES()EA(
)0 2 A()BD(rational)ES()EA(.)EP(
)0 P()WB 500 Sn()WB 500 Sn()BD(read)ES()EA( )I(v.t.)ES( 1. \201a
)0 2 A()I(binding)ES()EA(
or )0 2 A()I(slot)ES()EA( or
component\202 to obtain the )0 2 A()I(value)ES()EA( of the )0 2 A()I(binding)ES()EA( or )0 2 A()I(slot)ES()EA(. 2. \201an
)0 2 A()I(object)ES()EA(
from a )0 2 A()I(stream)ES()EA(\202 to parse an )0 2 A()I(object)ES()EA( from its
representation on the )0 2 A()I(stream)ES()EA(.)EP(
)0 P()WB 501 Sn()WB 501 Sn()BD(readably)ES()EA( )I(adv.)ES(
\201of a manner of printing an )0 2 A()I(object)ES()EA( O1\202 in such a way as to
permit the )0 2 A()I(Lisp Reader)ES()EA( to later
)I(parse)ES( the printed output into an )0 2 A()I(object)ES()EA( O2 that is )0 2 A()I(similar)ES()EA( to
O1.)EP(
)0 P()WB 502 Sn()WB 502 Sn()BD(reader)ES()EA( )I(n.)ES( 1. a
)0 2 A()I(function)ES()EA( that )0 500 1 A()I(reads)ES()500 0 TN TL()Ec /AF f D([1] a )0 2 A()I(variable)ES()EA( or )0 2 A()I(slot)ES()EA(. 2. the
)0 2 A()I(Lisp
reader)ES()EA(.)EP(
)0 P()WB 503 Sn()WB 503 Sn()BD(reader macro)ES()EA(
)I(n.)ES( 1. a textual notation introduced by dispatch on one or
two )0 2 A()I(characters)ES()EA( that defines
special-purpose syntax for use by the )0 2 A()I(Lisp reader)ES()EA(, and that is
implemented by a )0 504 1 A()I(reader macro function)ES()504 0 TN TL()Ec /AF f D(. See
)0 2 A(Section 2.2 \201Reader Algorithm\202)EA(.
2. the )0 2 A()I(character)ES()EA( or )0 2 A()I(characters)ES()EA(
that introduce a )0 503 1 A()I(reader
macro)ES()503 0 TN TL()Ec /AF f D([1]; that is, a )0 2 A()I(macro character)ES()EA( or the
conceptual pairing of a )0 2 A()I(dispatching macro
character)ES()EA( and the )0 2 A()I(character)ES()EA( that follows it. \201A
)0 503 1 A()I(reader macro)ES()503 0 TN TL()Ec /AF f D( is
not a kind of )0 2 A()I(macro)ES()EA(.\202)EP(
)0 P()WB 504 Sn()WB 504 Sn()BD(reader macro function)ES()EA( )I(n.)ES(
a )0 2 A()I(function)ES()EA( )0 2 A()I(designator)ES()EA( that denotes a
)0 2 A()I(function)ES()EA( that implements a
)0 503 1 A()I(reader
macro)ES()503 0 TN TL()Ec /AF f D([2]. See the )0 2 A()I(functions)ES()EA( )0 2 A()BD(set-macro-character)ES()EA(
and )0 2 A()BD(set-dispatch-macro-character)ES()EA(.)EP(
)0 P()WB 505 Sn()WB 505 Sn()BD(readtable)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(readtable)ES()EA(.)EP(
)0 P()WB 506 Sn()WB 506 Sn()BD(readtable
case)ES()EA( )I(n.)ES( an attribute of a )0 505 1 A()I(readtable)ES()505 0 TN TL()Ec /AF f D( whose value is a )0 2 A()I(case
sensitivity mode)ES()EA(, and that selects the manner in which
)0 2 A()I(characters)ES()EA( in a )0 2 A()I(symbol)ES()EA('s )0 2 A()I(name)ES()EA( are to be
treated by the )0 2 A()I(Lisp reader)ES()EA( and the )0 2 A()I(Lisp
printer)ES()EA(. See )0 2 A(Section 23.1.2
\201Effect of Readtable Case on the Lisp Reader\202)EA( and )0 2 A(Section 22.1.3.3.2 \201Effect of Readtable
Case on the Lisp Printer\202)EA(.)EP(
)0 P()WB 507 Sn()WB 507 Sn()BD(readtable designator)ES()EA( )I(n.)ES( a
)0 2 A()I(designator)ES()EA( for a )0 505 1 A()I(readtable)ES()505 0 TN TL()Ec /AF f D(; that is, an
)0 2 A()I(object)ES()EA(
that denotes a )0 505 1 A()I(readtable)ES()505 0 TN TL()Ec /AF f D( and that is one of: )0 2 A()BD(nil)ES()EA( \201denoting the
)0 2 A()I(standard readtable)ES()EA(\202,
or a )0 505 1 A()I(readtable)ES()505 0 TN TL()Ec /AF f D(
\201denoting itself\202.)EP(
)0 P()WB 508 Sn()WB 508 Sn()BD(recognizable subtype)ES()EA( )I(n.)ES(
\201of a )0 2 A()I(type)ES()EA(\202
a )0 2 A()I(subtype)ES()EA( of the )0 2 A()I(type)ES()EA( which can be
reliably detected to be such by the )0 2 A()I(implementation)ES()EA(. See the
)0 2 A()I(function)ES()EA( )0 2 A()BD(subtypep)ES()EA(.)EP(
)0 P()WB 509 Sn()WB 509 Sn()BD(reference)ES()EA(
)I(n.)ES(, )I(v.t.)ES( 1. )I(n.)ES( an act or occurrence of
referring to an )0 2 A()I(object)ES()EA(, a )0 2 A()I(binding)ES()EA(, an )0 2 A()I(exit point)ES()EA(,
a )0 2 A()I(tag)ES()EA(, or an
)0 2 A()I(environment)ES()EA(. 2. )I(v.t.)ES(
to refer to an )0 2 A()I(object)ES()EA(, a )0 2 A()I(binding)ES()EA(, an )0 2 A()I(exit point)ES()EA(,
a )0 2 A()I(tag)ES()EA(, or an
)0 2 A()I(environment)ES()EA(, usually by
)0 2 A()I(name)ES()EA(.)EP(
)0 P()WB 510 Sn()WB 510 Sn()BD(registered package)ES()EA( )I(n.)ES( a
)0 2 A()I(package)ES()EA(
)0 2 A()I(object)ES()EA(
that is installed in the )0 2 A()I(package registry)ES()EA(. \201Every
)0 510 1 A()I(registered
package)ES()510 0 TN TL()Ec /AF f D( has a )0 2 A()I(name)ES()EA( that is a )0 2 A()I(string)ES()EA(, as well as zero or
more )0 2 A()I(string)ES()EA( nicknames. All )0 2 A()I(packages)ES()EA( that
are initially specified by Common Lisp or created by )0 2 A()BD(make-package)ES()EA( or )0 2 A()BD(defpackage)ES()EA(
are )0 510 1 A()I(registered
packages)ES()510 0 TN TL()Ec /AF f D(. )0 510 1 A()I(Registered packages)ES()510 0 TN TL()Ec /AF f D( can be turned
into )0 2 A()I(unregistered
packages)ES()EA( by )0 2 A()BD(delete-package)ES()EA(.\202)EP(
)0 P()WB 511 Sn()WB 511 Sn()BD(relative)ES()EA( )I(adj.)ES(
1. \201of a )0 2 A()I(time)ES()EA(\202 representing an offset from an
)0 2 A()I(absolute)ES()EA( )0 2 A()I(time)ES()EA( in the units appropriate
to that time. For example, a )0 511 1 A()I(relative)ES()511 0 TN TL()Ec /AF f D( )0 2 A()I(internal time)ES()EA( is the
difference between two )0 2 A()I(absolute)ES()EA( )0 2 A()I(internal times)ES()EA(, and is
measured in )0 2 A()I(internal time units)ES()EA(.
2. \201of a )0 2 A()I(pathname)ES()EA(\202 representing a
position in a directory hierarchy by motion from a position other
than the root, which might therefore vary. "The notation
)TT(#P"../foo.text")ES( denotes a relative pathname if the host
file system is Unix." See )0 2 A()I(absolute)ES()EA(.)EP(
)0 P()WB 512 Sn()WB 512 Sn()BD(repertoire)ES()EA(
)I(n.)ES(, )I(ISO)ES( a )0 2 A()I(subtype)ES()EA( of )0 2 A()BD(character)ES()EA(. See )0 2 A(Section 13.1.2.2 \201Character Repertoires\202)EA(.)EP(
)0 P()WB 513 Sn()WB 513 Sn()BD(report)ES()EA( )I(n.)ES( \201of a
)0 2 A()I(condition)ES()EA(\202 to )0 2 A()I(call)ES()EA( the )0 2 A()I(function)ES()EA(
)0 2 A()BD(print-object)ES()EA( on the )0 2 A()I(condition)ES()EA( in
an )0 2 A()I(environment)ES()EA( where the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*print-escape*)ES()EA( is
)0 2 A()I(false)ES()EA(.)EP(
)0 P()WB 514 Sn()WB 514 Sn()BD(report
message)ES()EA( )I(n.)ES( the text that is output by a )0 2 A()I(condition
reporter)ES()EA(.)EP(
)0 P()WB 515 Sn()WB 515 Sn()BD(required
parameter)ES()EA( )I(n.)ES( A )0 2 A()I(parameter)ES()EA( for which a
corresponding positional )0 2 A()I(argument)ES()EA( must be supplied when
)I(calling)ES( the )0 2 A()I(function)ES()EA(.)EP(
)0 P()WB 516 Sn()WB 516 Sn()BD(rest list)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(function)ES()EA( having a )0 517 1 A()I(rest parameter)ES()517 0 TN TL()Ec /AF f D(\202 The
)0 2 A()I(list)ES()EA( to
which the )0 517 1 A()I(rest
parameter)ES()517 0 TN TL()Ec /AF f D( is )0 2 A()I(bound)ES()EA( on some particular )0 2 A()I(call)ES()EA( to the
)0 2 A()I(function)ES()EA(.)EP(
)0 P()WB 517 Sn()WB 517 Sn()BD(rest
parameter)ES()EA( )I(n.)ES( A )0 2 A()I(parameter)ES()EA( which was introduced
by )TT(&rest)ES(.)EP(
)0 P()WB 518 Sn()WB 518 Sn()BD(restart)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(restart)ES()EA(.)EP(
)0 P()WB 519 Sn()WB 519 Sn()BD(restart
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 518 1 A()I(restart)ES()518 0 TN TL()Ec /AF f D(; that is, an
)0 2 A()I(object)ES()EA(
that denotes a )0 518 1 A()I(restart)ES()518 0 TN TL()Ec /AF f D( and that is one of: a )0 2 A()I(non-nil)ES()EA( )0 2 A()I(symbol)ES()EA( \201denoting
the most recently established )0 2 A()I(active)ES()EA( )0 518 1 A()I(restart)ES()518 0 TN TL()Ec /AF f D( whose )0 2 A()I(name)ES()EA( is that )0 2 A()I(symbol)ES()EA(\202, or a )0 518 1 A()I(restart)ES()518 0 TN TL()Ec /AF f D( \201denoting
itself\202.)EP(
)0 P()WB 520 Sn()WB 520 Sn()BD(restart
function)ES()EA( )I(n.)ES( a )0 2 A()I(function)ES()EA( that invokes a )0 518 1 A()I(restart)ES()518 0 TN TL()Ec /AF f D(, as if by )0 2 A()BD(invoke-restart)ES()EA(. The
primary purpose of a )0 520 1 A()I(restart function)ES()520 0 TN TL()Ec /AF f D( is to provide an
alternate interface. By convention, a )0 520 1 A()I(restart function)ES()520 0 TN TL()Ec /AF f D( usually has the
same name as the )0 518 1 A()I(restart)ES()518 0 TN TL()Ec /AF f D( which it invokes. The next figure
shows a list of the )0 2 A()I(standardized)ES()EA( )0 520 1 A()I(restart
functions)ES()520 0 TN TL()Ec /AF f D(.)EP(
) 2 35 PR()0 2 A(abort)EA(     )0 2 A(muffle-warning)EA(  )0 2 A(use-value)EA(  
)0 2 A(continue)EA(  )0 2 A(store-value)EA()RP(
)0 P()BD(Figure 26-4. Standardized Restart Functions)ES()EP(
)0 P()WB 521 Sn()WB 521 Sn()BD(return)ES()EA( )I(v.t.)ES( \201of
)0 2 A()I(values)ES()EA(\202 1.
\201from a )0 2 A()I(block)ES()EA(\202 to transfer control and
)0 2 A()I(values)ES()EA(
from the )0 2 A()I(block)ES()EA(; that is, to cause the
)0 2 A()I(block)ES()EA( to
)0 2 A()I(yield)ES()EA( the
)0 2 A()I(values)ES()EA(
immediately without doing any further evaluation of the )0 2 A()I(forms)ES()EA( in its body.
2. \201from a )0 2 A()I(form)ES()EA(\202 to )0 2 A()I(yield)ES()EA( the )0 2 A()I(values)ES()EA(.)EP(
)0 P()WB 522 Sn()WB 522 Sn()BD(return value)ES()EA(
)I(n.)ES( )I(Trad.)ES( a )0 2 A()I(value)ES()EA([1])EP(
)0 P()WB 523 Sn()WB 523 Sn()BD(right-parenthesis)ES()EA( )I(n.)ES( the
)0 2 A()I(standard character)ES()EA(
")TT(\202)ES(", that is variously called "right parenthesis" or
"close parenthesis" See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 524 Sn()WB 524 Sn()BD(run time)ES()EA( )I(n.)ES(
1. )0 2 A()I(load
time)ES()EA( 2. )0 2 A()I(execution time)ES()EA()EP(
)0 P()WB 525 Sn()WB 525 Sn()BD(run-time
compiler)ES()EA( )I(n.)ES( refers to the )0 2 A()BD(compile)ES()EA( function or to )0 2 A()I(implicit
compilation)ES()EA(, for which the compilation and run-time )0 2 A()I(environments)ES()EA( are maintained
in the same )0 2 A()I(Lisp image)ES()EA(.)EP(
)0 P()WB 526 Sn()WB 526 Sn()BD(run-time definition)ES()EA( )I(n.)ES( a
definition in the )0 527 1 A()I(run-time environment)ES()527 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 527 Sn()WB 527 Sn()BD(run-time environment)ES()EA( )I(n.)ES(
the )0 2 A()I(environment)ES()EA( in which a
program is )I(executed)ES(.)EP(

)BD(S)ES(
)0 P()WB 528 Sn()WB 528 Sn()BD(safe)ES()EA( )I(adj.)ES( 1. \201of
)0 2 A()I(code)ES()EA(\202
processed in a )0 2 A()I(lexical environment)ES()EA(
where the the highest )0 2 A()BD(safety)ES()EA( level \201)TT(3)ES(\202 was in
effect. See )0 2 A()BD(optimize)ES()EA(. 2. \201of a )0 2 A()I(call)ES()EA(\202 a )0 529 1 A()I(safe call)ES()529 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 529 Sn()WB 529 Sn()BD(safe call)ES()EA(
)I(n.)ES( a )0 2 A()I(call)ES()EA( in which the )0 2 A()I(call)ES()EA(, the )0 2 A()I(function)ES()EA( being
)I(called)ES(, and the point of )0 2 A()I(functional
evaluation)ES()EA( are all )0 528 1 A()I(safe)ES()528 0 TN TL()Ec /AF f D([1] )0 2 A()I(code)ES()EA(. For more detailed information,
see )0 2 A(Section 3.5.1.1 \201Safe and
Unsafe Calls\202)EA(.)EP(
)0 P()WB 530 Sn()WB 530 Sn()BD(same)ES()EA( )I(adj.)ES( 1. \201of
)0 2 A()I(objects)ES()EA(
under a specified )0 2 A()I(predicate)ES()EA(\202 indistinguishable by
that )0 2 A()I(predicate)ES()EA(. "The symbol
)TT(car)ES(, the string )TT("car")ES(, and the string
)TT("CAR")ES( are the )TT(same)ES( under )0 2 A()BD(string-equal)ES()EA(". 2. \201of
)0 2 A()I(objects)ES()EA(
if no predicate is implied by context\202 indistinguishable by )0 2 A()BD(eql)ES()EA(. Note that )0 2 A()BD(eq)ES()EA( might be capable of
distinguishing some )0 2 A()I(numbers)ES()EA( and )0 2 A()I(characters)ES()EA( which )0 2 A()BD(eql)ES()EA( cannot
distinguish, but the nature of such, if any, is )0 2 A()I(implementation-dependent)ES()EA(.
Since )0 2 A()BD(eq)ES()EA( is used
only rarely in this specification, )0 2 A()BD(eql)ES()EA( is the default predicate when none
is mentioned explicitly. "The conses returned by two successive
calls to )0 2 A()BD(cons)ES()EA(
are never the same." 3. \201of )0 2 A()I(types)ES()EA(\202 having the same set of
)0 2 A()I(elements)ES()EA(; that is, each )0 2 A()I(type)ES()EA( is a )0 620 1 A()I(subtype)ES()620 0 TN TL()Ec /AF f D( of the others. "The
types specified by )TT(\201integer 0 1\202)ES(, )TT(\201unsigned-byte
1\202)ES(, and )TT(bit)ES( are the same.")EP(
)0 P()WB 531 Sn()WB 531 Sn()BD(satisfy the
test)ES()EA( )I(v.)ES( \201of an )0 2 A()I(object)ES()EA( being considered by a
)0 540 1 A()I(sequence
function)ES()540 0 TN TL()Ec /AF f D(\202 1. \201for a one )0 2 A()I(argument)ES()EA( test\202 to be in a state
such that the )0 2 A()I(function)ES()EA( which is the
)I(predicate)ES( )0 2 A()I(argument)ES()EA( to the )0 540 1 A()I(sequence function)ES()540 0 TN TL()Ec /AF f D(
returns )0 2 A()I(true)ES()EA( when given a single )0 2 A()I(argument)ES()EA( that
is the result of calling the )0 540 1 A()I(sequence function)ES()540 0 TN TL()Ec /AF f D('s )I(key)ES(
)0 2 A()I(argument)ES()EA( on the )0 2 A()I(object)ES()EA( being
considered. See )0 2 A(Section 17.2.2
\201Satisfying a One-Argument Test\202)EA(. 2. \201for a two )0 2 A()I(argument)ES()EA( test\202
to be in a state such that the two-place )0 2 A()I(predicate)ES()EA( which is the )0 540 1 A()I(sequence
function)ES()540 0 TN TL()Ec /AF f D('s )I(test)ES( )0 2 A()I(argument)ES()EA( returns )0 2 A()I(true)ES()EA( when given a
first )0 2 A()I(argument)ES()EA( that is the )0 2 A()I(object)ES()EA( being
considered, and when given a second )0 2 A()I(argument)ES()EA( that is the result of
calling the )0 540 1 A()I(sequence function)ES()540 0 TN TL()Ec /AF f D('s )I(key)ES(
)0 2 A()I(argument)ES()EA( on an )0 2 A()I(element)ES()EA( of the
)0 540 1 A()I(sequence
function)ES()540 0 TN TL()Ec /AF f D('s )I(sequence)ES( )0 2 A()I(argument)ES()EA( which is being tested
for equality; or to be in a state such that the )I(test-not)ES(
)0 2 A()I(function)ES()EA( returns )0 2 A()I(false)ES()EA( given the
same )0 2 A()I(arguments)ES()EA(. See )0 2 A(Section 17.2.1 \201Satisfying a Two-Argument
Test\202)EA(.)EP(
)0 P()WB 532 Sn()WB 532 Sn()BD(scope)ES()EA( )I(n.)ES( the
structural or textual region of code in which )0 2 A()I(references)ES()EA( to an )0 2 A()I(object)ES()EA(, a
)0 2 A()I(binding)ES()EA(,
an )0 2 A()I(exit
point)ES()EA(, a )0 2 A()I(tag)ES()EA(, or an )0 2 A()I(environment)ES()EA( \201usually by
)0 2 A()I(name)ES()EA(\202 can
occur.)EP(
)0 P()WB 533 Sn()WB 533 Sn()BD(script)ES()EA( )I(n.)ES(
)I(ISO)ES( one of possibly several sets that form an )0 2 A()I(exhaustive
partition)ES()EA( of the type )0 2 A()BD(character)ES()EA(. See )0 2 A(Section 13.1.2.1 \201Character Scripts\202)EA(.)EP(
)0 P()WB 534 Sn()WB 534 Sn()BD(secondary
value)ES()EA( )I(n.)ES( \201of )0 2 A()I(values)ES()EA( resulting from the )0 2 A()I(evaluation)ES()EA(
of a )0 2 A()I(form)ES()EA(\202
the second )0 2 A()I(value)ES()EA(, if any, or else )0 2 A()BD(nil)ES()EA( if there are fewer
than two )0 2 A()I(values)ES()EA(. "The secondary value
returned by )0 2 A()BD(truncate)ES()EA( is a remainder.")EP(
)0 P()WB 535 Sn()WB 535 Sn()BD(section)ES()EA( )I(n.)ES( a
partitioning of output by a )0 2 A()I(conditional newline)ES()EA(
on a )0 2 A()I(pretty printing
stream)ES()EA(. See )0 2 A(Section
22.2.1.1 \201Dynamic Control of the Arrangement of Output\202)EA(.)EP(
)0 P()WB 536 Sn()WB 536 Sn()BD(self-evaluating object)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( that is neither a )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D( nor a )0 2 A()I(cons)ES()EA(. If a )0 536 1 A()I(self-evaluating
object)ES()536 0 TN TL()Ec /AF f D( is )I(evaluated)ES(, it )0 2 A()I(yields)ES()EA( itself as its only )0 2 A()I(value)ES()EA(. "Strings
are self-evaluating objects.")EP(
)0 P()WB 537 Sn()WB 537 Sn()BD(semi-standard)ES()EA( )I(adj.)ES( \201of a language
feature\202 not required to be implemented by any )0 2 A()I(conforming
implementation)ES()EA(, but nevertheless recommended as the
canonical approach in situations where an )0 2 A()I(implementation)ES()EA( does plan
to support such a feature. The presence of )0 537 1 A()I(semi-standard)ES()537 0 TN TL()Ec /AF f D( aspects in the
language is intended to lessen portability problems and reduce the
risk of gratuitous divergence among )0 2 A()I(implementations)ES()EA( that might
stand in the way of future standardization.)EP(
)0 P()WB 538 Sn()WB 538 Sn()BD(semicolon)ES()EA(
)I(n.)ES( the )0 589 1 A()I(standard character)ES()589 0 TN TL()Ec /AF f D( that is called
"semicolon" \201)TT(;)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 539 Sn()WB 539 Sn()BD(sequence)ES()EA( )I(n.)ES(
1. an ordered collection of elements 2. a )0 2 A()I(vector)ES()EA( or a )0 2 A()I(list)ES()EA(.)EP(
)0 P()WB 540 Sn()WB 540 Sn()BD(sequence
function)ES()EA( )I(n.)ES( one of the )0 2 A()I(functions)ES()EA( in )0 2 A(Figure 17-1)EA(, or an )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(function)ES()EA( that operates on one or
more )0 539 1 A()I(sequences)ES()539 0 TN TL()Ec /AF f D(. and
that is defined by the )0 2 A()I(implementation)ES()EA( to be a
)0 540 1 A()I(sequence
function)ES()540 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 541 Sn()WB 541 Sn()BD(sequential)ES()EA(
)I(adj.)ES( )I(Trad.)ES( \201of )0 2 A()I(binding)ES()EA( or )I(assignment)ES(\202
done in the style of )0 2 A()BD(setq)ES()EA(, )0 2 A()BD(let*)ES()EA(, or )0 2 A()BD(do*)ES()EA(; that is, interleaving the
evaluation of the )0 2 A()I(forms)ES()EA( that produce )0 2 A()I(values)ES()EA( with the
)I(assignments)ES( or )0 2 A()I(bindings)ES()EA( of the )0 2 A()I(variables)ES()EA( \201or
)0 2 A()I(places)ES()EA(\202.
See )0 2 A()I(parallel)ES()EA(.)EP(
)0 P()WB 542 Sn()WB 542 Sn()BD(sequentially)ES()EA(
)I(adv.)ES( in a )0 541 1 A()I(sequential)ES()541 0 TN TL()Ec /AF f D( way.)EP(
)0 P()WB 543 Sn()WB 543 Sn()BD(serious
condition)ES()EA( )I(n.)ES( a )0 2 A()I(condition)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(serious-condition)ES()EA(,
which represents a )0 573 1 A()I(situation)ES()573 0 TN TL()Ec /AF f D( that is generally sufficiently
severe that entry into the )0 2 A()I(debugger)ES()EA( should be expected if
the )0 2 A()I(condition)ES()EA( is )I(signaled)ES(
but not )I(handled)ES(.)EP(
)0 P()WB 544 Sn()WB 544 Sn()BD(session)ES()EA( )I(n.)ES( the
conceptual aggregation of events in a )0 2 A()I(Lisp image)ES()EA( from the time it is
started to the time it is terminated.)EP(
)0 P()WB 545 Sn()WB 545 Sn()BD(set)ES()EA( )I(v.t.)ES( )I(Trad.)ES(
\201any )0 2 A()I(variable)ES()EA( or a )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D( that is the )0 2 A()I(name)ES()EA( of a )0 2 A()I(dynamic
variable)ES()EA(\202 to )0 2 A()I(assign)ES()EA( the )0 2 A()I(variable)ES()EA(.)EP(
)0 P()WB 546 Sn()WB 546 Sn()BD(setf
expander)ES()EA( )I(n.)ES( a function used by )0 2 A()BD(setf)ES()EA( to compute the )0 547 1 A()I(setf expansion)ES()547 0 TN TL()Ec /AF f D( of a
)0 2 A()I(place)ES()EA(.)EP(
)0 P()WB 547 Sn()WB 547 Sn()BD(setf
expansion)ES()EA( )I(n.)ES( a set of five )0 2 A()I(expressions)ES()EA([1] that, taken
together, describe how to store into a )0 2 A()I(place)ES()EA( and which )0 618 1 A()I(subforms)ES()618 0 TN TL()Ec /AF f D( of the macro call associated
with the )0 2 A()I(place)ES()EA( are evaluated. See )0 2 A(Section 5.1.1.2 \201Setf
Expansions\202)EA(.)EP(
)0 P()WB 548 Sn()WB 548 Sn()BD(setf
function)ES()EA( )I(n.)ES( a )0 2 A()I(function)ES()EA( whose )0 2 A()I(name)ES()EA( is )TT(\201setf
)0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D(\202)ES(.)EP(
)0 P()WB 549 Sn()WB 549 Sn()BD(setf
function name)ES()EA( )I(n.)ES( \201of a )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D( )I(S)ES(\202 the )0 2 A()I(list)ES()EA( )TT(\201setf)ES(
)I(S)ES()TT(\202)ES(.)EP(
)0 P()WB 550 Sn()WB 550 Sn()BD(shadow)ES()EA( )I(v.t.)ES( 1. to
override the meaning of. "That binding of )TT(X)ES( shadows an
outer one." 2. to hide the presence of. "That )0 2 A()BD(macrolet)ES()EA( of )TT(F)ES(
shadows the outer )0 2 A()BD(flet)ES()EA( of )TT(F)ES(." 3. to replace.
"That package shadows the symbol )TT(cl:car)ES( with its own
symbol )TT(car)ES(.")EP(
)0 P()WB 551 Sn()WB 551 Sn()BD(shadowing
symbol)ES()EA( )I(n.)ES( \201in a )0 2 A()I(package)ES()EA(\202 an )0 2 A()I(element)ES()EA( of the )0 2 A()I(package)ES()EA('s
)0 552 1 A()I(shadowing
symbols list)ES()552 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 552 Sn()WB 552 Sn()BD(shadowing symbols list)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(package)ES()EA(\202 a )0 2 A()I(list)ES()EA(, associated with the
)0 2 A()I(package)ES()EA(,
of )0 624 1 A()I(symbols)ES()624 0 TN TL()Ec /AF f D( that are
to be exempted from `symbol conflict errors' detected when packages
are )I(used)ES(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(package-shadowing-symbols)ES()EA(.)EP(
)0 P()WB 553 Sn()WB 553 Sn()BD(shared slot)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(class)ES()EA(\202 a )0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D( )0 2 A()I(accessible)ES()EA( in more than one
)0 2 A()I(instance)ES()EA( of a )0 2 A()I(class)ES()EA(;
specifically, such a )0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D( is )0 2 A()I(accessible)ES()EA( in all )0 2 A()I(direct
instances)ES()EA( of the )0 2 A()I(class)ES()EA( and in those )0 2 A()I(indirect
instances)ES()EA( whose )0 2 A()I(class)ES()EA( does not )0 550 1 A()I(shadow)ES()550 0 TN TL()Ec /AF f D([1] the )0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 554 Sn()WB 554 Sn()BD(sharpsign)ES()EA(
)I(n.)ES( the )0 589 1 A()I(standard character)ES()589 0 TN TL()Ec /AF f D( that is
variously called "number sign," "sharp," or "sharp sign"
\201)TT(#)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 555 Sn()WB 555 Sn()BD(short float)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(short-float)ES()EA(.)EP(
)0 P()WB 556 Sn()WB 556 Sn()BD(sign)ES()EA( )I(n.)ES( one of the
)0 589 1 A()I(standard
characters)ES()589 0 TN TL()Ec /AF f D( ")TT(+)ES(" or ")TT(-)ES(".)EP(
)0 P()WB 557 Sn()WB 557 Sn()BD(signal)ES()EA( )I(v.)ES( to
announce, using a standard protocol, that a particular situation,
represented by a )0 2 A()I(condition)ES()EA(, has been detected.
See )0 2 A(Section 9.1 \201Condition System
Concepts\202)EA(.)EP(
)0 P()WB 558 Sn()WB 558 Sn()BD(signature)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(method)ES()EA(\202 a description of the
)0 2 A()I(parameters)ES()EA( and )0 2 A()I(parameter
specializers)ES()EA( for the )0 2 A()I(method)ES()EA( which determines the
)0 2 A()I(method)ES()EA('s
applicability for a given set of required )0 2 A()I(arguments)ES()EA(, and which also
describes the )0 2 A()I(argument)ES()EA( conventions for its
other, non-required )0 2 A()I(arguments)ES()EA(.)EP(
)0 P()WB 559 Sn()WB 559 Sn()BD(similar)ES()EA( )I(adj.)ES(
\201of two )0 2 A()I(objects)ES()EA(\202 defined to be equivalent
under the )0 560 1 A()I(similarity)ES()560 0 TN TL()Ec /AF f D( relationship.)EP(
)0 P()WB 560 Sn()WB 560 Sn()BD(similarity)ES()EA(
)I(n.)ES( a two-place conceptual equivalence predicate, which is
independent of the )0 2 A()I(Lisp image)ES()EA( so that two )0 2 A()I(objects)ES()EA( in
different )0 2 A()I(Lisp images)ES()EA( can be understood
to be equivalent under this predicate. See )0 2 A(Section 3.2.4 \201Literal Objects in Compiled
Files\202)EA(.)EP(
)0 P()WB 561 Sn()WB 561 Sn()BD(simple)ES()EA( )I(adj.)ES( 1.
\201of an )0 2 A()I(array)ES()EA(\202 being of )0 2 A()I(type)ES()EA( )0 2 A()BD(simple-array)ES()EA(. 2. \201of a
)0 2 A()I(character)ES()EA(\202 having no )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(attributes)ES()EA(, or else having
)0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(attributes)ES()EA( each of which has
the )0 2 A()I(null)ES()EA(
value for that )0 2 A()I(attribute)ES()EA(.)EP(
)0 P()WB 562 Sn()WB 562 Sn()BD(simple array)ES()EA(
)I(n.)ES( an )0 2 A()I(array)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(simple-array)ES()EA(.)EP(
)0 P()WB 563 Sn()WB 563 Sn()BD(simple bit
array)ES()EA( )I(n.)ES( a )0 2 A()I(bit array)ES()EA( that is a )0 562 1 A()I(simple array)ES()562 0 TN TL()Ec /AF f D(; that is,
an )0 2 A()I(object)ES()EA(
of )0 2 A()I(type)ES()EA(
)TT(\201simple-array bit\202)ES(.)EP(
)0 P()WB 564 Sn()WB 564 Sn()BD(simple bit
vector)ES()EA( )I(n.)ES( a )0 2 A()I(bit vector)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(simple-bit-vector)ES()EA(.)EP(
)0 P()WB 565 Sn()WB 565 Sn()BD(simple
condition)ES()EA( )I(n.)ES( a )0 2 A()I(condition)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(simple-condition)ES()EA(.)EP(
)0 P()WB 566 Sn()WB 566 Sn()BD(simple general vector)ES()EA( )I(n.)ES(
a )0 568 1 A()I(simple
vector)ES()568 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 567 Sn()WB 567 Sn()BD(simple
string)ES()EA( )I(n.)ES( a )0 608 1 A()I(string)ES()608 0 TN TL()Ec /AF f D( of )0 2 A()I(type)ES()EA( )0 2 A()BD(simple-string)ES()EA(.)EP(
)0 P()WB 568 Sn()WB 568 Sn()BD(simple
vector)ES()EA( )I(n.)ES( a )0 2 A()I(vector)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(simple-vector)ES()EA(, sometimes
called a ")0 566 1 A()I(simple general vector)ES()566 0 TN TL()Ec /AF f D(." Not all
)0 2 A()I(vectors)ES()EA(
that are )0 561 1 A()I(simple)ES()561 0 TN TL()Ec /AF f D( are
)0 568 1 A()I(simple
vectors)ES()568 0 TN TL()Ec /AF f D(---only those that have )0 2 A()I(element type)ES()EA( )0 2 A()BD(t)ES()EA(.)EP(
)0 P()WB 569 Sn()WB 569 Sn()BD(single
escape)ES()EA( )I(n.)ES(, )I(adj.)ES( 1. )I(n.)ES( the )0 628 1 A()I(syntax type)ES()628 0 TN TL()Ec /AF f D( of a
)0 2 A()I(character)ES()EA( that indicates that
the next )0 2 A()I(character)ES()EA( is to be treated as
an )0 2 A()I(alphabetic)ES()EA([2] )0 2 A()I(character)ES()EA(
with its )0 2 A()I(case)ES()EA( preserved. For details, see
)0 2 A(Section 2.1.4.6 \201Single Escape
Character\202)EA(. 2. )I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 having the )0 569 1 A()I(single escape)ES()569 0 TN TL()Ec /AF f D( )0 628 1 A()I(syntax type)ES()628 0 TN TL()Ec /AF f D(. 3.
)I(n.)ES( a )0 569 1 A()I(single
escape)ES()569 0 TN TL()Ec /AF f D([2] )0 2 A()I(character)ES()EA(. \201In the )0 597 1 A()I(standard
readtable)ES()597 0 TN TL()Ec /AF f D(, )0 574 1 A()I(slash)ES()574 0 TN TL()Ec /AF f D( is the only )0 569 1 A()I(single escape)ES()569 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 570 Sn()WB 570 Sn()BD(single float)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(single-float)ES()EA(.)EP(
)0 P()WB 571 Sn()WB 571 Sn()BD(single-quote)ES()EA(
)I(n.)ES( the )0 589 1 A()I(standard character)ES()589 0 TN TL()Ec /AF f D( that is
variously called "apostrophe," "acute accent," "quote," or "single
quote" \201)TT(')ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 572 Sn()WB 572 Sn()BD(singleton)ES()EA(
)I(adj.)ES( \201of a )0 539 1 A()I(sequence)ES()539 0 TN TL()Ec /AF f D(\202 having only one )0 2 A()I(element)ES()EA(.
")TT(\201list 'hello\202)ES( returns a singleton list.")EP(
)0 P()WB 573 Sn()WB 573 Sn()BD(situation)ES()EA(
)I(n.)ES( the )0 2 A()I(evaluation)ES()EA( of a )0 2 A()I(form)ES()EA( in a specific
)0 2 A()I(environment)ES()EA(.)EP(
)0 P()WB 574 Sn()WB 574 Sn()BD(slash)ES()EA( )I(n.)ES( the
)0 589 1 A()I(standard
character)ES()589 0 TN TL()Ec /AF f D( that is variously called "solidus" or "slash"
\201)TT(/)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 575 Sn()WB 575 Sn()BD(slot)ES()EA( )I(n.)ES( a component
of an )0 2 A()I(object)ES()EA( that can store a )0 2 A()I(value)ES()EA(.)EP(
)0 P()WB 576 Sn()WB 576 Sn()BD(slot
specifier)ES()EA( )I(n.)ES( a representation of a )0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D( that includes the )0 2 A()I(name)ES()EA( of the
)0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D( and zero or more
)0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D( options. A )0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D( option pertains only to a
single )0 575 1 A()I(slot)ES()575 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 577 Sn()WB 577 Sn()BD(source code)ES()EA(
)I(n.)ES( )0 2 A()I(code)ES()EA( representing )0 2 A()I(objects)ES()EA( suitable
for )0 2 A()I(evaluation)ES()EA( \201e.g., )0 2 A()I(objects)ES()EA( created
by )0 2 A()BD(read)ES()EA(, by
)0 2 A()I(macro
expansion)ES()EA(, or by )0 2 A()I(compiler macro
expansion)ES()EA(\202.)EP(
)0 P()WB 578 Sn()WB 578 Sn()BD(source file)ES()EA(
)I(n.)ES( a )0 2 A()I(file)ES()EA( which contains a textual
representation of )0 577 1 A()I(source
code)ES()577 0 TN TL()Ec /AF f D(, that can be edited, )I(loaded)ES(, or
)I(compiled)ES(.)EP(
)0 P()WB 579 Sn()WB 579 Sn()BD(space)ES()EA( )I(n.)ES( the
)0 589 1 A()I(standard
character)ES()589 0 TN TL()Ec /AF f D( <Space>, notated for the )0 2 A()I(Lisp reader)ES()EA(
as )TT(#\200Space)ES(.)EP(
)0 P()WB 580 Sn()WB 580 Sn()BD(special form)ES()EA(
)I(n.)ES( a )0 2 A()I(list)ES()EA(, other than a )0 2 A()I(macro form)ES()EA(,
which is a )0 2 A()I(form)ES()EA( with special syntax or special
)0 2 A()I(evaluation)ES()EA( rules or both,
possibly manipulating the )0 2 A()I(evaluation)ES()EA( )0 2 A()I(environment)ES()EA( or control
flow or both. The first element of a )0 580 1 A()I(special form)ES()580 0 TN TL()Ec /AF f D( is a )0 581 1 A()I(special operator)ES()581 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 581 Sn()WB 581 Sn()BD(special
operator)ES()EA( )I(n.)ES( one of a fixed set of )0 624 1 A()I(symbols)ES()624 0 TN TL()Ec /AF f D(, enumerated in
)0 2 A(Figure
3-2)EA(, that may appear in the )0 2 A()I(car)ES()EA( of a )0 2 A()I(form)ES()EA( in order to identify the
)0 2 A()I(form)ES()EA( as a
)0 580 1 A()I(special
form)ES()580 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 582 Sn()WB 582 Sn()BD(special
variable)ES()EA( )I(n.)ES( )I(Trad.)ES( a )0 2 A()I(dynamic variable)ES()EA(.)EP(
)0 P()WB 583 Sn()WB 583 Sn()BD(specialize)ES()EA(
)I(v.t.)ES( \201a )0 2 A()I(generic function)ES()EA(\202 to
define a )0 2 A()I(method)ES()EA( for the )0 2 A()I(generic function)ES()EA(,
or in other words, to refine the behavior of the )0 2 A()I(generic
function)ES()EA( by giving it a specific meaning for a particular
set of )0 2 A()I(classes)ES()EA( or )0 2 A()I(arguments)ES()EA(.)EP(
)0 P()WB 584 Sn()WB 584 Sn()BD(specialized)ES()EA(
)I(adj.)ES( 1. \201of a )0 2 A()I(generic function)ES()EA(\202 having
)0 2 A()I(methods)ES()EA(
which )0 583 1 A()I(specialize)ES()583 0 TN TL()Ec /AF f D(
the )0 2 A()I(generic function)ES()EA(. 2. \201of
an )0 2 A()I(array)ES()EA(\202
having an )0 2 A()I(actual array element
type)ES()EA( that is a )0 2 A()I(proper subtype)ES()EA( of the
)0 2 A()I(type)ES()EA(
)0 2 A()BD(t)ES()EA(; see )0 2 A(Section 15.1.1 \201Array Elements\202)EA(.
")TT(\201make-array 5 :element-type 'bit\202)ES( makes an array of
length five that is specialized for bits.")EP(
)0 P()WB 585 Sn()WB 585 Sn()BD(specialized lambda list)ES()EA(
)I(n.)ES( an )0 2 A()I(extended lambda list)ES()EA(
used in )0 2 A()I(forms)ES()EA( that )0 2 A()I(establish)ES()EA( )0 2 A()I(method)ES()EA( definitions, such as
)0 2 A()BD(defmethod)ES()EA(. See )0 2 A(Section 3.4.3 \201Specialized Lambda Lists\202)EA(.)EP(
)0 P()WB 586 Sn()WB 586 Sn()BD(spreadable argument list
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 2 A()I(list)ES()EA( of )0 2 A()I(objects)ES()EA(; that
is, an )0 2 A()I(object)ES()EA( that denotes a )0 2 A()I(list)ES()EA( and that is a
)I(non-null)ES( )0 2 A()I(list)ES()EA( L1 of length n, whose last
element is a )0 2 A()I(list)ES()EA( L2 of length m \201denoting a list
L3 of length m+n-1 whose )0 2 A()I(elements)ES()EA( are L1i for i < n-1
followed by L2j for j < m\202. "The list \2011 2 \2013 4 5\202\202 is a
spreadable argument list designator for the list \2011 2 3 4 5\202.")EP(
)0 P()WB 587 Sn()WB 587 Sn()BD(stack
allocate)ES()EA( )I(v.t.)ES( )I(Trad.)ES( to allocate in a
non-permanent way, such as on a stack. Stack-allocation is an
optimization technique used in some )0 2 A()I(implementations)ES()EA( for
allocating certain kinds of )0 2 A()I(objects)ES()EA( that have )0 2 A()I(dynamic
extent)ES()EA(. Such )0 2 A()I(objects)ES()EA( are allocated on the stack
rather than in the heap so that their storage can be freed as part
of unwinding the stack rather than taking up space in the heap
until the next garbage collection. What )0 2 A()I(types)ES()EA( \201if any\202 can have )0 2 A()I(dynamic
extent)ES()EA( can vary from )0 2 A()I(implementation)ES()EA( to )0 2 A()I(implementation)ES()EA(. No )0 2 A()I(implementation)ES()EA( is ever
required to perform stack-allocation.)EP(
)0 P()WB 588 Sn()WB 588 Sn()BD(stack-allocated)ES()EA( )I(adj.)ES(
)I(Trad.)ES( having been )I(stack allocated)ES(.)EP(
)0 P()WB 589 Sn()WB 589 Sn()BD(standard
character)ES()EA( )I(n.)ES( a )0 2 A()I(character)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(standard-char)ES()EA(, which is one
of a fixed set of 96 such )0 2 A()I(characters)ES()EA( required to be
present in all )0 2 A()I(conforming
implementations)ES()EA(. See )0 2 A(Section 2.1.3 \201Standard Characters\202)EA(.)EP(
)0 P()WB 590 Sn()WB 590 Sn()BD(standard
class)ES()EA( )I(n.)ES( a )0 2 A()I(class)ES()EA( that is a )0 2 A()I(generalized
instance)ES()EA( of )0 2 A()I(class)ES()EA( )0 2 A()BD(standard-class)ES()EA(.)EP(
)0 P()WB 591 Sn()WB 591 Sn()BD(standard generic function)ES()EA( a
)0 2 A()I(function)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(standard-generic-function)ES()EA(.)EP(
)0 P()WB 592 Sn()WB 592 Sn()BD(standard
input)ES()EA( )I(n.)ES( the )0 2 A()I(input)ES()EA( )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( which is the )0 2 A()I(value)ES()EA( of the )0 2 A()I(dynamic variable)ES()EA(
)0 2 A()BD(*standard-input*)ES()EA(.)EP(
)0 P()WB 593 Sn()WB 593 Sn()BD(standard method
combination)ES()EA( )I(n.)ES( the )0 2 A()I(method combination)ES()EA(
named )BD(standard)ES(.)EP(
)0 P()WB 594 Sn()WB 594 Sn()BD(standard
object)ES()EA( )I(n.)ES( an )0 2 A()I(object)ES()EA( that is a )0 2 A()I(generalized instance)ES()EA(
of )0 2 A()I(class)ES()EA(
)0 2 A()BD(standard-object)ES()EA(.)EP(
)0 P()WB 595 Sn()WB 595 Sn()BD(standard
output)ES()EA( )I(n.)ES( the )0 2 A()I(output)ES()EA( )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( which is the )0 2 A()I(value)ES()EA( of the )0 2 A()I(dynamic variable)ES()EA(
)0 2 A()BD(*standard-output*)ES()EA(.)EP(
)0 P()WB 596 Sn()WB 596 Sn()BD(standard pprint dispatch
table)ES()EA( )I(n.)ES( A )0 2 A()I(pprint dispatch
table)ES()EA( that is )0 2 A()I(different)ES()EA( from the )0 2 A()I(initial pprint
dispatch table)ES()EA(, that implements )I(pretty printing)ES( as
described in this specification, and that, unlike other )0 2 A()I(pprint
dispatch tables)ES()EA(, must never be modified by any program.
\201Although the definite reference "the )0 596 1 A()I(standard pprint dispatch
table)ES()596 0 TN TL()Ec /AF f D(" is generally used within this document, it is
actually )0 2 A()I(implementation-dependent)ES()EA(
whether a single )0 2 A()I(object)ES()EA( fills the role of the
)0 596 1 A()I(standard pprint dispatch
table)ES()596 0 TN TL()Ec /AF f D(, or whether there might be multiple such objects, any
one of which could be used on any given occasion where "the )0 596 1 A()I(standard
pprint dispatch table)ES()596 0 TN TL()Ec /AF f D(" is called for. As such, this phrase
should be seen as an indefinite reference in all cases except for
anaphoric references.\202)EP(
)0 P()WB 597 Sn()WB 597 Sn()BD(standard
readtable)ES()EA( )I(n.)ES( A )0 2 A()I(readtable)ES()EA( that is )0 2 A()I(different)ES()EA(
from the )0 2 A()I(initial readtable)ES()EA(, that
implements the )0 2 A()I(expression)ES()EA( syntax defined in
this specification, and that, unlike other )0 2 A()I(readtables)ES()EA(, must never be
modified by any program. \201Although the definite reference "the
)0 597 1 A()I(standard
readtable)ES()597 0 TN TL()Ec /AF f D(" is generally used within this document, it is
actually )0 2 A()I(implementation-dependent)ES()EA(
whether a single )0 2 A()I(object)ES()EA( fills the role of the
)0 597 1 A()I(standard
readtable)ES()597 0 TN TL()Ec /AF f D(, or whether there might be multiple such objects,
any one of which could be used on any given occasion where "the
)0 597 1 A()I(standard
readtable)ES()597 0 TN TL()Ec /AF f D(" is called for. As such, this phrase should be
seen as an indefinite reference in all cases except for anaphoric
references.\202)EP(
)0 P()WB 598 Sn()WB 598 Sn()BD(standard
syntax)ES()EA( )I(n.)ES( the syntax represented by the )0 597 1 A()I(standard
readtable)ES()597 0 TN TL()Ec /AF f D( and used as a reference syntax throughout this
document. See )0 2 A(Section 2.1 \201Character
Syntax\202)EA(.)EP(
)0 P()WB 599 Sn()WB 599 Sn()BD(standardized)ES()EA(
)I(adj.)ES( \201of a )0 2 A()I(name)ES()EA(, )0 2 A()I(object)ES()EA(, or definition\202 having been
defined by Common Lisp. "All standardized variables that are
required to hold bidirectional streams have ")TT(-io*)ES(" in
their name.")EP(
)0 P()WB 600 Sn()WB 600 Sn()BD(startup environment)ES()EA( )I(n.)ES( the
)0 2 A()I(global environment)ES()EA( of
the running )0 2 A()I(Lisp image)ES()EA( from which the
)0 2 A()I(compiler)ES()EA( was invoked.)EP(
)0 P()WB 601 Sn()WB 601 Sn()BD(step)ES()EA( )I(v.t.)ES(, )I(n.)ES(
1. )I(v.t.)ES( \201an iteration )0 2 A()I(variable)ES()EA(\202 to )0 2 A()I(assign)ES()EA( the )0 2 A()I(variable)ES()EA( a new
)0 2 A()I(value)ES()EA( at
the end of an iteration, in preparation for a new iteration. 2.
)I(n.)ES( the )0 2 A()I(code)ES()EA( that identifies how the next
value in an iteration is to be computed. 3. )I(v.t.)ES( \201)0 2 A()I(code)ES()EA(\202 to specially
execute the )0 2 A()I(code)ES()EA(, pausing at intervals to allow
user confirmation or intervention, usually for debugging.)EP(
)0 P()WB 602 Sn()WB 602 Sn()BD(stream)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA(
that can be used with an input or output function to identify an
appropriate source or sink of )0 2 A()I(characters)ES()EA( or )0 2 A()I(bytes)ES()EA( for that
operation.)EP(
)0 P()WB 603 Sn()WB 603 Sn()BD(stream associated with a
file)ES()EA( )I(n.)ES( a )0 2 A()I(file stream)ES()EA(, or a )0 626 1 A()I(synonym stream)ES()626 0 TN TL()Ec /AF f D( the
)0 2 A()I(target)ES()EA( of
which is a )0 603 1 A()I(stream associated with a
file)ES()603 0 TN TL()Ec /AF f D(. Such a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( cannot be created with )0 2 A()BD(make-two-way-stream)ES()EA(,
)0 2 A()BD(make-echo-stream)ES()EA(,
)0 2 A()BD(make-broadcast-stream)ES()EA(,
)0 2 A()BD(make-concatenated-stream)ES()EA(,
)0 2 A()BD(make-string-input-stream)ES()EA(,
or )0 2 A()BD(make-string-output-stream)ES()EA(.)EP(
)0 P()WB 604 Sn()WB 604 Sn()BD(stream
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D(; that is, an )0 2 A()I(object)ES()EA( that
denotes a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( and
that is one of: )0 2 A()BD(t)ES()EA(
\201denoting the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*terminal-io*)ES()EA(\202, )0 2 A()BD(nil)ES()EA( \201denoting the
)0 2 A()I(value)ES()EA( of
)0 2 A()BD(*standard-input*)ES()EA( for
)0 2 A()I(input)ES()EA(
)0 604 1 A()I(stream
designators)ES()604 0 TN TL()Ec /AF f D( or denoting the )0 2 A()I(value)ES()EA( of )0 2 A()BD(*standard-output*)ES()EA( for
)0 2 A()I(output)ES()EA(
)0 604 1 A()I(stream
designators)ES()604 0 TN TL()Ec /AF f D(\202, or a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( \201denoting itself\202.)EP(
)0 P()WB 605 Sn()WB 605 Sn()BD(stream
element type)ES()EA( )I(n.)ES( \201of a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D(\202 the )0 2 A()I(type)ES()EA( of data for which the )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( is specialized.)EP(
)0 P()WB 606 Sn()WB 606 Sn()BD(stream
variable)ES()EA( )I(n.)ES( a )0 2 A()I(variable)ES()EA( whose )0 2 A()I(value)ES()EA( must be a
)0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 607 Sn()WB 607 Sn()BD(stream variable designator)ES()EA(
)I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 606 1 A()I(stream variable)ES()606 0 TN TL()Ec /AF f D(;
that is, a )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D(
that denotes a )0 606 1 A()I(stream variable)ES()606 0 TN TL()Ec /AF f D( and that is one of:
)0 2 A()BD(t)ES()EA( \201denoting )0 2 A()BD(*terminal-io*)ES()EA(\202, )0 2 A()BD(nil)ES()EA( \201denoting )0 2 A()BD(*standard-input*)ES()EA( for
)0 2 A()I(input)ES()EA(
)0 607 1 A()I(stream
variable designators)ES()607 0 TN TL()Ec /AF f D( or denoting )0 2 A()BD(*standard-output*)ES()EA( for
)0 2 A()I(output)ES()EA(
)0 607 1 A()I(stream
variable designators)ES()607 0 TN TL()Ec /AF f D(\202, or some other )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D( \201denoting itself\202.)EP(
)0 P()WB 608 Sn()WB 608 Sn()BD(string)ES()EA( )I(n.)ES( a
specialized )0 2 A()I(vector)ES()EA( that is of )0 2 A()I(type)ES()EA( )0 2 A()BD(string)ES()EA(, and
whose elements are of )0 2 A()I(type)ES()EA( )0 2 A()BD(character)ES()EA( or a )0 620 1 A()I(subtype)ES()620 0 TN TL()Ec /AF f D( of )0 2 A()I(type)ES()EA( )0 2 A()BD(character)ES()EA(.)EP(
)0 P()WB 609 Sn()WB 609 Sn()BD(string
designator)ES()EA( )I(n.)ES( a )0 2 A()I(designator)ES()EA( for a )0 608 1 A()I(string)ES()608 0 TN TL()Ec /AF f D(; that is, an )0 2 A()I(object)ES()EA( that
denotes a )0 608 1 A()I(string)ES()608 0 TN TL()Ec /AF f D( and
that is one of: a )0 2 A()I(character)ES()EA( \201denoting a )0 572 1 A()I(singleton)ES()572 0 TN TL()Ec /AF f D( )0 608 1 A()I(string)ES()608 0 TN TL()Ec /AF f D( that has the )0 2 A()I(character)ES()EA( as
its only )0 2 A()I(element)ES()EA(\202, a )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D( \201denoting the )0 608 1 A()I(string)ES()608 0 TN TL()Ec /AF f D( that is its )0 2 A()I(name)ES()EA(\202, or a )0 608 1 A()I(string)ES()608 0 TN TL()Ec /AF f D( \201denoting itself\202. The intent is
that this term be consistent with the behavior of )0 2 A()BD(string)ES()EA(; )0 2 A()I(implementations)ES()EA( that
extend )0 2 A()BD(string)ES()EA( must extend the meaning of
this term in a compatible way.)EP(
)0 P()WB 610 Sn()WB 610 Sn()BD(string equal)ES()EA(
)I(adj.)ES( the )0 530 1 A()I(same)ES()530 0 TN TL()Ec /AF f D(
under )0 2 A()BD(string-equal)ES()EA(.)EP(
)0 P()WB 611 Sn()WB 611 Sn()BD(string
stream)ES()EA( )I(n.)ES( a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( of )0 2 A()I(type)ES()EA( )0 2 A()BD(string-stream)ES()EA(.)EP(
)0 P()WB 612 Sn()WB 612 Sn()BD(structure)ES()EA(
)I(n.)ES( an )0 2 A()I(object)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(structure-object)ES()EA(.)EP(
)0 P()WB 613 Sn()WB 613 Sn()BD(structure
class)ES()EA( )I(n.)ES( a )0 2 A()I(class)ES()EA( that is a )0 2 A()I(generalized
instance)ES()EA( of )0 2 A()I(class)ES()EA( )0 2 A()BD(structure-class)ES()EA(.)EP(
)0 P()WB 614 Sn()WB 614 Sn()BD(structure
name)ES()EA( )I(n.)ES( a )0 2 A()I(name)ES()EA( defined with )0 2 A()BD(defstruct)ES()EA(.
Usually, such a )0 2 A()I(type)ES()EA( is also a )0 613 1 A()I(structure class)ES()613 0 TN TL()Ec /AF f D(, but there may
be )0 2 A()I(implementation-dependent)ES()EA(
situations in which this is not so, if the )TT(:type)ES( option to
)0 2 A()BD(defstruct)ES()EA( is used.)EP(
)0 P()WB 615 Sn()WB 615 Sn()BD(style
warning)ES()EA( )I(n.)ES( a )0 2 A()I(condition)ES()EA( of )0 2 A()I(type)ES()EA( )0 2 A()BD(style-warning)ES()EA(.)EP(
)0 P()WB 616 Sn()WB 616 Sn()BD(subclass)ES()EA( )I(n.)ES( a
)0 2 A()I(class)ES()EA( that
)0 2 A()I(inherits)ES()EA(
from another )0 2 A()I(class)ES()EA(, called a )0 621 1 A()I(superclass)ES()621 0 TN TL()Ec /AF f D(. \201No )0 2 A()I(class)ES()EA( is a )0 616 1 A()I(subclass)ES()616 0 TN TL()Ec /AF f D( of itself.\202)EP(
)0 P()WB 617 Sn()WB 617 Sn()BD(subexpression)ES()EA( )I(n.)ES( \201of an )0 2 A()I(expression)ES()EA(\202
an )0 2 A()I(expression)ES()EA( that is contained
within the )0 2 A()I(expression)ES()EA(. \201In fact, the
state of being a )0 617 1 A()I(subexpression)ES()617 0 TN TL()Ec /AF f D( is not an attribute of
the )0 617 1 A()I(subexpression)ES()617 0 TN TL()Ec /AF f D(, but really an attribute
of the containing )0 2 A()I(expression)ES()EA( since the )0 530 1 A()I(same)ES()530 0 TN TL()Ec /AF f D( )0 2 A()I(object)ES()EA( can at once be a )0 617 1 A()I(subexpression)ES()617 0 TN TL()Ec /AF f D( in one
context, and not in another.\202)EP(
)0 P()WB 618 Sn()WB 618 Sn()BD(subform)ES()EA( )I(n.)ES( \201of
a )0 2 A()I(form)ES()EA(\202 an
)0 2 A()I(expression)ES()EA( that is a )0 617 1 A()I(subexpression)ES()617 0 TN TL()Ec /AF f D( of the
)0 2 A()I(form)ES()EA(, and
which by virtue of its position in that )0 2 A()I(form)ES()EA( is also a )0 2 A()I(form)ES()EA(. ")TT(\201f x\202)ES( and
)TT(x)ES(, but not )TT(exit)ES(, are subforms of )TT(\201return-from
exit \201f x\202\202)ES(.")EP(
)0 P()WB 619 Sn()WB 619 Sn()BD(subrepertoire)ES()EA( )I(n.)ES( a subset of a
)0 2 A()I(repertoire)ES()EA(.)EP(
)0 P()WB 620 Sn()WB 620 Sn()BD(subtype)ES()EA( )I(n.)ES( a
)0 2 A()I(type)ES()EA( whose
membership is the same as or a proper subset of the membership of
another )0 2 A()I(type)ES()EA(, called a )0 622 1 A()I(supertype)ES()622 0 TN TL()Ec /AF f D(. \201Every )0 2 A()I(type)ES()EA( is a )0 620 1 A()I(subtype)ES()620 0 TN TL()Ec /AF f D( of itself.\202)EP(
)0 P()WB 621 Sn()WB 621 Sn()BD(superclass)ES()EA(
)I(n.)ES( a )0 2 A()I(class)ES()EA( from which another )0 2 A()I(class)ES()EA( \201called a
)0 616 1 A()I(subclass)ES()616 0 TN TL()Ec /AF f D(\202 )0 2 A()I(inherits)ES()EA(. \201No
)0 2 A()I(class)ES()EA( is a
)0 621 1 A()I(superclass)ES()621 0 TN TL()Ec /AF f D( of
itself.\202 See )0 616 1 A()I(subclass)ES()616 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 622 Sn()WB 622 Sn()BD(supertype)ES()EA(
)I(n.)ES( a )0 2 A()I(type)ES()EA( whose membership is the same as
or a proper superset of the membership of another )0 2 A()I(type)ES()EA(, called a
)0 620 1 A()I(subtype)ES()620 0 TN TL()Ec /AF f D(. \201Every
)0 2 A()I(type)ES()EA( is a
)0 622 1 A()I(supertype)ES()622 0 TN TL()Ec /AF f D( of
itself.\202 See )0 620 1 A()I(subtype)ES()620 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 623 Sn()WB 623 Sn()BD(supplied-p parameter)ES()EA( )I(n.)ES( a
)0 2 A()I(parameter)ES()EA( which recieves its
)0 2 A()I(generalized boolean)ES()EA(
value implicitly due to the presence or absence of an )0 2 A()I(argument)ES()EA(
corresponding to another )0 2 A()I(parameter)ES()EA( \201such as an )0 2 A()I(optional
parameter)ES()EA( or a )0 2 A()I(rest parameter)ES()EA(\202. See
)0 2 A(Section 3.4.1 \201Ordinary Lambda
Lists\202)EA(.)EP(
)0 P()WB 624 Sn()WB 624 Sn()BD(symbol)ES()EA( )I(n.)ES( an
)0 2 A()I(object)ES()EA( of
)0 2 A()I(type)ES()EA(
)0 2 A()BD(symbol)ES()EA(.)EP(
)0 P()WB 625 Sn()WB 625 Sn()BD(symbol macro)ES()EA(
)I(n.)ES( a )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D(
that stands for another )0 2 A()I(form)ES()EA(. See the )0 2 A()I(macro)ES()EA( )0 2 A()BD(symbol-macrolet)ES()EA(.)EP(
)0 P()WB 626 Sn()WB 626 Sn()BD(synonym
stream)ES()EA( )I(n.)ES( 1. a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( of )0 2 A()I(type)ES()EA( )0 2 A()BD(synonym-stream)ES()EA(, which is
consequently a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D(
that is an alias for another )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D(, which is the )0 2 A()I(value)ES()EA( of a )0 2 A()I(dynamic variable)ES()EA(
whose )0 2 A()I(name)ES()EA(
is the )0 627 1 A()I(synonym
stream symbol)ES()627 0 TN TL()Ec /AF f D( of the )0 626 1 A()I(synonym stream)ES()626 0 TN TL()Ec /AF f D(. See the )0 2 A()I(function)ES()EA(
)0 2 A()BD(make-synonym-stream)ES()EA(.
2. \201to a )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D(\202 a
)0 626 1 A()I(synonym
stream)ES()626 0 TN TL()Ec /AF f D( which has the )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( as the )0 2 A()I(value)ES()EA( of its )0 627 1 A()I(synonym stream symbol)ES()627 0 TN TL()Ec /AF f D(. 3.
\201to a )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D(\202 a
)0 626 1 A()I(synonym
stream)ES()626 0 TN TL()Ec /AF f D( which has the )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D( as its )0 627 1 A()I(synonym stream symbol)ES()627 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 627 Sn()WB 627 Sn()BD(synonym stream symbol)ES()EA( )I(n.)ES(
\201of a )0 626 1 A()I(synonym
stream)ES()626 0 TN TL()Ec /AF f D(\202 the )0 624 1 A()I(symbol)ES()624 0 TN TL()Ec /AF f D( which names the )0 2 A()I(dynamic variable)ES()EA(
which has as its )0 2 A()I(value)ES()EA( another )0 602 1 A()I(stream)ES()602 0 TN TL()Ec /AF f D( for which the )0 626 1 A()I(synonym stream)ES()626 0 TN TL()Ec /AF f D( is an alias.)EP(
)0 P()WB 628 Sn()WB 628 Sn()BD(syntax type)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(character)ES()EA(\202 one of several
classifications, enumerated in )0 2 A(Figure 2-6)EA(, that are used for
dispatch during parsing by the )0 2 A()I(Lisp reader)ES()EA(. See )0 2 A(Section 2.1.4 \201Character Syntax
Types\202)EA(.)EP(
)0 P()WB 629 Sn()WB 629 Sn()BD(system class)ES()EA(
)I(n.)ES( a )0 2 A()I(class)ES()EA( that may be of )0 2 A()I(type)ES()EA( )0 2 A()BD(built-in-class)ES()EA( in a
)0 2 A()I(conforming
implementation)ES()EA( and hence cannot be inherited by )0 2 A()I(classes)ES()EA( defined
by )0 2 A()I(conforming
programs)ES()EA(.)EP(
)0 P()WB 630 Sn()WB 630 Sn()BD(system code)ES()EA(
)I(n.)ES( )0 2 A()I(code)ES()EA( supplied by the )0 2 A()I(implementation)ES()EA( to
implement this specification \201e.g., the definition of )0 2 A()BD(mapcar)ES()EA(\202 or
generated automatically in support of this specification \201e.g.,
during method combination\202; that is, )0 2 A()I(code)ES()EA( that is not )0 2 A()I(programmer code)ES()EA(.)EP(

)BD(T)ES(
)0 P()WB 631 Sn()WB 631 Sn()BD(t)ES()EA( )I(n.)ES( 1. a. the )0 2 A()I(boolean)ES()EA(
representing true. b. the canonical )0 2 A()I(generalized boolean)ES()EA(
representing true. \201Although any )0 2 A()I(object)ES()EA( other than )0 2 A()BD(nil)ES()EA( is considered
)0 647 1 A()I(true)ES()647 0 TN TL()Ec /AF f D( as a )0 2 A()I(generalized
boolean)ES()EA(, )TT(t)ES( is generally used when there is no
special reason to prefer one such )0 2 A()I(object)ES()EA( over another.\202 2. the
)0 2 A()I(name)ES()EA( of the
)0 650 1 A()I(type)ES()650 0 TN TL()Ec /AF f D( to which all
)0 2 A()I(objects)ES()EA(
belong---the )0 2 A()I(supertype)ES()EA( of all )0 650 1 A()I(types)ES()650 0 TN TL()Ec /AF f D( \201including itself\202. 3.
the )0 2 A()I(name)ES()EA( of
the )0 2 A()I(superclass)ES()EA( of all )0 2 A()I(classes)ES()EA( except
itself.)EP(
)0 P()WB 632 Sn()WB 632 Sn()BD(tag)ES()EA( )I(n.)ES( 1. a )0 2 A()I(catch tag)ES()EA(. 2.
a )0 2 A()I(go
tag)ES()EA(.)EP(
)0 P()WB 633 Sn()WB 633 Sn()BD(tail)ES()EA( )I(n.)ES( \201of a )0 2 A()I(list)ES()EA(\202 an )0 2 A()I(object)ES()EA( that is
the )0 2 A()I(same)ES()EA( as
either some )0 2 A()I(cons)ES()EA( which makes up that )0 2 A()I(list)ES()EA( or the
)0 2 A()I(atom)ES()EA( \201if
any\202 which terminates the )0 2 A()I(list)ES()EA(. "The empty list is a tail of
every proper list.")EP(
)0 P()WB 634 Sn()WB 634 Sn()BD(target)ES()EA( )I(n.)ES( 1. \201of
a )0 2 A()I(constructed stream)ES()EA(\202 a
)0 2 A()I(constituent)ES()EA( of the )0 2 A()I(constructed
stream)ES()EA(. "The target of a synonym stream is the value of its
synonym stream symbol." 2. \201of a )0 2 A()I(displaced array)ES()EA(\202 the
)0 2 A()I(array)ES()EA( to
which the )0 2 A()I(displaced array)ES()EA( is
displaced. \201In the case of a chain of )0 2 A()I(constructed streams)ES()EA( or
)0 2 A()I(displaced arrays)ES()EA(, the
unqualified term ")0 634 1 A()I(target)ES()634 0 TN TL()Ec /AF f D(" always refers to the immediate )0 634 1 A()I(target)ES()634 0 TN TL()Ec /AF f D( of the first item in
the chain, not the immediate target of the last item.\202)EP(
)0 P()WB 635 Sn()WB 635 Sn()BD(terminal
I/O)ES()EA( )I(n.)ES( the )0 2 A()I(bidirectional)ES()EA( )0 2 A()I(stream)ES()EA( that is
the )0 2 A()I(value)ES()EA(
of the )0 2 A()I(variable)ES()EA( )0 2 A()BD(*terminal-io*)ES()EA(.)EP(
)0 P()WB 636 Sn()WB 636 Sn()BD(terminating)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(macro character)ES()EA(\202 being
such that, if it appears while parsing a token, it terminates that
token. See )0 2 A(Section 2.2 \201Reader
Algorithm\202)EA(.)EP(
)0 P()WB 637 Sn()WB 637 Sn()BD(tertiary
value)ES()EA( )I(n.)ES( \201of )0 2 A()I(values)ES()EA( resulting from the )0 2 A()I(evaluation)ES()EA(
of a )0 2 A()I(form)ES()EA(\202
the third )0 2 A()I(value)ES()EA(, if any, or else )0 2 A()BD(nil)ES()EA( if there are fewer
than three )0 2 A()I(values)ES()EA(.)EP(
)0 P()WB 638 Sn()WB 638 Sn()BD(throw)ES()EA( )I(v.)ES( to
transfer control and )0 2 A()I(values)ES()EA( to a )0 2 A()I(catch)ES()EA(. See the )0 2 A()I(special
operator)ES()EA( )0 2 A()BD(throw)ES()EA(.)EP(
)0 P()WB 639 Sn()WB 639 Sn()BD(tilde)ES()EA( )I(n.)ES( the
)0 2 A()I(standard character)ES()EA(
that is called "tilde" \201)TT(~)ES(\202. See )0 2 A(Figure 2-5)EA(.)EP(
)0 P()WB 640 Sn()WB 640 Sn()BD(time)ES()EA( a representation of a
point \201)0 2 A()I(absolute)ES()EA( )0 640 1 A()I(time)ES()640 0 TN TL()Ec /AF f D(\202 or an interval \201)0 2 A()I(relative)ES()EA( )0 640 1 A()I(time)ES()640 0 TN TL()Ec /AF f D(\202 on a time line. See
)0 2 A()I(decoded
time)ES()EA(, )0 2 A()I(internal time)ES()EA(, and )0 2 A()I(universal
time)ES()EA(.)EP(
)0 P()WB 641 Sn()WB 641 Sn()BD(time zone)ES()EA(
)I(n.)ES( a )0 2 A()I(rational)ES()EA( multiple of
)TT(1/3600)ES( between )TT(-24)ES( \201inclusive\202 and )TT(24)ES(
\201inclusive\202 that represents a time zone as a number of hours offset
from Greenwich Mean Time. Time zone values increase with motion to
the west, so Massachusetts, U.S.A. is in time zone )TT(5)ES(,
California, U.S.A. is time zone )TT(8)ES(, and Moscow, Russia is
time zone )I(-3)ES(. \201When "daylight savings time" is separately
represented as an )0 2 A()I(argument)ES()EA( or )0 2 A()I(return value)ES()EA(, the
)0 641 1 A()I(time zone)ES()641 0 TN TL()Ec /AF f D( that
accompanies it does not depend on whether daylight savings time is
in effect.\202)EP(
)0 P()WB 642 Sn()WB 642 Sn()BD(token)ES()EA( )I(n.)ES( a textual
representation for a )0 2 A()I(number)ES()EA( or a )0 2 A()I(symbol)ES()EA(. See )0 2 A(Section 2.3 \201Interpretation of Tokens\202)EA(.)EP(
)0 P()WB 643 Sn()WB 643 Sn()BD(top level
form)ES()EA( )I(n.)ES( a )0 2 A()I(form)ES()EA( which is processed specially by
)0 2 A()BD(compile-file)ES()EA( for the
purposes of enabling )0 2 A()I(compile time)ES()EA( )0 2 A()I(evaluation)ES()EA(
of that )0 2 A()I(form)ES()EA(. )0 643 1 A()I(Top level forms)ES()643 0 TN TL()Ec /AF f D( include those )0 2 A()I(forms)ES()EA( which are
not )0 2 A()I(subforms)ES()EA( of any other )0 2 A()I(form)ES()EA(, and certain
other cases. See )0 2 A(Section 3.2.3.1
\201Processing of Top Level Forms\202)EA(.)EP(
)0 P()WB 644 Sn()WB 644 Sn()BD(trace output)ES()EA(
)I(n.)ES( the )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA( which is the )0 2 A()I(value)ES()EA( of the
)0 2 A()I(dynamic
variable)ES()EA( )0 2 A()BD(*trace-output*)ES()EA(.)EP(
)0 P()WB 645 Sn()WB 645 Sn()BD(tree)ES()EA( )I(n.)ES( 1. a binary
recursive data structure made up of )0 2 A()I(conses)ES()EA( and )0 2 A()I(atoms)ES()EA(: the )0 2 A()I(conses)ES()EA( are themselves also )0 645 1 A()I(trees)ES()645 0 TN TL()Ec /AF f D( \201sometimes called
"subtrees" or "branches"\202, and the )0 2 A()I(atoms)ES()EA( are terminal nodes \201sometimes
called )0 2 A()I(leaves)ES()EA(\202. Typically, the )0 2 A()I(leaves)ES()EA( represent
data while the branches establish some relationship among that
data. 2. in general, any recursive data structure that has some
notion of "branches" and )0 2 A()I(leaves)ES()EA(.)EP(
)0 P()WB 646 Sn()WB 646 Sn()BD(tree
structure)ES()EA( )I(n.)ES( \201of a )0 645 1 A()I(tree)ES()645 0 TN TL()Ec /AF f D([1]\202 the set of )0 2 A()I(conses)ES()EA( that make up the )0 645 1 A()I(tree)ES()645 0 TN TL()Ec /AF f D(. Note that while the
)0 2 A()I(car)ES()EA([1b]
component of each such )0 2 A()I(cons)ES()EA( is part of the )0 646 1 A()I(tree structure)ES()646 0 TN TL()Ec /AF f D(, the
)0 2 A()I(objects)ES()EA(
that are the )0 2 A()I(cars)ES()EA([2] of each )0 2 A()I(cons)ES()EA( in the )0 645 1 A()I(tree)ES()645 0 TN TL()Ec /AF f D( are not themselves part of its )0 646 1 A()I(tree structure)ES()646 0 TN TL()Ec /AF f D(
unless they are also )0 2 A()I(conses)ES()EA(.)EP(
)0 P()WB 647 Sn()WB 647 Sn()BD(true)ES()EA( )I(n.)ES( any )0 2 A()I(object)ES()EA( that is
not )0 2 A()I(false)ES()EA(
and that is used to represent the success of a )0 2 A()I(predicate)ES()EA( test. See
)0 631 1 A()I(t)ES()631 0 TN TL()Ec /AF f D([1].)EP(
)0 P()WB 648 Sn()WB 648 Sn()BD(truename)ES()EA( )I(n.)ES(
1. the canonical )0 2 A()I(filename)ES()EA( of a )0 2 A()I(file)ES()EA( in the
)0 2 A()I(file
system)ES()EA(. See )0 2 A(Section 20.1.3
\201Truenames\202)EA(. 2. a )0 2 A()I(pathname)ES()EA( representing a )0 648 1 A()I(truename)ES()648 0 TN TL()Ec /AF f D([1].)EP(
)0 P()WB 649 Sn()WB 649 Sn()BD(two-way
stream)ES()EA( )I(n.)ES( a )0 2 A()I(stream)ES()EA( of )0 650 1 A()I(type)ES()650 0 TN TL()Ec /AF f D( )0 2 A()BD(two-way-stream)ES()EA(, which is a
)0 2 A()I(bidirectional)ES()EA( )0 2 A()I(composite
stream)ES()EA( that receives its input from an associated )0 2 A()I(input)ES()EA( )0 2 A()I(stream)ES()EA( and sends
its output to an associated )0 2 A()I(output)ES()EA( )0 2 A()I(stream)ES()EA(.)EP(
)0 P()WB 650 Sn()WB 650 Sn()BD(type)ES()EA( )I(n.)ES( 1. a set of
)0 2 A()I(objects)ES()EA(,
usually with common structure, behavior, or purpose. \201Note that the
expression ")I(X)ES( is of type )I(Sa)ES(" naturally implies that
")I(X)ES( is of type )I(Sb)ES(" if )I(Sa)ES( is a )0 2 A()I(subtype)ES()EA( of
)I(Sb)ES(.\202 2. \201immediately following the name of a )0 650 1 A()I(type)ES()650 0 TN TL()Ec /AF f D(\202 a )0 2 A()I(subtype)ES()EA( of that )0 650 1 A()I(type)ES()650 0 TN TL()Ec /AF f D(. "The type )0 2 A()BD(vector)ES()EA( is an
array type.")EP(
)0 P()WB 651 Sn()WB 651 Sn()BD(type
declaration)ES()EA( )I(n.)ES( a )0 2 A()I(declaration)ES()EA( that asserts that
every reference to a specified )0 2 A()I(binding)ES()EA( within the scope of the
)0 2 A()I(declaration)ES()EA( results in some
)0 2 A()I(object)ES()EA( of
the specified )0 650 1 A()I(type)ES()650 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 652 Sn()WB 652 Sn()BD(type
equivalent)ES()EA( )I(adj.)ES( \201of two )0 650 1 A()I(types)ES()650 0 TN TL()Ec /AF f D( X and Y\202 having the same )0 2 A()I(elements)ES()EA(; that
is, X is a )0 2 A()I(subtype)ES()EA( of Y and Y is a )0 2 A()I(subtype)ES()EA( of
X.)EP(
)0 P()WB 653 Sn()WB 653 Sn()BD(type expand)ES()EA(
)I(n.)ES( to fully expand a )0 654 1 A()I(type specifier)ES()654 0 TN TL()Ec /AF f D(, removing any
references to )0 2 A()I(derived types)ES()EA(. \201Common Lisp
provides no program interface to cause this to occur, but the
semantics of Common Lisp are such that every )0 2 A()I(implementation)ES()EA( must
be able to do this internally, and some situations involving
)0 654 1 A()I(type
specifiers)ES()654 0 TN TL()Ec /AF f D( are most easily described in terms of a fully
expanded )0 654 1 A()I(type
specifier)ES()654 0 TN TL()Ec /AF f D(.\202)EP(
)0 P()WB 654 Sn()WB 654 Sn()BD(type
specifier)ES()EA( )I(n.)ES( an )0 2 A()I(expression)ES()EA( that denotes a
)0 650 1 A()I(type)ES()650 0 TN TL()Ec /AF f D(. "The symbol
)TT(random-state)ES(, the list )TT(\201integer 3 5\202)ES(, the list
)TT(\201and list \201not null\202\202)ES(, and the class named
)TT(standard-class)ES( are type specifiers.")EP(

)BD(U)ES(
)0 P()WB 655 Sn()WB 655 Sn()BD(unbound)ES()EA( )I(adj.)ES(
not having an associated denotation in a )0 2 A()I(binding)ES()EA(. See )0 2 A()I(bound)ES()EA(.)EP(
)0 P()WB 656 Sn()WB 656 Sn()BD(unbound
variable)ES()EA( )I(n.)ES( a )0 2 A()I(name)ES()EA( that is syntactically plausible
as the name of a )0 2 A()I(variable)ES()EA( but which is not
)0 2 A()I(bound)ES()EA( in
the )0 2 A()I(variable)ES()EA( )0 2 A()I(namespace)ES()EA(.)EP(
)0 P()WB 657 Sn()WB 657 Sn()BD(undefined function)ES()EA( )I(n.)ES( a
)0 2 A()I(name)ES()EA( that
is syntactically plausible as the name of a )0 2 A()I(function)ES()EA( but which is not
)0 2 A()I(bound)ES()EA( in
the )0 2 A()I(function)ES()EA( )0 2 A()I(namespace)ES()EA(.)EP(
)0 P()WB 658 Sn()WB 658 Sn()BD(unintern)ES()EA( )I(v.t.)ES(
\201a )0 2 A()I(symbol)ES()EA(
in a )0 2 A()I(package)ES()EA(\202 to make the )0 2 A()I(symbol)ES()EA( not be
)0 2 A()I(present)ES()EA(
in that )0 2 A()I(package)ES()EA(. \201The )0 2 A()I(symbol)ES()EA( might continue to be
)0 2 A()I(accessible)ES()EA( by
inheritance.\202)EP(
)0 P()WB 659 Sn()WB 659 Sn()BD(uninterned)ES()EA(
)I(adj.)ES( \201of a )0 2 A()I(symbol)ES()EA(\202 not )0 2 A()I(accessible)ES()EA( in any )0 2 A()I(package)ES()EA(; i.e.,
not )0 2 A()I(interned)ES()EA([1].)EP(
)0 P()WB 660 Sn()WB 660 Sn()BD(universal
time)ES()EA( )I(n.)ES( )0 2 A()I(time)ES()EA(, represented as a non-negative
)0 2 A()I(integer)ES()EA(
number of seconds. )0 2 A()I(Absolute)ES()EA( )0 660 1 A()I(universal time)ES()660 0 TN TL()Ec /AF f D( is measured as an
offset from the beginning of the year 1900 \201ignoring )0 2 A()I(leap
seconds)ES()EA(\202. See )0 2 A(Section
25.1.4.2 \201Universal Time\202)EA(.)EP(
)0 P()WB 661 Sn()WB 661 Sn()BD(unqualified method)ES()EA( )I(n.)ES( a
)0 2 A()I(method)ES()EA(
with no )0 2 A()I(qualifiers)ES()EA(.)EP(
)0 P()WB 662 Sn()WB 662 Sn()BD(unregistered package)ES()EA( )I(n.)ES( a
)0 2 A()I(package)ES()EA(
)0 2 A()I(object)ES()EA(
that is not present in the )0 2 A()I(package registry)ES()EA(. An
)0 662 1 A()I(unregistered
package)ES()662 0 TN TL()Ec /AF f D( has no )0 2 A()I(name)ES()EA(; i.e., its )0 2 A()I(name)ES()EA( is )0 2 A()BD(nil)ES()EA(. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(delete-package)ES()EA(.)EP(
)0 P()WB 663 Sn()WB 663 Sn()BD(unsafe)ES()EA( )I(adj.)ES( \201of
)0 2 A()I(code)ES()EA(\202 not
)0 2 A()I(safe)ES()EA(. \201Note
that, unless explicitly specified otherwise, if a particular kind
of error checking is guaranteed only in a )0 2 A()I(safe)ES()EA( context, the same checking
might or might not occur in that context if it were )0 663 1 A()I(unsafe)ES()663 0 TN TL()Ec /AF f D(; describing a context
as )0 663 1 A()I(unsafe)ES()663 0 TN TL()Ec /AF f D( means that
certain kinds of error checking are not reliably enabled but does
not guarantee that error checking is definitely disabled.\202)EP(
)0 P()WB 664 Sn()WB 664 Sn()BD(unsafe call)ES()EA(
)I(n.)ES( a )0 2 A()I(call)ES()EA( that is not a )0 2 A()I(safe call)ES()EA(.
For more detailed information, see )0 2 A(Section 3.5.1.1 \201Safe and Unsafe Calls\202)EA(.)EP(
)0 P()WB 665 Sn()WB 665 Sn()BD(upgrade)ES()EA( )I(v.t.)ES( \201a
declared )0 2 A()I(type)ES()EA( to an actual )0 2 A()I(type)ES()EA(\202 1. \201when
creating an )0 2 A()I(array)ES()EA(\202 to substitute an )0 2 A()I(actual array element
type)ES()EA( for an )0 2 A()I(expressed array
element type)ES()EA( when choosing an appropriately )0 2 A()I(specialized)ES()EA(
)0 2 A()I(array)ES()EA(
representation. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(upgraded-array-element-type)ES()EA(.
2. \201when creating a )0 2 A()I(complex)ES()EA(\202 to substitute an )0 2 A()I(actual
complex part type)ES()EA( for an )0 2 A()I(expressed complex
part type)ES()EA( when choosing an appropriately )0 2 A()I(specialized)ES()EA(
)0 2 A()I(complex)ES()EA(
representation. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(upgraded-complex-part-type)ES()EA(.)EP(
)0 P()WB 666 Sn()WB 666 Sn()BD(upgraded array element
type)ES()EA( )I(n.)ES( \201of a )0 2 A()I(type)ES()EA(\202 a )0 2 A()I(type)ES()EA( that is a )0 2 A()I(supertype)ES()EA( of the )0 2 A()I(type)ES()EA( and that is
used instead of the )0 2 A()I(type)ES()EA( whenever the )0 2 A()I(type)ES()EA( is used as an
)0 2 A()I(array
element type)ES()EA( for object creation or type discrimination.
See )0 2 A(Section 15.1.2.1 \201Array
Upgrading\202)EA(.)EP(
)0 P()WB 667 Sn()WB 667 Sn()BD(upgraded complex part type)ES()EA(
)I(n.)ES( \201of a )0 2 A()I(type)ES()EA(\202 a )0 2 A()I(type)ES()EA( that is a )0 2 A()I(supertype)ES()EA( of the )0 2 A()I(type)ES()EA( and that is
used instead of the )0 2 A()I(type)ES()EA( whenever the )0 2 A()I(type)ES()EA( is used as a
)0 2 A()I(complex part type)ES()EA( for
object creation or type discrimination. See the )0 2 A()I(function)ES()EA( )0 2 A()BD(upgraded-complex-part-type)ES()EA(.)EP(
)0 P()WB 668 Sn()WB 668 Sn()BD(uppercase)ES()EA(
)I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 being among )0 2 A()I(standard
characters)ES()EA( corresponding to the capital letters )TT(A)ES(
through )TT(Z)ES(, or being some other )0 2 A()I(implementation-defined)ES()EA(
)0 2 A()I(character)ES()EA( that is defined by
the )0 2 A()I(implementation)ES()EA( to be
)0 668 1 A()I(uppercase)ES()668 0 TN TL()Ec /AF f D(. See
)0 2 A(Section 13.1.4.3 \201Characters With
Case\202)EA(.)EP(
)0 P()WB 669 Sn()WB 669 Sn()BD(use)ES()EA( )I(v.t.)ES( \201a )0 2 A()I(package)ES()EA( P1\202 to
)0 2 A()I(inherit)ES()EA(
the )0 2 A()I(external symbols)ES()EA( of P1.
\201If a package P2 uses P1, the )0 2 A()I(external symbols)ES()EA( of P1
become )0 2 A()I(internal symbols)ES()EA( of P2
unless they are explicitly )0 2 A()I(exported)ES()EA(.\202 "The package
)TT(CL-USER)ES( uses the package )TT(CL)ES(.")EP(
)0 P()WB 670 Sn()WB 670 Sn()BD(use list)ES()EA( )I(n.)ES(
\201of a )0 2 A()I(package)ES()EA(\202 a \201possibly empty\202
)0 2 A()I(list)ES()EA(
associated with each )0 2 A()I(package)ES()EA( which determines what
other )0 2 A()I(packages)ES()EA( are currently being
)I(used)ES( by that )0 2 A()I(package)ES()EA(.)EP(
)0 P()WB 671 Sn()WB 671 Sn()BD(user)ES()EA( )I(n.)ES( an active
entity, typically a human, that invokes or interacts with a )0 2 A()I(program)ES()EA( at run
time, but that is not necessarily a )0 2 A()I(programmer)ES()EA(.)EP(

)BD(V)ES(
)0 P()WB 672 Sn()WB 672 Sn()BD(valid array dimension)ES()EA( )I(n.)ES(
a )0 2 A()I(fixnum)ES()EA(
suitable for use as an )0 2 A()I(array)ES()EA( )0 2 A()I(dimension)ES()EA(. Such a )0 2 A()I(fixnum)ES()EA( must be
greater than or equal to zero, and less than the )0 685 1 A()I(value)ES()685 0 TN TL()Ec /AF f D( of )0 2 A()BD(array-dimension-limit)ES()EA(.
When multiple )0 2 A()I(array)ES()EA( )0 2 A()I(dimensions)ES()EA( are to be used
together to specify a multi-dimensional )0 2 A()I(array)ES()EA(, there is also an implied
constraint that the product of all of the )0 2 A()I(dimensions)ES()EA( be less than the
)0 685 1 A()I(value)ES()685 0 TN TL()Ec /AF f D( of )0 2 A()BD(array-total-size-limit)ES()EA(.)EP(
)0 P()WB 673 Sn()WB 673 Sn()BD(valid
array index)ES()EA( )I(n.)ES( \201of an )0 2 A()I(array)ES()EA(\202 a )0 2 A()I(fixnum)ES()EA( suitable for use as one of
possibly several indices needed to name an )0 2 A()I(element)ES()EA( of the )0 2 A()I(array)ES()EA( according
to a multi-dimensional Cartesian coordinate system. Such a )0 2 A()I(fixnum)ES()EA( must be
greater than or equal to zero, and must be less than the
corresponding )0 2 A()I(dimension)ES()EA([1] of the )0 2 A()I(array)ES()EA(. \201Unless
otherwise explicitly specified, the phrase "a )0 2 A()I(list)ES()EA( of )I(valid array
indices)ES(" further implies that the )0 2 A()I(length)ES()EA( of the )0 2 A()I(list)ES()EA( must be the same as the
)0 2 A()I(rank)ES()EA( of the
)0 2 A()I(array)ES()EA(.\202
"For a )TT(2)ES( by )TT(3)ES( array, valid array indices for the
first dimension are )TT(0)ES( and )TT(1)ES(, and valid array
indices for the second dimension are )TT(0)ES(, )TT(1)ES( and
)TT(2)ES(.")EP(
)0 P()WB 674 Sn()WB 674 Sn()BD(valid array row-major
index)ES()EA( )I(n.)ES( \201of an )0 2 A()I(array)ES()EA(, which might have any number
of )0 2 A()I(dimensions)ES()EA([2]\202 a single )0 2 A()I(fixnum)ES()EA( suitable
for use in naming any )0 2 A()I(element)ES()EA( of the )0 2 A()I(array)ES()EA(, by viewing
the array's storage as a linear series of )0 2 A()I(elements)ES()EA( in row-major order. Such
a )0 2 A()I(fixnum)ES()EA(
must be greater than or equal to zero, and less than the )0 2 A()I(array total
size)ES()EA( of the )0 2 A()I(array)ES()EA(.)EP(
)0 P()WB 675 Sn()WB 675 Sn()BD(valid
fill pointer)ES()EA( )I(n.)ES( \201of an )0 2 A()I(array)ES()EA(\202 a )0 2 A()I(fixnum)ES()EA( suitable for use as a
)0 2 A()I(fill
pointer)ES()EA( for the )0 2 A()I(array)ES()EA(. Such a )0 2 A()I(fixnum)ES()EA( must be greater than
or equal to zero, and less than or equal to the )0 2 A()I(array total size)ES()EA( of
the )0 2 A()I(array)ES()EA(.)EP(
)0 P()WB 676 Sn()WB 676 Sn()BD(valid logical pathname
host)ES()EA( )I(n.)ES( a )0 2 A()I(string)ES()EA( that has been defined as
the name of a )0 2 A()I(logical host)ES()EA(. See the
)0 2 A()I(function)ES()EA( )0 2 A()BD(load-logical-pathname-translations)ES()EA(.)EP(
)0 P()WB 677 Sn()WB 677 Sn()BD(valid pathname device)ES()EA( )I(n.)ES(
a )0 2 A()I(string)ES()EA(,
)0 2 A()BD(nil)ES()EA(,
)TT(:unspecific)ES(, or some other )0 2 A()I(object)ES()EA( defined by the )0 2 A()I(implementation)ES()EA( to be a
)0 677 1 A()I(valid pathname
device)ES()677 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 678 Sn()WB 678 Sn()BD(valid pathname directory)ES()EA(
)I(n.)ES( a )0 2 A()I(string)ES()EA(, a )0 2 A()I(list)ES()EA( of )0 2 A()I(strings)ES()EA(, )0 2 A()BD(nil)ES()EA(, )TT(:wild)ES(,
)TT(:unspecific)ES(, or some other )0 2 A()I(object)ES()EA( defined by the )0 2 A()I(implementation)ES()EA( to be a
)I(valid directory component)ES(.)EP(
)0 P()WB 679 Sn()WB 679 Sn()BD(valid
pathname host)ES()EA( )I(n.)ES( a )0 683 1 A()I(valid physical pathname
host)ES()683 0 TN TL()Ec /AF f D( or a )0 676 1 A()I(valid logical pathname
host)ES()676 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 680 Sn()WB 680 Sn()BD(valid
pathname name)ES()EA( )I(n.)ES( a )0 2 A()I(string)ES()EA(, )0 2 A()BD(nil)ES()EA(, )TT(:wild)ES(,
)TT(:unspecific)ES(, or some other )0 2 A()I(object)ES()EA( defined by the )0 2 A()I(implementation)ES()EA( to be a
)0 680 1 A()I(valid pathname
name)ES()680 0 TN TL()Ec /AF f D(.)EP(
)0 P()WB 681 Sn()WB 681 Sn()BD(valid
pathname type)ES()EA( )I(n.)ES( a )0 2 A()I(string)ES()EA(, )0 2 A()BD(nil)ES()EA(, )TT(:wild)ES(,
)TT(:unspecific)ES(.)EP(
)0 P()WB 682 Sn()WB 682 Sn()BD(valid pathname version)ES()EA(
)I(n.)ES( a non-negative )0 2 A()I(integer)ES()EA(, or one of
)TT(:wild)ES(, )TT(:newest)ES(, )TT(:unspecific)ES(, or )0 2 A()BD(nil)ES()EA(. The symbols
)TT(:oldest)ES(, )TT(:previous)ES(, and )TT(:installed)ES( are
)0 2 A()I(semi-standard)ES()EA( special
version symbols.)EP(
)0 P()WB 683 Sn()WB 683 Sn()BD(valid physical pathname
host)ES()EA( )I(n.)ES( any of a )0 2 A()I(string)ES()EA(, a )0 2 A()I(list)ES()EA( of )0 2 A()I(strings)ES()EA(, or the symbol
)TT(:unspecific)ES(, that is recognized by the implementation as
the name of a host.)EP(
)0 P()WB 684 Sn()WB 684 Sn()BD(valid sequence index)ES()EA( )I(n.)ES(
\201of a )0 2 A()I(sequence)ES()EA(\202 an )0 2 A()I(integer)ES()EA( suitable for use to
name an )0 2 A()I(element)ES()EA( of the )0 2 A()I(sequence)ES()EA(. Such
an )0 2 A()I(integer)ES()EA( must be greater than or
equal to zero, and must be less than the )0 2 A()I(length)ES()EA( of the )0 2 A()I(sequence)ES()EA(. \201If the )0 2 A()I(sequence)ES()EA( is an
)0 2 A()I(array)ES()EA(, the
)0 684 1 A()I(valid sequence
index)ES()684 0 TN TL()Ec /AF f D( is further constrained to be a )0 2 A()I(fixnum)ES()EA(.\202)EP(
)0 P()WB 685 Sn()WB 685 Sn()BD(value)ES()EA( )I(n.)ES( 1. a. one
of possibly several )0 2 A()I(objects)ES()EA( that are the result of an
)0 2 A()I(evaluation)ES()EA(. b. \201in a situation
where exactly one value is expected from the )0 2 A()I(evaluation)ES()EA( of a )0 2 A()I(form)ES()EA(\202 the )0 2 A()I(primary
value)ES()EA( returned by the )0 2 A()I(form)ES()EA(. c. \201of )0 2 A()I(forms)ES()EA( in an )0 2 A()I(implicit progn)ES()EA(\202 one
of possibly several )0 2 A()I(objects)ES()EA( that result from the
)0 2 A()I(evaluation)ES()EA( of the last )0 2 A()I(form)ES()EA(, or )0 2 A()BD(nil)ES()EA( if there are no
)0 2 A()I(forms)ES()EA(. 2.
an )0 2 A()I(object)ES()EA(
associated with a )0 2 A()I(name)ES()EA( in a )0 2 A()I(binding)ES()EA(. 3. \201of a )0 2 A()I(symbol)ES()EA(\202 the
)0 685 1 A()I(value)ES()685 0 TN TL()Ec /AF f D( of the )0 2 A()I(dynamic
variable)ES()EA( named by that symbol. 4. an )0 2 A()I(object)ES()EA( associated with a
)0 2 A()I(key)ES()EA( in an
)0 2 A()I(association list)ES()EA(, a
)0 2 A()I(property
list)ES()EA(, or a )0 2 A()I(hash table)ES()EA(.)EP(
)0 P()WB 686 Sn()WB 686 Sn()BD(value cell)ES()EA(
)I(n.)ES( )I(Trad.)ES( \201of a )0 2 A()I(symbol)ES()EA(\202 The )0 2 A()I(place)ES()EA( which holds the )0 685 1 A()I(value)ES()685 0 TN TL()Ec /AF f D(, if any, of the )0 2 A()I(dynamic
variable)ES()EA( named by that )0 2 A()I(symbol)ES()EA(, and which is
)I(accessed)ES( by )0 2 A()BD(symbol-value)ES()EA(. See )0 2 A()I(cell)ES()EA(.)EP(
)0 P()WB 687 Sn()WB 687 Sn()BD(variable)ES()EA( )I(n.)ES( a
)0 2 A()I(binding)ES()EA(
in the "variable" )0 2 A()I(namespace)ES()EA(. See )0 2 A(Section 3.1.2.1.1 \201Symbols as Forms\202)EA(.)EP(
)0 P()WB 688 Sn()WB 688 Sn()BD(vector)ES()EA( )I(n.)ES( a
one-dimensional )0 2 A()I(array)ES()EA(.)EP(
)0 P()WB 689 Sn()WB 689 Sn()BD(vertical-bar)ES()EA(
)I(n.)ES( the )0 2 A()I(standard character)ES()EA(
that is called "vertical bar" \201|\202. See )0 2 A(Figure 2-5)EA(.)EP(

)BD(W)ES(
)0 P()WB 690 Sn()WB 690 Sn()BD(whitespace)ES()EA(
)I(n.)ES( 1. one or more )0 2 A()I(characters)ES()EA( that are either the
)0 2 A()I(graphic)ES()EA(
)0 2 A()I(character)ES()EA( )TT(#\200Space)ES( or
else )0 2 A()I(non-graphic)ES()EA( characters such
as )TT(#\200Newline)ES( that only move the print position. 2. a.
)I(n.)ES( the )0 2 A()I(syntax type)ES()EA( of a )0 2 A()I(character)ES()EA(
that is a )0 2 A()I(token)ES()EA( separator. For details, see
)0 2 A(Section 2.1.4.7 \201Whitespace
Characters\202)EA(. b. )I(adj.)ES( \201of a )0 2 A()I(character)ES()EA(\202 having the )0 690 1 A()I(whitespace)ES()690 0 TN TL()Ec /AF f D([2a] )0 2 A()I(syntax
type)ES()EA([2]. c. )I(n.)ES( a )0 690 1 A()I(whitespace)ES()690 0 TN TL()Ec /AF f D([2b] )0 2 A()I(character)ES()EA(.)EP(
)0 P()WB 691 Sn()WB 691 Sn()BD(wild)ES()EA( )I(adj.)ES( 1. \201of a
)0 2 A()I(namestring)ES()EA(\202 using an )0 2 A()I(implementation-defined)ES()EA(
syntax for naming files, which might "match" any of possibly
several possible )0 2 A()I(filenames)ES()EA(, and which can
therefore be used to refer to the aggregate of the )0 2 A()I(files)ES()EA( named by
those )0 2 A()I(filenames)ES()EA(. 2. \201of a )0 2 A()I(pathname)ES()EA(\202 a
structured representation of a name which might "match" any of
possibly several )0 2 A()I(pathnames)ES()EA(, and which can
therefore be used to refer to the aggregate of the )0 2 A()I(files)ES()EA( named by
those )0 2 A()I(pathnames)ES()EA(. The set of )0 691 1 A()I(wild)ES()691 0 TN TL()Ec /AF f D( )0 2 A()I(pathnames)ES()EA( includes, but is not
restricted to, )0 2 A()I(pathnames)ES()EA( which have a component
which is )TT(:wild)ES(, or which have a directory component which
contains )TT(:wild)ES( or )TT(:wild-inferors)ES(. See the )0 2 A()I(function)ES()EA(
)0 2 A()BD(wild-pathname-p)ES()EA(.)EP(
)0 P()WB 692 Sn()WB 692 Sn()BD(write)ES()EA( )I(v.t.)ES( 1. \201a
)0 2 A()I(binding)ES()EA(
or )0 2 A()I(slot)ES()EA( or
component\202 to change the )0 2 A()I(value)ES()EA( of the )0 2 A()I(binding)ES()EA( or )0 2 A()I(slot)ES()EA(. 2. \201an
)0 2 A()I(object)ES()EA( to
a )0 2 A()I(stream)ES()EA(\202
to output a representation of the )0 2 A()I(object)ES()EA( to the )0 2 A()I(stream)ES()EA(.)EP(
)0 P()WB 693 Sn()WB 693 Sn()BD(writer)ES()EA( )I(n.)ES( a
)0 2 A()I(function)ES()EA( that )0 692 1 A()I(writes)ES()692 0 TN TL()Ec /AF f D([1] a )0 2 A()I(variable)ES()EA( or
)0 2 A()I(slot)ES()EA(.)EP(

)BD(Y)ES(
)0 P()WB 694 Sn()WB 694 Sn()BD(yield)ES()EA( )I(v.t.)ES( \201)0 2 A()I(values)ES()EA(\202 to
produce the )0 2 A()I(values)ES()EA( as the result of )0 2 A()I(evaluation)ES()EA(.
"The form )TT(\201+ 2 3\202)ES( yields )TT(5)ES(.")EP(
)WB NL /BO 0 D TC /Ba f D Bs /AU f D /UR () D RC ZF
tH WB
ND 1 gt{Ts 3 mul Np 0()0 C()BD(CLHS: Chapter 26</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="f_user_h.htm"> <link rel="UP" href="../Front/Contents.htm"> <link rel="NEXT" href="26_a.htm"> <title>CLHS: Section 26.1</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_.htm"> <link rel="UP" href="26_.htm"> <link rel="NEXT" href="h_glossa.htm"> <title>CLHS: Glossary-Section Non-alphabetic</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="h_glossa.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_a.htm"> <title>CLHS: Glossary-Section A</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_9.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_b.htm"> <title>CLHS: Glossary-Section B</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_a.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_c.htm"> <title>CLHS: Glossary-Section C</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_b.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_d.htm"> <title>CLHS: Glossary-Section D</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_c.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_e.htm"> <title>CLHS: Glossary-Section E</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_d.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_f.htm"> <title>CLHS: Glossary-Section F</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_e.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_g.htm"> <title>CLHS: Glossary-Section G</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_f.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_h.htm"> <title>CLHS: Glossary-Section H</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_g.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_i.htm"> <title>CLHS: Glossary-Section I</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_h.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_k.htm"> <title>CLHS: Glossary-Section K</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_i.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_l.htm"> <title>CLHS: Glossary-Section L</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_k.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_m.htm"> <title>CLHS: Glossary-Section M</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_l.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_n.htm"> <title>CLHS: Glossary-Section N</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_m.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_o.htm"> <title>CLHS: Glossary-Section O</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_n.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_p.htm"> <title>CLHS: Glossary-Section P</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_o.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_q.htm"> <title>CLHS: Glossary-Section Q</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_p.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_r.htm"> <title>CLHS: Glossary-Section R</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_q.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_s.htm"> <title>CLHS: Glossary-Section S</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_r.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_t.htm"> <title>CLHS: Glossary-Section T</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_s.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_u.htm"> <title>CLHS: Glossary-Section U</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_t.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_v.htm"> <title>CLHS: Glossary-Section V</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_u.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_w.htm"> <title>CLHS: Glossary-Section W</title> <link href="../Data/clhs.css" rel="stylesheet" type="text/css"> <meta http-equiv="Author" content="Kent M. Pitman"> <meta http-equiv="Organization" content="LispWorks Ltd."> <link rel="TOP" href="../Front/index.htm"> <link rel="COPYRIGHT" href="../Front/Help.htm#Legal"> <link rel="DISCLAIMER" href="../Front/Help.htm#Disclaimer"> <link rel="PREV" href="26_glo_v.htm"> <link rel="UP" href="26_a.htm"> <link rel="NEXT" href="26_glo_y.htm"> <title>CLHS: Glossary-Section Y)ES()0 1 TN()EA()BN}if
2 NH le{695(0.1\240\240)2 C(26. Glossary)695 1 TN()EA()BN}if
2 NH le{696(0.2\240\240)2 C(26.1 Glossary)696 1 TN()EA()BN}if

/TE t D NP TU PM 0 eq and{/Pn () D showpage}if end restore
